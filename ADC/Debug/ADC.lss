
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000009dc  00000a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000009a8  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010be  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000024c2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00003bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00003c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	21 d1       	rcall	.+578    	; 0x352 <main>
 110:	63 c4       	rjmp	.+2246   	; 0x9d8 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_Z8adc_initv>:
#include <stdio.h>

#define BAUD 9600
#define MYUBRR_VALUE F_CPU/16/BAUD-1

void adc_init() {
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
    ADMUX = (1 << REFS0);
 11c:	8c e7       	ldi	r24, 0x7C	; 124
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	20 e4       	ldi	r18, 0x40	; 64
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
    ADCSRA = (1 << ADEN);
 126:	8a e7       	ldi	r24, 0x7A	; 122
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	20 e8       	ldi	r18, 0x80	; 128
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
    //ADCSRA = (1 << ADIF);
}
 130:	00 00       	nop
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_Z9uart_initv>:

void uart_init() {
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
	// Set baud rate
    UBRR0 = MYUBRR_VALUE;
 140:	84 ec       	ldi	r24, 0xC4	; 196
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	27 e6       	ldi	r18, 0x67	; 103
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	31 83       	std	Z+1, r19	; 0x01
 14c:	20 83       	st	Z, r18

    // Set TX and RX
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 14e:	81 ec       	ldi	r24, 0xC1	; 193
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	28 e1       	ldi	r18, 0x18	; 24
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18

    // Set frame format: 8 data, 1 stop bit (00000110)
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 158:	82 ec       	ldi	r24, 0xC2	; 194
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	26 e0       	ldi	r18, 0x06	; 6
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
}
 162:	00 00       	nop
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <_Z7uart_txPc>:

void uart_tx(char *data) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <_Z7uart_txPc+0x6>
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	9c 83       	std	Y+4, r25	; 0x04
 178:	8b 83       	std	Y+3, r24	; 0x03
    for (int i=0;data[i]!=0;i++) {
 17a:	1a 82       	std	Y+2, r1	; 0x02
 17c:	19 82       	std	Y+1, r1	; 0x01
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	2b 81       	ldd	r18, Y+3	; 0x03
 184:	3c 81       	ldd	r19, Y+4	; 0x04
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	09 f1       	breq	.+66     	; 0x1d4 <_Z7uart_txPc+0x6a>
        while ( !(UCSR0A & (1 << UDRE0)) );
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	80 72       	andi	r24, 0x20	; 32
 1a0:	99 27       	eor	r25, r25
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	89 2b       	or	r24, r25
 1a6:	09 f0       	breq	.+2      	; 0x1aa <_Z7uart_txPc+0x40>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	22 23       	and	r18, r18
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <_Z7uart_txPc+0x46>
 1ae:	f1 cf       	rjmp	.-30     	; 0x192 <_Z7uart_txPc+0x28>
        UDR0 = data[i];
 1b0:	86 ec       	ldi	r24, 0xC6	; 198
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	29 81       	ldd	r18, Y+1	; 0x01
 1b6:	3a 81       	ldd	r19, Y+2	; 0x02
 1b8:	4b 81       	ldd	r20, Y+3	; 0x03
 1ba:	5c 81       	ldd	r21, Y+4	; 0x04
 1bc:	24 0f       	add	r18, r20
 1be:	35 1f       	adc	r19, r21
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
    // Set frame format: 8 data, 1 stop bit (00000110)
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
}

void uart_tx(char *data) {
    for (int i=0;data[i]!=0;i++) {
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	9a 83       	std	Y+2, r25	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	d5 cf       	rjmp	.-86     	; 0x17e <_Z7uart_txPc+0x14>
        while ( !(UCSR0A & (1 << UDRE0)) );
        UDR0 = data[i];
    }
}
 1d4:	00 00       	nop
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <_Z13dig_to_analogf>:

int dig_to_analog(float dig){
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <_Z13dig_to_analogf+0x6>
 1ea:	1f 92       	push	r1
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	69 83       	std	Y+1, r22	; 0x01
 1f2:	7a 83       	std	Y+2, r23	; 0x02
 1f4:	8b 83       	std	Y+3, r24	; 0x03
 1f6:	9c 83       	std	Y+4, r25	; 0x04
  return (dig*5)/1023;
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 ea       	ldi	r20, 0xA0	; 160
 1fe:	50 e4       	ldi	r21, 0x40	; 64
 200:	69 81       	ldd	r22, Y+1	; 0x01
 202:	7a 81       	ldd	r23, Y+2	; 0x02
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	9c 81       	ldd	r25, Y+4	; 0x04
 208:	40 d3       	rcall	.+1664   	; 0x88a <__mulsf3>
 20a:	dc 01       	movw	r26, r24
 20c:	cb 01       	movw	r24, r22
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 ec       	ldi	r19, 0xC0	; 192
 212:	4f e7       	ldi	r20, 0x7F	; 127
 214:	54 e4       	ldi	r21, 0x44	; 68
 216:	bc 01       	movw	r22, r24
 218:	cd 01       	movw	r24, r26
 21a:	e8 d1       	rcall	.+976    	; 0x5ec <__divsf3>
 21c:	dc 01       	movw	r26, r24
 21e:	cb 01       	movw	r24, r22
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	4b d2       	rcall	.+1174   	; 0x6bc <__fixsfsi>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22

}
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <_Z11analog_readv>:

int analog_to_dig(float analog){
  return (analog*1023)/5;
}

int analog_read() {
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	1f 92       	push	r1
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	int val;
	ADCSRA |= (1 << ADSC);
 244:	8a e7       	ldi	r24, 0x7A	; 122
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	2a e7       	ldi	r18, 0x7A	; 122
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	f9 01       	movw	r30, r18
 24e:	20 81       	ld	r18, Z
 250:	20 64       	ori	r18, 0x40	; 64
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
	while ( !(ADCSRA & (1 << ADIF)) );
 256:	8a e7       	ldi	r24, 0x7A	; 122
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	80 81       	ld	r24, Z
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	80 71       	andi	r24, 0x10	; 16
 264:	99 27       	eor	r25, r25
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	89 2b       	or	r24, r25
 26a:	09 f0       	breq	.+2      	; 0x26e <_Z11analog_readv+0x36>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	22 23       	and	r18, r18
 270:	09 f0       	breq	.+2      	; 0x274 <_Z11analog_readv+0x3c>
 272:	f1 cf       	rjmp	.-30     	; 0x256 <_Z11analog_readv+0x1e>
	val = ADC;
 274:	88 e7       	ldi	r24, 0x78	; 120
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	80 81       	ld	r24, Z
 27c:	91 81       	ldd	r25, Z+1	; 0x01
 27e:	9a 83       	std	Y+2, r25	; 0x02
 280:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &= ~(1 << ADSC);
 282:	8a e7       	ldi	r24, 0x7A	; 122
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	2a e7       	ldi	r18, 0x7A	; 122
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	20 81       	ld	r18, Z
 28e:	2f 7b       	andi	r18, 0xBF	; 191
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
	return val;
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	9a 81       	ldd	r25, Y+2	; 0x02
}
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <_Z8rms_readi>:

int rms_read(int repeat) {
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	28 97       	sbiw	r28, 0x08	; 8
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	98 87       	std	Y+8, r25	; 0x08
 2b8:	8f 83       	std	Y+7, r24	; 0x07
	float accumulated = 0;
 2ba:	19 82       	std	Y+1, r1	; 0x01
 2bc:	1a 82       	std	Y+2, r1	; 0x02
 2be:	1b 82       	std	Y+3, r1	; 0x03
 2c0:	1c 82       	std	Y+4, r1	; 0x04
	for(int n=0;n<repeat;n++) {
 2c2:	1e 82       	std	Y+6, r1	; 0x06
 2c4:	1d 82       	std	Y+5, r1	; 0x05
 2c6:	2d 81       	ldd	r18, Y+5	; 0x05
 2c8:	3e 81       	ldd	r19, Y+6	; 0x06
 2ca:	8f 81       	ldd	r24, Y+7	; 0x07
 2cc:	98 85       	ldd	r25, Y+8	; 0x08
 2ce:	28 17       	cp	r18, r24
 2d0:	39 07       	cpc	r19, r25
		accumulated += analog_read();
 2d2:	ec f4       	brge	.+58     	; 0x30e <_Z8rms_readi+0x6c>
 2d4:	b1 df       	rcall	.-158    	; 0x238 <_Z11analog_readv>
 2d6:	09 2e       	mov	r0, r25
 2d8:	00 0c       	add	r0, r0
 2da:	aa 0b       	sbc	r26, r26
 2dc:	bb 0b       	sbc	r27, r27
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	1f d2       	rcall	.+1086   	; 0x722 <__floatsisf>
 2e4:	dc 01       	movw	r26, r24
 2e6:	cb 01       	movw	r24, r22
 2e8:	9c 01       	movw	r18, r24
 2ea:	ad 01       	movw	r20, r26
 2ec:	69 81       	ldd	r22, Y+1	; 0x01
 2ee:	7a 81       	ldd	r23, Y+2	; 0x02
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	9c 81       	ldd	r25, Y+4	; 0x04
 2f4:	13 d1       	rcall	.+550    	; 0x51c <__addsf3>
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	9a 83       	std	Y+2, r25	; 0x02
 2fe:	ab 83       	std	Y+3, r26	; 0x03
 300:	bc 83       	std	Y+4, r27	; 0x04
	return val;
}

int rms_read(int repeat) {
	float accumulated = 0;
	for(int n=0;n<repeat;n++) {
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	9e 83       	std	Y+6, r25	; 0x06
 30a:	8d 83       	std	Y+5, r24	; 0x05
 30c:	dc cf       	rjmp	.-72     	; 0x2c6 <_Z8rms_readi+0x24>
		accumulated += analog_read();
	}
	return accumulated/repeat;
 30e:	8f 81       	ldd	r24, Y+7	; 0x07
 310:	98 85       	ldd	r25, Y+8	; 0x08
 312:	09 2e       	mov	r0, r25
 314:	00 0c       	add	r0, r0
 316:	aa 0b       	sbc	r26, r26
 318:	bb 0b       	sbc	r27, r27
 31a:	bc 01       	movw	r22, r24
 31c:	cd 01       	movw	r24, r26
 31e:	01 d2       	rcall	.+1026   	; 0x722 <__floatsisf>
 320:	dc 01       	movw	r26, r24
 322:	cb 01       	movw	r24, r22
 324:	9c 01       	movw	r18, r24
 326:	ad 01       	movw	r20, r26
 328:	69 81       	ldd	r22, Y+1	; 0x01
 32a:	7a 81       	ldd	r23, Y+2	; 0x02
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	9c 81       	ldd	r25, Y+4	; 0x04
 330:	5d d1       	rcall	.+698    	; 0x5ec <__divsf3>
 332:	dc 01       	movw	r26, r24
 334:	cb 01       	movw	r24, r22
 336:	bc 01       	movw	r22, r24
 338:	cd 01       	movw	r24, r26
 33a:	c0 d1       	rcall	.+896    	; 0x6bc <__fixsfsi>
 33c:	dc 01       	movw	r26, r24
 33e:	cb 01       	movw	r24, r22
}
 340:	28 96       	adiw	r28, 0x08	; 8
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <main>:

int main(void) {
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	ca 5d       	subi	r28, 0xDA	; 218
 35c:	d1 09       	sbc	r29, r1
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
	uart_init();
 366:	cd bf       	out	0x3d, r28	; 61
	adc_init();
 368:	e7 de       	rcall	.-562    	; 0x138 <_Z9uart_initv>
 36a:	d4 de       	rcall	.-600    	; 0x114 <_Z8adc_initv>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	aa e7       	ldi	r26, 0x7A	; 122
 372:	b4 e4       	ldi	r27, 0x44	; 68
 374:	8d 83       	std	Y+5, r24	; 0x05
 376:	9e 83       	std	Y+6, r25	; 0x06
 378:	af 83       	std	Y+7, r26	; 0x07
 37a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	4a e7       	ldi	r20, 0x7A	; 122
 382:	55 e4       	ldi	r21, 0x45	; 69
 384:	6d 81       	ldd	r22, Y+5	; 0x05
 386:	7e 81       	ldd	r23, Y+6	; 0x06
 388:	8f 81       	ldd	r24, Y+7	; 0x07
 38a:	98 85       	ldd	r25, Y+8	; 0x08
 38c:	7e d2       	rcall	.+1276   	; 0x88a <__mulsf3>
 38e:	dc 01       	movw	r26, r24
 390:	cb 01       	movw	r24, r22
 392:	89 87       	std	Y+9, r24	; 0x09
 394:	9a 87       	std	Y+10, r25	; 0x0a
 396:	ab 87       	std	Y+11, r26	; 0x0b
 398:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	40 e8       	ldi	r20, 0x80	; 128
 3a0:	5f e3       	ldi	r21, 0x3F	; 63
 3a2:	69 85       	ldd	r22, Y+9	; 0x09
 3a4:	7a 85       	ldd	r23, Y+10	; 0x0a
 3a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 3a8:	9c 85       	ldd	r25, Y+12	; 0x0c
 3aa:	1c d1       	rcall	.+568    	; 0x5e4 <__cmpsf2>
 3ac:	88 23       	and	r24, r24
 3ae:	2c f4       	brge	.+10     	; 0x3ba <main+0x68>
		__ticks = 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9e 87       	std	Y+14, r25	; 0x0e
 3b6:	8d 87       	std	Y+13, r24	; 0x0d
 3b8:	3a c0       	rjmp	.+116    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	else if (__tmp > 65535)
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	3f ef       	ldi	r19, 0xFF	; 255
 3be:	4f e7       	ldi	r20, 0x7F	; 127
 3c0:	57 e4       	ldi	r21, 0x47	; 71
 3c2:	69 85       	ldd	r22, Y+9	; 0x09
 3c4:	7a 85       	ldd	r23, Y+10	; 0x0a
 3c6:	8b 85       	ldd	r24, Y+11	; 0x0b
 3c8:	9c 85       	ldd	r25, Y+12	; 0x0c
 3ca:	5b d2       	rcall	.+1206   	; 0x882 <__gesf2>
 3cc:	18 16       	cp	r1, r24
 3ce:	34 f5       	brge	.+76     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	40 e2       	ldi	r20, 0x20	; 32
 3d6:	51 e4       	ldi	r21, 0x41	; 65
 3d8:	6d 81       	ldd	r22, Y+5	; 0x05
 3da:	7e 81       	ldd	r23, Y+6	; 0x06
 3dc:	8f 81       	ldd	r24, Y+7	; 0x07
 3de:	98 85       	ldd	r25, Y+8	; 0x08
 3e0:	54 d2       	rcall	.+1192   	; 0x88a <__mulsf3>
 3e2:	dc 01       	movw	r26, r24
 3e4:	cb 01       	movw	r24, r22
 3e6:	bc 01       	movw	r22, r24
 3e8:	cd 01       	movw	r24, r26
 3ea:	6d d1       	rcall	.+730    	; 0x6c6 <__fixunssfsi>
 3ec:	dc 01       	movw	r26, r24
 3ee:	cb 01       	movw	r24, r22
 3f0:	9e 87       	std	Y+14, r25	; 0x0e
 3f2:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
 3f4:	8d 85       	ldd	r24, Y+13	; 0x0d
 3f6:	9e 85       	ldd	r25, Y+14	; 0x0e
 3f8:	89 2b       	or	r24, r25
 3fa:	19 f1       	breq	.+70     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3fc:	80 e9       	ldi	r24, 0x90	; 144
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	98 8b       	std	Y+16, r25	; 0x10
 402:	8f 87       	std	Y+15, r24	; 0x0f
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 404:	8f 85       	ldd	r24, Y+15	; 0x0f
 406:	98 89       	ldd	r25, Y+16	; 0x10
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 40c:	98 8b       	std	Y+16, r25	; 0x10
 40e:	8f 87       	std	Y+15, r24	; 0x0f
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 410:	8d 85       	ldd	r24, Y+13	; 0x0d
 412:	9e 85       	ldd	r25, Y+14	; 0x0e
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	9e 87       	std	Y+14, r25	; 0x0e
 418:	8d 87       	std	Y+13, r24	; 0x0d
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 41a:	ec cf       	rjmp	.-40     	; 0x3f4 <main+0xa2>
 41c:	69 85       	ldd	r22, Y+9	; 0x09
 41e:	7a 85       	ldd	r23, Y+10	; 0x0a
 420:	8b 85       	ldd	r24, Y+11	; 0x0b
 422:	9c 85       	ldd	r25, Y+12	; 0x0c
 424:	50 d1       	rcall	.+672    	; 0x6c6 <__fixunssfsi>
 426:	dc 01       	movw	r26, r24
 428:	cb 01       	movw	r24, r22
 42a:	9e 87       	std	Y+14, r25	; 0x0e
 42c:	8d 87       	std	Y+13, r24	; 0x0d
 42e:	8d 85       	ldd	r24, Y+13	; 0x0d
 430:	9e 85       	ldd	r25, Y+14	; 0x0e
 432:	9a 8b       	std	Y+18, r25	; 0x12
 434:	89 8b       	std	Y+17, r24	; 0x11
 436:	89 89       	ldd	r24, Y+17	; 0x11
 438:	9a 89       	ldd	r25, Y+18	; 0x12
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43e:	9a 8b       	std	Y+18, r25	; 0x12
    to the overall delay time.

    Two inline functions are provided for the actual delay algorithms.

*/

 440:	89 8b       	std	Y+17, r24	; 0x11
 442:	ce 01       	movw	r24, r28
 444:	89 58       	subi	r24, 0x89	; 137
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	44 e6       	ldi	r20, 0x64	; 100
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	60 e0       	ldi	r22, 0x00	; 0
/** \ingroup util_delay_basic
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	7f d2       	rcall	.+1278   	; 0x950 <memset>
 452:	ce 01       	movw	r24, r28
 454:	43 96       	adiw	r24, 0x13	; 19
 456:	44 e6       	ldi	r20, 0x64	; 100
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	70 e0       	ldi	r23, 0x00	; 0

    Delay loop using an 8-bit counter \c __count, so up to 256
 45e:	78 d2       	rcall	.+1264   	; 0x950 <memset>
 460:	84 e6       	ldi	r24, 0x64	; 100
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	1e df       	rcall	.-452    	; 0x2a2 <_Z8rms_readi>
 466:	9a 83       	std	Y+2, r25	; 0x02
    iterations are possible.  (The value 256 would have to be passed
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	09 2e       	mov	r0, r25
 470:	00 0c       	add	r0, r0
 472:	aa 0b       	sbc	r26, r26
 474:	bb 0b       	sbc	r27, r27
 476:	bc 01       	movw	r22, r24
 478:	cd 01       	movw	r24, r26
 47a:	53 d1       	rcall	.+678    	; 0x722 <__floatsisf>
 47c:	dc 01       	movw	r26, r24
 47e:	cb 01       	movw	r24, r22
 480:	bc 01       	movw	r22, r24
 482:	cd 01       	movw	r24, r26
 484:	af de       	rcall	.-674    	; 0x1e4 <_Z13dig_to_analogf>
 486:	9c 83       	std	Y+4, r25	; 0x04
    as 0.)  The loop executes three CPU cycles per iteration, not
    including the overhead the compiler needs to setup the counter
 488:	8b 83       	std	Y+3, r24	; 0x03
 48a:	9e 01       	movw	r18, r28
 48c:	29 58       	subi	r18, 0x89	; 137
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	4a e0       	ldi	r20, 0x0A	; 10
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	b9 01       	movw	r22, r18
    register.
 49a:	61 d2       	rcall	.+1218   	; 0x95e <itoa>
 49c:	9e 01       	movw	r18, r28
 49e:	2d 5e       	subi	r18, 0xED	; 237
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	4a e0       	ldi	r20, 0x0A	; 10
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	b9 01       	movw	r22, r18
 4ac:	58 d2       	rcall	.+1200   	; 0x95e <itoa>

    Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
 4ae:	ce 01       	movw	r24, r28
 4b0:	89 58       	subi	r24, 0x89	; 137
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	9c 01       	movw	r18, r24
 4b6:	f9 01       	movw	r30, r18
 4b8:	01 90       	ld	r0, Z+
 4ba:	00 20       	and	r0, r0
 4bc:	e9 f7       	brne	.-6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4be:	cf 01       	movw	r24, r30
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	82 1b       	sub	r24, r18
 4c4:	93 0b       	sbc	r25, r19
 4c6:	9e 01       	movw	r18, r28
 4c8:	29 58       	subi	r18, 0x89	; 137
 4ca:	3f 4f       	sbci	r19, 0xFF	; 255
 4cc:	82 0f       	add	r24, r18
 4ce:	93 1f       	adc	r25, r19
 4d0:	2a e0       	ldi	r18, 0x0A	; 10
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	fc 01       	movw	r30, r24
 4d6:	31 83       	std	Z+1, r19	; 0x01
 4d8:	20 83       	st	Z, r18
    can be achieved.
 4da:	ce 01       	movw	r24, r28
 4dc:	43 96       	adiw	r24, 0x13	; 19
 4de:	9c 01       	movw	r18, r24
 4e0:	f9 01       	movw	r30, r18
 4e2:	01 90       	ld	r0, Z+
 4e4:	00 20       	and	r0, r0
 4e6:	e9 f7       	brne	.-6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e8:	cf 01       	movw	r24, r30
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	82 1b       	sub	r24, r18
 4ee:	93 0b       	sbc	r25, r19
 4f0:	9e 01       	movw	r18, r28
 4f2:	2d 5e       	subi	r18, 0xED	; 237
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	82 0f       	add	r24, r18
 4f8:	93 1f       	adc	r25, r19
 4fa:	2a e0       	ldi	r18, 0x0A	; 10
 4fc:	30 e0       	ldi	r19, 0x00	; 0
*/
void
 4fe:	fc 01       	movw	r30, r24
 500:	31 83       	std	Z+1, r19	; 0x01
 502:	20 83       	st	Z, r18
 504:	ce 01       	movw	r24, r28
 506:	89 58       	subi	r24, 0x89	; 137
_delay_loop_1(uint8_t __count)
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	2f de       	rcall	.-930    	; 0x16a <_Z7uart_txPc>
 50c:	ce 01       	movw	r24, r28
 50e:	43 96       	adiw	r24, 0x13	; 19
{
 510:	2c de       	rcall	.-936    	; 0x16a <_Z7uart_txPc>
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	29 de       	rcall	.-942    	; 0x16a <_Z7uart_txPc>
    much preferrable, as they free the CPU, and allow for
    concurrent processing of other events while the timer is
    running.  However, in particular for very short delays, the
    overhead of setting up a hardware timer is too much compared
    to the overall delay time.

 518:	29 cf       	rjmp	.-430    	; 0x36c <main+0x1a>

0000051a <__subsf3>:
 51a:	50 58       	subi	r21, 0x80	; 128

0000051c <__addsf3>:
 51c:	bb 27       	eor	r27, r27
 51e:	aa 27       	eor	r26, r26
 520:	0e d0       	rcall	.+28     	; 0x53e <__addsf3x>
 522:	75 c1       	rjmp	.+746    	; 0x80e <__fp_round>
 524:	66 d1       	rcall	.+716    	; 0x7f2 <__fp_pscA>
 526:	30 f0       	brcs	.+12     	; 0x534 <__addsf3+0x18>
 528:	6b d1       	rcall	.+726    	; 0x800 <__fp_pscB>
 52a:	20 f0       	brcs	.+8      	; 0x534 <__addsf3+0x18>
 52c:	31 f4       	brne	.+12     	; 0x53a <__addsf3+0x1e>
 52e:	9f 3f       	cpi	r25, 0xFF	; 255
 530:	11 f4       	brne	.+4      	; 0x536 <__addsf3+0x1a>
 532:	1e f4       	brtc	.+6      	; 0x53a <__addsf3+0x1e>
 534:	5b c1       	rjmp	.+694    	; 0x7ec <__fp_nan>
 536:	0e f4       	brtc	.+2      	; 0x53a <__addsf3+0x1e>
 538:	e0 95       	com	r30
 53a:	e7 fb       	bst	r30, 7
 53c:	51 c1       	rjmp	.+674    	; 0x7e0 <__fp_inf>

0000053e <__addsf3x>:
 53e:	e9 2f       	mov	r30, r25
 540:	77 d1       	rcall	.+750    	; 0x830 <__fp_split3>
 542:	80 f3       	brcs	.-32     	; 0x524 <__addsf3+0x8>
 544:	ba 17       	cp	r27, r26
 546:	62 07       	cpc	r22, r18
 548:	73 07       	cpc	r23, r19
 54a:	84 07       	cpc	r24, r20
 54c:	95 07       	cpc	r25, r21
 54e:	18 f0       	brcs	.+6      	; 0x556 <__addsf3x+0x18>
 550:	71 f4       	brne	.+28     	; 0x56e <__addsf3x+0x30>
 552:	9e f5       	brtc	.+102    	; 0x5ba <__addsf3x+0x7c>
 554:	8f c1       	rjmp	.+798    	; 0x874 <__fp_zero>
 556:	0e f4       	brtc	.+2      	; 0x55a <__addsf3x+0x1c>
 558:	e0 95       	com	r30
 55a:	0b 2e       	mov	r0, r27
 55c:	ba 2f       	mov	r27, r26
 55e:	a0 2d       	mov	r26, r0
 560:	0b 01       	movw	r0, r22
 562:	b9 01       	movw	r22, r18
 564:	90 01       	movw	r18, r0
 566:	0c 01       	movw	r0, r24
 568:	ca 01       	movw	r24, r20
 56a:	a0 01       	movw	r20, r0
 56c:	11 24       	eor	r1, r1
 56e:	ff 27       	eor	r31, r31
 570:	59 1b       	sub	r21, r25
 572:	99 f0       	breq	.+38     	; 0x59a <__addsf3x+0x5c>
 574:	59 3f       	cpi	r21, 0xF9	; 249
 576:	50 f4       	brcc	.+20     	; 0x58c <__addsf3x+0x4e>
 578:	50 3e       	cpi	r21, 0xE0	; 224
 57a:	68 f1       	brcs	.+90     	; 0x5d6 <__addsf3x+0x98>
 57c:	1a 16       	cp	r1, r26
 57e:	f0 40       	sbci	r31, 0x00	; 0
 580:	a2 2f       	mov	r26, r18
 582:	23 2f       	mov	r18, r19
 584:	34 2f       	mov	r19, r20
 586:	44 27       	eor	r20, r20
 588:	58 5f       	subi	r21, 0xF8	; 248
 58a:	f3 cf       	rjmp	.-26     	; 0x572 <__addsf3x+0x34>
 58c:	46 95       	lsr	r20
 58e:	37 95       	ror	r19
 590:	27 95       	ror	r18
 592:	a7 95       	ror	r26
 594:	f0 40       	sbci	r31, 0x00	; 0
 596:	53 95       	inc	r21
 598:	c9 f7       	brne	.-14     	; 0x58c <__addsf3x+0x4e>
 59a:	7e f4       	brtc	.+30     	; 0x5ba <__addsf3x+0x7c>
 59c:	1f 16       	cp	r1, r31
 59e:	ba 0b       	sbc	r27, r26
 5a0:	62 0b       	sbc	r22, r18
 5a2:	73 0b       	sbc	r23, r19
 5a4:	84 0b       	sbc	r24, r20
 5a6:	ba f0       	brmi	.+46     	; 0x5d6 <__addsf3x+0x98>
 5a8:	91 50       	subi	r25, 0x01	; 1
 5aa:	a1 f0       	breq	.+40     	; 0x5d4 <__addsf3x+0x96>
 5ac:	ff 0f       	add	r31, r31
 5ae:	bb 1f       	adc	r27, r27
 5b0:	66 1f       	adc	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	c2 f7       	brpl	.-16     	; 0x5a8 <__addsf3x+0x6a>
 5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <__addsf3x+0x98>
 5ba:	ba 0f       	add	r27, r26
 5bc:	62 1f       	adc	r22, r18
 5be:	73 1f       	adc	r23, r19
 5c0:	84 1f       	adc	r24, r20
 5c2:	48 f4       	brcc	.+18     	; 0x5d6 <__addsf3x+0x98>
 5c4:	87 95       	ror	r24
 5c6:	77 95       	ror	r23
 5c8:	67 95       	ror	r22
 5ca:	b7 95       	ror	r27
 5cc:	f7 95       	ror	r31
 5ce:	9e 3f       	cpi	r25, 0xFE	; 254
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__addsf3x+0x96>
 5d2:	b3 cf       	rjmp	.-154    	; 0x53a <__addsf3+0x1e>
 5d4:	93 95       	inc	r25
 5d6:	88 0f       	add	r24, r24
 5d8:	08 f0       	brcs	.+2      	; 0x5dc <__addsf3x+0x9e>
 5da:	99 27       	eor	r25, r25
 5dc:	ee 0f       	add	r30, r30
 5de:	97 95       	ror	r25
 5e0:	87 95       	ror	r24
 5e2:	08 95       	ret

000005e4 <__cmpsf2>:
 5e4:	d9 d0       	rcall	.+434    	; 0x798 <__fp_cmp>
 5e6:	08 f4       	brcc	.+2      	; 0x5ea <__cmpsf2+0x6>
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	08 95       	ret

000005ec <__divsf3>:
 5ec:	0c d0       	rcall	.+24     	; 0x606 <__divsf3x>
 5ee:	0f c1       	rjmp	.+542    	; 0x80e <__fp_round>
 5f0:	07 d1       	rcall	.+526    	; 0x800 <__fp_pscB>
 5f2:	40 f0       	brcs	.+16     	; 0x604 <__divsf3+0x18>
 5f4:	fe d0       	rcall	.+508    	; 0x7f2 <__fp_pscA>
 5f6:	30 f0       	brcs	.+12     	; 0x604 <__divsf3+0x18>
 5f8:	21 f4       	brne	.+8      	; 0x602 <__divsf3+0x16>
 5fa:	5f 3f       	cpi	r21, 0xFF	; 255
 5fc:	19 f0       	breq	.+6      	; 0x604 <__divsf3+0x18>
 5fe:	f0 c0       	rjmp	.+480    	; 0x7e0 <__fp_inf>
 600:	51 11       	cpse	r21, r1
 602:	39 c1       	rjmp	.+626    	; 0x876 <__fp_szero>
 604:	f3 c0       	rjmp	.+486    	; 0x7ec <__fp_nan>

00000606 <__divsf3x>:
 606:	14 d1       	rcall	.+552    	; 0x830 <__fp_split3>
 608:	98 f3       	brcs	.-26     	; 0x5f0 <__divsf3+0x4>

0000060a <__divsf3_pse>:
 60a:	99 23       	and	r25, r25
 60c:	c9 f3       	breq	.-14     	; 0x600 <__divsf3+0x14>
 60e:	55 23       	and	r21, r21
 610:	b1 f3       	breq	.-20     	; 0x5fe <__divsf3+0x12>
 612:	95 1b       	sub	r25, r21
 614:	55 0b       	sbc	r21, r21
 616:	bb 27       	eor	r27, r27
 618:	aa 27       	eor	r26, r26
 61a:	62 17       	cp	r22, r18
 61c:	73 07       	cpc	r23, r19
 61e:	84 07       	cpc	r24, r20
 620:	38 f0       	brcs	.+14     	; 0x630 <__divsf3_pse+0x26>
 622:	9f 5f       	subi	r25, 0xFF	; 255
 624:	5f 4f       	sbci	r21, 0xFF	; 255
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	44 1f       	adc	r20, r20
 62c:	aa 1f       	adc	r26, r26
 62e:	a9 f3       	breq	.-22     	; 0x61a <__divsf3_pse+0x10>
 630:	33 d0       	rcall	.+102    	; 0x698 <__divsf3_pse+0x8e>
 632:	0e 2e       	mov	r0, r30
 634:	3a f0       	brmi	.+14     	; 0x644 <__divsf3_pse+0x3a>
 636:	e0 e8       	ldi	r30, 0x80	; 128
 638:	30 d0       	rcall	.+96     	; 0x69a <__divsf3_pse+0x90>
 63a:	91 50       	subi	r25, 0x01	; 1
 63c:	50 40       	sbci	r21, 0x00	; 0
 63e:	e6 95       	lsr	r30
 640:	00 1c       	adc	r0, r0
 642:	ca f7       	brpl	.-14     	; 0x636 <__divsf3_pse+0x2c>
 644:	29 d0       	rcall	.+82     	; 0x698 <__divsf3_pse+0x8e>
 646:	fe 2f       	mov	r31, r30
 648:	27 d0       	rcall	.+78     	; 0x698 <__divsf3_pse+0x8e>
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	88 1f       	adc	r24, r24
 650:	bb 1f       	adc	r27, r27
 652:	26 17       	cp	r18, r22
 654:	37 07       	cpc	r19, r23
 656:	48 07       	cpc	r20, r24
 658:	ab 07       	cpc	r26, r27
 65a:	b0 e8       	ldi	r27, 0x80	; 128
 65c:	09 f0       	breq	.+2      	; 0x660 <__divsf3_pse+0x56>
 65e:	bb 0b       	sbc	r27, r27
 660:	80 2d       	mov	r24, r0
 662:	bf 01       	movw	r22, r30
 664:	ff 27       	eor	r31, r31
 666:	93 58       	subi	r25, 0x83	; 131
 668:	5f 4f       	sbci	r21, 0xFF	; 255
 66a:	2a f0       	brmi	.+10     	; 0x676 <__divsf3_pse+0x6c>
 66c:	9e 3f       	cpi	r25, 0xFE	; 254
 66e:	51 05       	cpc	r21, r1
 670:	68 f0       	brcs	.+26     	; 0x68c <__divsf3_pse+0x82>
 672:	b6 c0       	rjmp	.+364    	; 0x7e0 <__fp_inf>
 674:	00 c1       	rjmp	.+512    	; 0x876 <__fp_szero>
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	ec f3       	brlt	.-6      	; 0x674 <__divsf3_pse+0x6a>
 67a:	98 3e       	cpi	r25, 0xE8	; 232
 67c:	dc f3       	brlt	.-10     	; 0x674 <__divsf3_pse+0x6a>
 67e:	86 95       	lsr	r24
 680:	77 95       	ror	r23
 682:	67 95       	ror	r22
 684:	b7 95       	ror	r27
 686:	f7 95       	ror	r31
 688:	9f 5f       	subi	r25, 0xFF	; 255
 68a:	c9 f7       	brne	.-14     	; 0x67e <__divsf3_pse+0x74>
 68c:	88 0f       	add	r24, r24
 68e:	91 1d       	adc	r25, r1
 690:	96 95       	lsr	r25
 692:	87 95       	ror	r24
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret
 698:	e1 e0       	ldi	r30, 0x01	; 1
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	bb 1f       	adc	r27, r27
 6a2:	62 17       	cp	r22, r18
 6a4:	73 07       	cpc	r23, r19
 6a6:	84 07       	cpc	r24, r20
 6a8:	ba 07       	cpc	r27, r26
 6aa:	20 f0       	brcs	.+8      	; 0x6b4 <__divsf3_pse+0xaa>
 6ac:	62 1b       	sub	r22, r18
 6ae:	73 0b       	sbc	r23, r19
 6b0:	84 0b       	sbc	r24, r20
 6b2:	ba 0b       	sbc	r27, r26
 6b4:	ee 1f       	adc	r30, r30
 6b6:	88 f7       	brcc	.-30     	; 0x69a <__divsf3_pse+0x90>
 6b8:	e0 95       	com	r30
 6ba:	08 95       	ret

000006bc <__fixsfsi>:
 6bc:	04 d0       	rcall	.+8      	; 0x6c6 <__fixunssfsi>
 6be:	68 94       	set
 6c0:	b1 11       	cpse	r27, r1
 6c2:	d9 c0       	rjmp	.+434    	; 0x876 <__fp_szero>
 6c4:	08 95       	ret

000006c6 <__fixunssfsi>:
 6c6:	bc d0       	rcall	.+376    	; 0x840 <__fp_splitA>
 6c8:	88 f0       	brcs	.+34     	; 0x6ec <__fixunssfsi+0x26>
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	90 f0       	brcs	.+36     	; 0x6f2 <__fixunssfsi+0x2c>
 6ce:	b9 2f       	mov	r27, r25
 6d0:	99 27       	eor	r25, r25
 6d2:	b7 51       	subi	r27, 0x17	; 23
 6d4:	a0 f0       	brcs	.+40     	; 0x6fe <__fixunssfsi+0x38>
 6d6:	d1 f0       	breq	.+52     	; 0x70c <__fixunssfsi+0x46>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	1a f0       	brmi	.+6      	; 0x6e8 <__fixunssfsi+0x22>
 6e2:	ba 95       	dec	r27
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__fixunssfsi+0x12>
 6e6:	12 c0       	rjmp	.+36     	; 0x70c <__fixunssfsi+0x46>
 6e8:	b1 30       	cpi	r27, 0x01	; 1
 6ea:	81 f0       	breq	.+32     	; 0x70c <__fixunssfsi+0x46>
 6ec:	c3 d0       	rcall	.+390    	; 0x874 <__fp_zero>
 6ee:	b1 e0       	ldi	r27, 0x01	; 1
 6f0:	08 95       	ret
 6f2:	c0 c0       	rjmp	.+384    	; 0x874 <__fp_zero>
 6f4:	67 2f       	mov	r22, r23
 6f6:	78 2f       	mov	r23, r24
 6f8:	88 27       	eor	r24, r24
 6fa:	b8 5f       	subi	r27, 0xF8	; 248
 6fc:	39 f0       	breq	.+14     	; 0x70c <__fixunssfsi+0x46>
 6fe:	b9 3f       	cpi	r27, 0xF9	; 249
 700:	cc f3       	brlt	.-14     	; 0x6f4 <__fixunssfsi+0x2e>
 702:	86 95       	lsr	r24
 704:	77 95       	ror	r23
 706:	67 95       	ror	r22
 708:	b3 95       	inc	r27
 70a:	d9 f7       	brne	.-10     	; 0x702 <__fixunssfsi+0x3c>
 70c:	3e f4       	brtc	.+14     	; 0x71c <__fixunssfsi+0x56>
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	08 95       	ret

0000071e <__floatunsisf>:
 71e:	e8 94       	clt
 720:	09 c0       	rjmp	.+18     	; 0x734 <__floatsisf+0x12>

00000722 <__floatsisf>:
 722:	97 fb       	bst	r25, 7
 724:	3e f4       	brtc	.+14     	; 0x734 <__floatsisf+0x12>
 726:	90 95       	com	r25
 728:	80 95       	com	r24
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	8f 4f       	sbci	r24, 0xFF	; 255
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	99 23       	and	r25, r25
 736:	a9 f0       	breq	.+42     	; 0x762 <__floatsisf+0x40>
 738:	f9 2f       	mov	r31, r25
 73a:	96 e9       	ldi	r25, 0x96	; 150
 73c:	bb 27       	eor	r27, r27
 73e:	93 95       	inc	r25
 740:	f6 95       	lsr	r31
 742:	87 95       	ror	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	b7 95       	ror	r27
 74a:	f1 11       	cpse	r31, r1
 74c:	f8 cf       	rjmp	.-16     	; 0x73e <__floatsisf+0x1c>
 74e:	fa f4       	brpl	.+62     	; 0x78e <__floatsisf+0x6c>
 750:	bb 0f       	add	r27, r27
 752:	11 f4       	brne	.+4      	; 0x758 <__floatsisf+0x36>
 754:	60 ff       	sbrs	r22, 0
 756:	1b c0       	rjmp	.+54     	; 0x78e <__floatsisf+0x6c>
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	16 c0       	rjmp	.+44     	; 0x78e <__floatsisf+0x6c>
 762:	88 23       	and	r24, r24
 764:	11 f0       	breq	.+4      	; 0x76a <__floatsisf+0x48>
 766:	96 e9       	ldi	r25, 0x96	; 150
 768:	11 c0       	rjmp	.+34     	; 0x78c <__floatsisf+0x6a>
 76a:	77 23       	and	r23, r23
 76c:	21 f0       	breq	.+8      	; 0x776 <__floatsisf+0x54>
 76e:	9e e8       	ldi	r25, 0x8E	; 142
 770:	87 2f       	mov	r24, r23
 772:	76 2f       	mov	r23, r22
 774:	05 c0       	rjmp	.+10     	; 0x780 <__floatsisf+0x5e>
 776:	66 23       	and	r22, r22
 778:	71 f0       	breq	.+28     	; 0x796 <__floatsisf+0x74>
 77a:	96 e8       	ldi	r25, 0x86	; 134
 77c:	86 2f       	mov	r24, r22
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	2a f0       	brmi	.+10     	; 0x78e <__floatsisf+0x6c>
 784:	9a 95       	dec	r25
 786:	66 0f       	add	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	da f7       	brpl	.-10     	; 0x784 <__floatsisf+0x62>
 78e:	88 0f       	add	r24, r24
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__fp_cmp>:
 798:	99 0f       	add	r25, r25
 79a:	00 08       	sbc	r0, r0
 79c:	55 0f       	add	r21, r21
 79e:	aa 0b       	sbc	r26, r26
 7a0:	e0 e8       	ldi	r30, 0x80	; 128
 7a2:	fe ef       	ldi	r31, 0xFE	; 254
 7a4:	16 16       	cp	r1, r22
 7a6:	17 06       	cpc	r1, r23
 7a8:	e8 07       	cpc	r30, r24
 7aa:	f9 07       	cpc	r31, r25
 7ac:	c0 f0       	brcs	.+48     	; 0x7de <__fp_cmp+0x46>
 7ae:	12 16       	cp	r1, r18
 7b0:	13 06       	cpc	r1, r19
 7b2:	e4 07       	cpc	r30, r20
 7b4:	f5 07       	cpc	r31, r21
 7b6:	98 f0       	brcs	.+38     	; 0x7de <__fp_cmp+0x46>
 7b8:	62 1b       	sub	r22, r18
 7ba:	73 0b       	sbc	r23, r19
 7bc:	84 0b       	sbc	r24, r20
 7be:	95 0b       	sbc	r25, r21
 7c0:	39 f4       	brne	.+14     	; 0x7d0 <__fp_cmp+0x38>
 7c2:	0a 26       	eor	r0, r26
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_cmp+0x46>
 7c6:	23 2b       	or	r18, r19
 7c8:	24 2b       	or	r18, r20
 7ca:	25 2b       	or	r18, r21
 7cc:	21 f4       	brne	.+8      	; 0x7d6 <__fp_cmp+0x3e>
 7ce:	08 95       	ret
 7d0:	0a 26       	eor	r0, r26
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <__fp_cmp+0x3e>
 7d4:	a1 40       	sbci	r26, 0x01	; 1
 7d6:	a6 95       	lsr	r26
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	81 1d       	adc	r24, r1
 7dc:	81 1d       	adc	r24, r1
 7de:	08 95       	ret

000007e0 <__fp_inf>:
 7e0:	97 f9       	bld	r25, 7
 7e2:	9f 67       	ori	r25, 0x7F	; 127
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__fp_splitA+0x20>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__fp_splitA+0x2a>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__fp_splitA+0x30>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_zero>:
 874:	e8 94       	clt

00000876 <__fp_szero>:
 876:	bb 27       	eor	r27, r27
 878:	66 27       	eor	r22, r22
 87a:	77 27       	eor	r23, r23
 87c:	cb 01       	movw	r24, r22
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__gesf2>:
 882:	8a df       	rcall	.-236    	; 0x798 <__fp_cmp>
 884:	08 f4       	brcc	.+2      	; 0x888 <__gesf2+0x6>
 886:	8f ef       	ldi	r24, 0xFF	; 255
 888:	08 95       	ret

0000088a <__mulsf3>:
 88a:	0b d0       	rcall	.+22     	; 0x8a2 <__mulsf3x>
 88c:	c0 cf       	rjmp	.-128    	; 0x80e <__fp_round>
 88e:	b1 df       	rcall	.-158    	; 0x7f2 <__fp_pscA>
 890:	28 f0       	brcs	.+10     	; 0x89c <__mulsf3+0x12>
 892:	b6 df       	rcall	.-148    	; 0x800 <__fp_pscB>
 894:	18 f0       	brcs	.+6      	; 0x89c <__mulsf3+0x12>
 896:	95 23       	and	r25, r21
 898:	09 f0       	breq	.+2      	; 0x89c <__mulsf3+0x12>
 89a:	a2 cf       	rjmp	.-188    	; 0x7e0 <__fp_inf>
 89c:	a7 cf       	rjmp	.-178    	; 0x7ec <__fp_nan>
 89e:	11 24       	eor	r1, r1
 8a0:	ea cf       	rjmp	.-44     	; 0x876 <__fp_szero>

000008a2 <__mulsf3x>:
 8a2:	c6 df       	rcall	.-116    	; 0x830 <__fp_split3>
 8a4:	a0 f3       	brcs	.-24     	; 0x88e <__mulsf3+0x4>

000008a6 <__mulsf3_pse>:
 8a6:	95 9f       	mul	r25, r21
 8a8:	d1 f3       	breq	.-12     	; 0x89e <__mulsf3+0x14>
 8aa:	95 0f       	add	r25, r21
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	55 1f       	adc	r21, r21
 8b0:	62 9f       	mul	r22, r18
 8b2:	f0 01       	movw	r30, r0
 8b4:	72 9f       	mul	r23, r18
 8b6:	bb 27       	eor	r27, r27
 8b8:	f0 0d       	add	r31, r0
 8ba:	b1 1d       	adc	r27, r1
 8bc:	63 9f       	mul	r22, r19
 8be:	aa 27       	eor	r26, r26
 8c0:	f0 0d       	add	r31, r0
 8c2:	b1 1d       	adc	r27, r1
 8c4:	aa 1f       	adc	r26, r26
 8c6:	64 9f       	mul	r22, r20
 8c8:	66 27       	eor	r22, r22
 8ca:	b0 0d       	add	r27, r0
 8cc:	a1 1d       	adc	r26, r1
 8ce:	66 1f       	adc	r22, r22
 8d0:	82 9f       	mul	r24, r18
 8d2:	22 27       	eor	r18, r18
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	62 1f       	adc	r22, r18
 8da:	73 9f       	mul	r23, r19
 8dc:	b0 0d       	add	r27, r0
 8de:	a1 1d       	adc	r26, r1
 8e0:	62 1f       	adc	r22, r18
 8e2:	83 9f       	mul	r24, r19
 8e4:	a0 0d       	add	r26, r0
 8e6:	61 1d       	adc	r22, r1
 8e8:	22 1f       	adc	r18, r18
 8ea:	74 9f       	mul	r23, r20
 8ec:	33 27       	eor	r19, r19
 8ee:	a0 0d       	add	r26, r0
 8f0:	61 1d       	adc	r22, r1
 8f2:	23 1f       	adc	r18, r19
 8f4:	84 9f       	mul	r24, r20
 8f6:	60 0d       	add	r22, r0
 8f8:	21 1d       	adc	r18, r1
 8fa:	82 2f       	mov	r24, r18
 8fc:	76 2f       	mov	r23, r22
 8fe:	6a 2f       	mov	r22, r26
 900:	11 24       	eor	r1, r1
 902:	9f 57       	subi	r25, 0x7F	; 127
 904:	50 40       	sbci	r21, 0x00	; 0
 906:	8a f0       	brmi	.+34     	; 0x92a <__mulsf3_pse+0x84>
 908:	e1 f0       	breq	.+56     	; 0x942 <__mulsf3_pse+0x9c>
 90a:	88 23       	and	r24, r24
 90c:	4a f0       	brmi	.+18     	; 0x920 <__mulsf3_pse+0x7a>
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	bb 1f       	adc	r27, r27
 914:	66 1f       	adc	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	50 40       	sbci	r21, 0x00	; 0
 91e:	a9 f7       	brne	.-22     	; 0x90a <__mulsf3_pse+0x64>
 920:	9e 3f       	cpi	r25, 0xFE	; 254
 922:	51 05       	cpc	r21, r1
 924:	70 f0       	brcs	.+28     	; 0x942 <__mulsf3_pse+0x9c>
 926:	5c cf       	rjmp	.-328    	; 0x7e0 <__fp_inf>
 928:	a6 cf       	rjmp	.-180    	; 0x876 <__fp_szero>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	ec f3       	brlt	.-6      	; 0x928 <__mulsf3_pse+0x82>
 92e:	98 3e       	cpi	r25, 0xE8	; 232
 930:	dc f3       	brlt	.-10     	; 0x928 <__mulsf3_pse+0x82>
 932:	86 95       	lsr	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	e7 95       	ror	r30
 93e:	9f 5f       	subi	r25, 0xFF	; 255
 940:	c1 f7       	brne	.-16     	; 0x932 <__mulsf3_pse+0x8c>
 942:	fe 2b       	or	r31, r30
 944:	88 0f       	add	r24, r24
 946:	91 1d       	adc	r25, r1
 948:	96 95       	lsr	r25
 94a:	87 95       	ror	r24
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <memset>:
 950:	dc 01       	movw	r26, r24
 952:	01 c0       	rjmp	.+2      	; 0x956 <memset+0x6>
 954:	6d 93       	st	X+, r22
 956:	41 50       	subi	r20, 0x01	; 1
 958:	50 40       	sbci	r21, 0x00	; 0
 95a:	e0 f7       	brcc	.-8      	; 0x954 <memset+0x4>
 95c:	08 95       	ret

0000095e <itoa>:
 95e:	45 32       	cpi	r20, 0x25	; 37
 960:	51 05       	cpc	r21, r1
 962:	18 f4       	brcc	.+6      	; 0x96a <itoa+0xc>
 964:	42 30       	cpi	r20, 0x02	; 2
 966:	08 f0       	brcs	.+2      	; 0x96a <itoa+0xc>
 968:	04 c0       	rjmp	.+8      	; 0x972 <__itoa_ncheck>
 96a:	fb 01       	movw	r30, r22
 96c:	10 82       	st	Z, r1
 96e:	cb 01       	movw	r24, r22
 970:	08 95       	ret

00000972 <__itoa_ncheck>:
 972:	bb 27       	eor	r27, r27
 974:	4a 30       	cpi	r20, 0x0A	; 10
 976:	31 f4       	brne	.+12     	; 0x984 <__itoa_ncheck+0x12>
 978:	99 23       	and	r25, r25
 97a:	22 f4       	brpl	.+8      	; 0x984 <__itoa_ncheck+0x12>
 97c:	bd e2       	ldi	r27, 0x2D	; 45
 97e:	90 95       	com	r25
 980:	81 95       	neg	r24
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	01 c0       	rjmp	.+2      	; 0x988 <__utoa_common>

00000986 <__utoa_ncheck>:
 986:	bb 27       	eor	r27, r27

00000988 <__utoa_common>:
 988:	fb 01       	movw	r30, r22
 98a:	55 27       	eor	r21, r21
 98c:	aa 27       	eor	r26, r26
 98e:	88 0f       	add	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	aa 1f       	adc	r26, r26
 994:	a4 17       	cp	r26, r20
 996:	10 f0       	brcs	.+4      	; 0x99c <__utoa_common+0x14>
 998:	a4 1b       	sub	r26, r20
 99a:	83 95       	inc	r24
 99c:	50 51       	subi	r21, 0x10	; 16
 99e:	b9 f7       	brne	.-18     	; 0x98e <__utoa_common+0x6>
 9a0:	a0 5d       	subi	r26, 0xD0	; 208
 9a2:	aa 33       	cpi	r26, 0x3A	; 58
 9a4:	08 f0       	brcs	.+2      	; 0x9a8 <__utoa_common+0x20>
 9a6:	a9 5d       	subi	r26, 0xD9	; 217
 9a8:	a1 93       	st	Z+, r26
 9aa:	00 97       	sbiw	r24, 0x00	; 0
 9ac:	79 f7       	brne	.-34     	; 0x98c <__utoa_common+0x4>
 9ae:	b1 11       	cpse	r27, r1
 9b0:	b1 93       	st	Z+, r27
 9b2:	11 92       	st	Z+, r1
 9b4:	cb 01       	movw	r24, r22
 9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <strrev>

000009b8 <strrev>:
 9b8:	dc 01       	movw	r26, r24
 9ba:	fc 01       	movw	r30, r24
 9bc:	67 2f       	mov	r22, r23
 9be:	71 91       	ld	r23, Z+
 9c0:	77 23       	and	r23, r23
 9c2:	e1 f7       	brne	.-8      	; 0x9bc <strrev+0x4>
 9c4:	32 97       	sbiw	r30, 0x02	; 2
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <strrev+0x18>
 9c8:	7c 91       	ld	r23, X
 9ca:	6d 93       	st	X+, r22
 9cc:	70 83       	st	Z, r23
 9ce:	62 91       	ld	r22, -Z
 9d0:	ae 17       	cp	r26, r30
 9d2:	bf 07       	cpc	r27, r31
 9d4:	c8 f3       	brcs	.-14     	; 0x9c8 <strrev+0x10>
 9d6:	08 95       	ret

000009d8 <_exit>:
 9d8:	f8 94       	cli

000009da <__stop_program>:
 9da:	ff cf       	rjmp	.-2      	; 0x9da <__stop_program>
