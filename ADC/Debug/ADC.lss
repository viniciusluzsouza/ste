
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006c0  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000da3  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001974  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	52 d0       	rcall	.+164    	; 0x19a <main>
  f6:	d8 c1       	rjmp	.+944    	; 0x4a8 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z9uart_initv>:

int analog_to_dig(float analog){
  return analog*(1024.0/5.0);
}

void uart_init() {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	// Set baud rate
    UBRR0 = MYUBRR_VALUE;
 102:	84 ec       	ldi	r24, 0xC4	; 196
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	27 e6       	ldi	r18, 0x67	; 103
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	31 83       	std	Z+1, r19	; 0x01
 10e:	20 83       	st	Z, r18

    // Set TX and RX
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 110:	81 ec       	ldi	r24, 0xC1	; 193
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e1       	ldi	r18, 0x18	; 24
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18

    // Set frame format: 8 data, 1 stop bit (00000110)
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 11a:	82 ec       	ldi	r24, 0xC2	; 194
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	26 e0       	ldi	r18, 0x06	; 6
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
}
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z8adc_initv>:

void adc_init() {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x00;
 134:	8c e7       	ldi	r24, 0x7C	; 124
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	10 82       	st	Z, r1
	ADCSRA = (1 << ADEN);
 13c:	8a e7       	ldi	r24, 0x7A	; 122
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	20 e8       	ldi	r18, 0x80	; 128
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
}
 146:	00 00       	nop
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <_Z11analog_readv>:

int analog_read() {
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	1f 92       	push	r1
 154:	1f 92       	push	r1
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
	int val;
	ADCSRA |= (1 << ADSC);
 15a:	8a e7       	ldi	r24, 0x7A	; 122
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2a e7       	ldi	r18, 0x7A	; 122
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	20 64       	ori	r18, 0x40	; 64
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	val = ADC;
 16c:	88 e7       	ldi	r24, 0x78	; 120
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA &= ~(1 << ADSC);
 17a:	8a e7       	ldi	r24, 0x7A	; 122
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2a e7       	ldi	r18, 0x7A	; 122
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	2f 7b       	andi	r18, 0xBF	; 191
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
	return val;
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <main>:

int main(void) {
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	60 97       	sbiw	r28, 0x10	; 16
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
	uart_init();
 1ac:	cd bf       	out	0x3d, r28	; 61
	adc_init();
 1ae:	a5 df       	rcall	.-182    	; 0xfa <_Z9uart_initv>
 1b0:	bd df       	rcall	.-134    	; 0x12c <_Z8adc_initv>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e4       	ldi	r25, 0x40	; 64
 1b6:	ac e9       	ldi	r26, 0x9C	; 156
 1b8:	b5 e4       	ldi	r27, 0x45	; 69
 1ba:	8b 83       	std	Y+3, r24	; 0x03
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	ad 83       	std	Y+5, r26	; 0x05
 1c0:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	4a e7       	ldi	r20, 0x7A	; 122
 1c8:	55 e4       	ldi	r21, 0x45	; 69
 1ca:	6b 81       	ldd	r22, Y+3	; 0x03
 1cc:	7c 81       	ldd	r23, Y+4	; 0x04
 1ce:	8d 81       	ldd	r24, Y+5	; 0x05
 1d0:	9e 81       	ldd	r25, Y+6	; 0x06
 1d2:	df d0       	rcall	.+446    	; 0x392 <__mulsf3>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	8f 83       	std	Y+7, r24	; 0x07
 1da:	98 87       	std	Y+8, r25	; 0x08
 1dc:	a9 87       	std	Y+9, r26	; 0x09
 1de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e8       	ldi	r20, 0x80	; 128
 1e6:	5f e3       	ldi	r21, 0x3F	; 63
 1e8:	6f 81       	ldd	r22, Y+7	; 0x07
 1ea:	78 85       	ldd	r23, Y+8	; 0x08
 1ec:	89 85       	ldd	r24, Y+9	; 0x09
 1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f0:	4f d0       	rcall	.+158    	; 0x290 <__cmpsf2>
 1f2:	88 23       	and	r24, r24
 1f4:	2c f4       	brge	.+10     	; 0x200 <main+0x66>
		__ticks = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	9c 87       	std	Y+12, r25	; 0x0c
 1fc:	8b 87       	std	Y+11, r24	; 0x0b
 1fe:	3a c0       	rjmp	.+116    	; 0x274 <main+0xda>
	else if (__tmp > 65535)
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	3f ef       	ldi	r19, 0xFF	; 255
 204:	4f e7       	ldi	r20, 0x7F	; 127
 206:	57 e4       	ldi	r21, 0x47	; 71
 208:	6f 81       	ldd	r22, Y+7	; 0x07
 20a:	78 85       	ldd	r23, Y+8	; 0x08
 20c:	89 85       	ldd	r24, Y+9	; 0x09
 20e:	9a 85       	ldd	r25, Y+10	; 0x0a
 210:	bc d0       	rcall	.+376    	; 0x38a <__gesf2>
 212:	18 16       	cp	r1, r24
 214:	34 f5       	brge	.+76     	; 0x262 <main+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e2       	ldi	r20, 0x20	; 32
 21c:	51 e4       	ldi	r21, 0x41	; 65
 21e:	6b 81       	ldd	r22, Y+3	; 0x03
 220:	7c 81       	ldd	r23, Y+4	; 0x04
 222:	8d 81       	ldd	r24, Y+5	; 0x05
 224:	9e 81       	ldd	r25, Y+6	; 0x06
 226:	b5 d0       	rcall	.+362    	; 0x392 <__mulsf3>
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	bc 01       	movw	r22, r24
 22e:	cd 01       	movw	r24, r26
 230:	33 d0       	rcall	.+102    	; 0x298 <__fixunssfsi>
 232:	dc 01       	movw	r26, r24
 234:	cb 01       	movw	r24, r22
 236:	9c 87       	std	Y+12, r25	; 0x0c
 238:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
 23a:	8b 85       	ldd	r24, Y+11	; 0x0b
 23c:	9c 85       	ldd	r25, Y+12	; 0x0c
 23e:	89 2b       	or	r24, r25
 240:	19 f1       	breq	.+70     	; 0x288 <main+0xee>
 242:	80 e9       	ldi	r24, 0x90	; 144
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	9e 87       	std	Y+14, r25	; 0x0e
 248:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 24a:	8d 85       	ldd	r24, Y+13	; 0x0d
 24c:	9e 85       	ldd	r25, Y+14	; 0x0e
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <main+0xb4>
 252:	9e 87       	std	Y+14, r25	; 0x0e
 254:	8d 87       	std	Y+13, r24	; 0x0d
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 256:	8b 85       	ldd	r24, Y+11	; 0x0b
 258:	9c 85       	ldd	r25, Y+12	; 0x0c
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	9c 87       	std	Y+12, r25	; 0x0c
 25e:	8b 87       	std	Y+11, r24	; 0x0b
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 260:	ec cf       	rjmp	.-40     	; 0x23a <main+0xa0>
 262:	6f 81       	ldd	r22, Y+7	; 0x07
 264:	78 85       	ldd	r23, Y+8	; 0x08
 266:	89 85       	ldd	r24, Y+9	; 0x09
 268:	9a 85       	ldd	r25, Y+10	; 0x0a
 26a:	16 d0       	rcall	.+44     	; 0x298 <__fixunssfsi>
 26c:	dc 01       	movw	r26, r24
 26e:	cb 01       	movw	r24, r22
 270:	9c 87       	std	Y+12, r25	; 0x0c
 272:	8b 87       	std	Y+11, r24	; 0x0b
 274:	8b 85       	ldd	r24, Y+11	; 0x0b
 276:	9c 85       	ldd	r25, Y+12	; 0x0c
 278:	98 8b       	std	Y+16, r25	; 0x10
    However, the macros in <util/setbaud.h> require it to be an
    integer value.
 */
# define F_CPU 1000000UL
#endif

 27a:	8f 87       	std	Y+15, r24	; 0x0f
 27c:	8f 85       	ldd	r24, Y+15	; 0x0f
 27e:	98 89       	ldd	r25, Y+16	; 0x10
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0xe6>
 284:	98 8b       	std	Y+16, r25	; 0x10
#  endif
#endif  /* __DOXYGEN__ */

#include <inttypes.h>
#include <util/delay_basic.h>
#include <math.h>
 286:	8f 87       	std	Y+15, r24	; 0x0f
 288:	62 df       	rcall	.-316    	; 0x14e <_Z11analog_readv>
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	89 83       	std	Y+1, r24	; 0x01
#  ifndef __HAS_DELAY_CYCLES
#    define __HAS_DELAY_CYCLES 1
#  endif
#endif  /* __DOXYGEN__ */

#include <inttypes.h>
 28e:	91 cf       	rjmp	.-222    	; 0x1b2 <main+0x18>

00000290 <__cmpsf2>:
 290:	2f d0       	rcall	.+94     	; 0x2f0 <__fp_cmp>
 292:	08 f4       	brcc	.+2      	; 0x296 <__cmpsf2+0x6>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	08 95       	ret

00000298 <__fixunssfsi>:
 298:	57 d0       	rcall	.+174    	; 0x348 <__fp_splitA>
 29a:	88 f0       	brcs	.+34     	; 0x2be <__fixunssfsi+0x26>
 29c:	9f 57       	subi	r25, 0x7F	; 127
 29e:	90 f0       	brcs	.+36     	; 0x2c4 <__fixunssfsi+0x2c>
 2a0:	b9 2f       	mov	r27, r25
 2a2:	99 27       	eor	r25, r25
 2a4:	b7 51       	subi	r27, 0x17	; 23
 2a6:	a0 f0       	brcs	.+40     	; 0x2d0 <__fixunssfsi+0x38>
 2a8:	d1 f0       	breq	.+52     	; 0x2de <__fixunssfsi+0x46>
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	1a f0       	brmi	.+6      	; 0x2ba <__fixunssfsi+0x22>
 2b4:	ba 95       	dec	r27
 2b6:	c9 f7       	brne	.-14     	; 0x2aa <__fixunssfsi+0x12>
 2b8:	12 c0       	rjmp	.+36     	; 0x2de <__fixunssfsi+0x46>
 2ba:	b1 30       	cpi	r27, 0x01	; 1
 2bc:	81 f0       	breq	.+32     	; 0x2de <__fixunssfsi+0x46>
 2be:	5e d0       	rcall	.+188    	; 0x37c <__fp_zero>
 2c0:	b1 e0       	ldi	r27, 0x01	; 1
 2c2:	08 95       	ret
 2c4:	5b c0       	rjmp	.+182    	; 0x37c <__fp_zero>
 2c6:	67 2f       	mov	r22, r23
 2c8:	78 2f       	mov	r23, r24
 2ca:	88 27       	eor	r24, r24
 2cc:	b8 5f       	subi	r27, 0xF8	; 248
 2ce:	39 f0       	breq	.+14     	; 0x2de <__fixunssfsi+0x46>
 2d0:	b9 3f       	cpi	r27, 0xF9	; 249
 2d2:	cc f3       	brlt	.-14     	; 0x2c6 <__fixunssfsi+0x2e>
 2d4:	86 95       	lsr	r24
 2d6:	77 95       	ror	r23
 2d8:	67 95       	ror	r22
 2da:	b3 95       	inc	r27
 2dc:	d9 f7       	brne	.-10     	; 0x2d4 <__fixunssfsi+0x3c>
 2de:	3e f4       	brtc	.+14     	; 0x2ee <__fixunssfsi+0x56>
 2e0:	90 95       	com	r25
 2e2:	80 95       	com	r24
 2e4:	70 95       	com	r23
 2e6:	61 95       	neg	r22
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	8f 4f       	sbci	r24, 0xFF	; 255
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	08 95       	ret

000002f0 <__fp_cmp>:
 2f0:	99 0f       	add	r25, r25
 2f2:	00 08       	sbc	r0, r0
 2f4:	55 0f       	add	r21, r21
 2f6:	aa 0b       	sbc	r26, r26
 2f8:	e0 e8       	ldi	r30, 0x80	; 128
 2fa:	fe ef       	ldi	r31, 0xFE	; 254
 2fc:	16 16       	cp	r1, r22
 2fe:	17 06       	cpc	r1, r23
 300:	e8 07       	cpc	r30, r24
 302:	f9 07       	cpc	r31, r25
 304:	c0 f0       	brcs	.+48     	; 0x336 <__fp_cmp+0x46>
 306:	12 16       	cp	r1, r18
 308:	13 06       	cpc	r1, r19
 30a:	e4 07       	cpc	r30, r20
 30c:	f5 07       	cpc	r31, r21
 30e:	98 f0       	brcs	.+38     	; 0x336 <__fp_cmp+0x46>
 310:	62 1b       	sub	r22, r18
 312:	73 0b       	sbc	r23, r19
 314:	84 0b       	sbc	r24, r20
 316:	95 0b       	sbc	r25, r21
 318:	39 f4       	brne	.+14     	; 0x328 <__fp_cmp+0x38>
 31a:	0a 26       	eor	r0, r26
 31c:	61 f0       	breq	.+24     	; 0x336 <__fp_cmp+0x46>
 31e:	23 2b       	or	r18, r19
 320:	24 2b       	or	r18, r20
 322:	25 2b       	or	r18, r21
 324:	21 f4       	brne	.+8      	; 0x32e <__fp_cmp+0x3e>
 326:	08 95       	ret
 328:	0a 26       	eor	r0, r26
 32a:	09 f4       	brne	.+2      	; 0x32e <__fp_cmp+0x3e>
 32c:	a1 40       	sbci	r26, 0x01	; 1
 32e:	a6 95       	lsr	r26
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	81 1d       	adc	r24, r1
 334:	81 1d       	adc	r24, r1
 336:	08 95       	ret

00000338 <__fp_split3>:
 338:	57 fd       	sbrc	r21, 7
 33a:	90 58       	subi	r25, 0x80	; 128
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	59 f0       	breq	.+22     	; 0x358 <__fp_splitA+0x10>
 342:	5f 3f       	cpi	r21, 0xFF	; 255
 344:	71 f0       	breq	.+28     	; 0x362 <__fp_splitA+0x1a>
 346:	47 95       	ror	r20

00000348 <__fp_splitA>:
 348:	88 0f       	add	r24, r24
 34a:	97 fb       	bst	r25, 7
 34c:	99 1f       	adc	r25, r25
 34e:	61 f0       	breq	.+24     	; 0x368 <__fp_splitA+0x20>
 350:	9f 3f       	cpi	r25, 0xFF	; 255
 352:	79 f0       	breq	.+30     	; 0x372 <__fp_splitA+0x2a>
 354:	87 95       	ror	r24
 356:	08 95       	ret
 358:	12 16       	cp	r1, r18
 35a:	13 06       	cpc	r1, r19
 35c:	14 06       	cpc	r1, r20
 35e:	55 1f       	adc	r21, r21
 360:	f2 cf       	rjmp	.-28     	; 0x346 <__fp_split3+0xe>
 362:	46 95       	lsr	r20
 364:	f1 df       	rcall	.-30     	; 0x348 <__fp_splitA>
 366:	08 c0       	rjmp	.+16     	; 0x378 <__fp_splitA+0x30>
 368:	16 16       	cp	r1, r22
 36a:	17 06       	cpc	r1, r23
 36c:	18 06       	cpc	r1, r24
 36e:	99 1f       	adc	r25, r25
 370:	f1 cf       	rjmp	.-30     	; 0x354 <__fp_splitA+0xc>
 372:	86 95       	lsr	r24
 374:	71 05       	cpc	r23, r1
 376:	61 05       	cpc	r22, r1
 378:	08 94       	sec
 37a:	08 95       	ret

0000037c <__fp_zero>:
 37c:	e8 94       	clt

0000037e <__fp_szero>:
 37e:	bb 27       	eor	r27, r27
 380:	66 27       	eor	r22, r22
 382:	77 27       	eor	r23, r23
 384:	cb 01       	movw	r24, r22
 386:	97 f9       	bld	r25, 7
 388:	08 95       	ret

0000038a <__gesf2>:
 38a:	b2 df       	rcall	.-156    	; 0x2f0 <__fp_cmp>
 38c:	08 f4       	brcc	.+2      	; 0x390 <__gesf2+0x6>
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	08 95       	ret

00000392 <__mulsf3>:
 392:	0b d0       	rcall	.+22     	; 0x3aa <__mulsf3x>
 394:	78 c0       	rjmp	.+240    	; 0x486 <__fp_round>
 396:	69 d0       	rcall	.+210    	; 0x46a <__fp_pscA>
 398:	28 f0       	brcs	.+10     	; 0x3a4 <__mulsf3+0x12>
 39a:	6e d0       	rcall	.+220    	; 0x478 <__fp_pscB>
 39c:	18 f0       	brcs	.+6      	; 0x3a4 <__mulsf3+0x12>
 39e:	95 23       	and	r25, r21
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <__mulsf3+0x12>
 3a2:	5a c0       	rjmp	.+180    	; 0x458 <__fp_inf>
 3a4:	5f c0       	rjmp	.+190    	; 0x464 <__fp_nan>
 3a6:	11 24       	eor	r1, r1
 3a8:	ea cf       	rjmp	.-44     	; 0x37e <__fp_szero>

000003aa <__mulsf3x>:
 3aa:	c6 df       	rcall	.-116    	; 0x338 <__fp_split3>
 3ac:	a0 f3       	brcs	.-24     	; 0x396 <__mulsf3+0x4>

000003ae <__mulsf3_pse>:
 3ae:	95 9f       	mul	r25, r21
 3b0:	d1 f3       	breq	.-12     	; 0x3a6 <__mulsf3+0x14>
 3b2:	95 0f       	add	r25, r21
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	55 1f       	adc	r21, r21
 3b8:	62 9f       	mul	r22, r18
 3ba:	f0 01       	movw	r30, r0
 3bc:	72 9f       	mul	r23, r18
 3be:	bb 27       	eor	r27, r27
 3c0:	f0 0d       	add	r31, r0
 3c2:	b1 1d       	adc	r27, r1
 3c4:	63 9f       	mul	r22, r19
 3c6:	aa 27       	eor	r26, r26
 3c8:	f0 0d       	add	r31, r0
 3ca:	b1 1d       	adc	r27, r1
 3cc:	aa 1f       	adc	r26, r26
 3ce:	64 9f       	mul	r22, r20
 3d0:	66 27       	eor	r22, r22
 3d2:	b0 0d       	add	r27, r0
 3d4:	a1 1d       	adc	r26, r1
 3d6:	66 1f       	adc	r22, r22
 3d8:	82 9f       	mul	r24, r18
 3da:	22 27       	eor	r18, r18
 3dc:	b0 0d       	add	r27, r0
 3de:	a1 1d       	adc	r26, r1
 3e0:	62 1f       	adc	r22, r18
 3e2:	73 9f       	mul	r23, r19
 3e4:	b0 0d       	add	r27, r0
 3e6:	a1 1d       	adc	r26, r1
 3e8:	62 1f       	adc	r22, r18
 3ea:	83 9f       	mul	r24, r19
 3ec:	a0 0d       	add	r26, r0
 3ee:	61 1d       	adc	r22, r1
 3f0:	22 1f       	adc	r18, r18
 3f2:	74 9f       	mul	r23, r20
 3f4:	33 27       	eor	r19, r19
 3f6:	a0 0d       	add	r26, r0
 3f8:	61 1d       	adc	r22, r1
 3fa:	23 1f       	adc	r18, r19
 3fc:	84 9f       	mul	r24, r20
 3fe:	60 0d       	add	r22, r0
 400:	21 1d       	adc	r18, r1
 402:	82 2f       	mov	r24, r18
 404:	76 2f       	mov	r23, r22
 406:	6a 2f       	mov	r22, r26
 408:	11 24       	eor	r1, r1
 40a:	9f 57       	subi	r25, 0x7F	; 127
 40c:	50 40       	sbci	r21, 0x00	; 0
 40e:	8a f0       	brmi	.+34     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 410:	e1 f0       	breq	.+56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 412:	88 23       	and	r24, r24
 414:	4a f0       	brmi	.+18     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	bb 1f       	adc	r27, r27
 41c:	66 1f       	adc	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	91 50       	subi	r25, 0x01	; 1
 424:	50 40       	sbci	r21, 0x00	; 0
 426:	a9 f7       	brne	.-22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 428:	9e 3f       	cpi	r25, 0xFE	; 254
 42a:	51 05       	cpc	r21, r1
 42c:	70 f0       	brcs	.+28     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42e:	14 c0       	rjmp	.+40     	; 0x458 <__fp_inf>
 430:	a6 cf       	rjmp	.-180    	; 0x37e <__fp_szero>
 432:	5f 3f       	cpi	r21, 0xFF	; 255
 434:	ec f3       	brlt	.-6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 436:	98 3e       	cpi	r25, 0xE8	; 232
 438:	dc f3       	brlt	.-10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 43a:	86 95       	lsr	r24
 43c:	77 95       	ror	r23
 43e:	67 95       	ror	r22
 440:	b7 95       	ror	r27
 442:	f7 95       	ror	r31
 444:	e7 95       	ror	r30
 446:	9f 5f       	subi	r25, 0xFF	; 255
 448:	c1 f7       	brne	.-16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 44a:	fe 2b       	or	r31, r30
 44c:	88 0f       	add	r24, r24
 44e:	91 1d       	adc	r25, r1
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	97 f9       	bld	r25, 7
 456:	08 95       	ret

00000458 <__fp_inf>:
 458:	97 f9       	bld	r25, 7
 45a:	9f 67       	ori	r25, 0x7F	; 127
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	08 95       	ret

00000464 <__fp_nan>:
 464:	9f ef       	ldi	r25, 0xFF	; 255
 466:	80 ec       	ldi	r24, 0xC0	; 192
 468:	08 95       	ret

0000046a <__fp_pscA>:
 46a:	00 24       	eor	r0, r0
 46c:	0a 94       	dec	r0
 46e:	16 16       	cp	r1, r22
 470:	17 06       	cpc	r1, r23
 472:	18 06       	cpc	r1, r24
 474:	09 06       	cpc	r0, r25
 476:	08 95       	ret

00000478 <__fp_pscB>:
 478:	00 24       	eor	r0, r0
 47a:	0a 94       	dec	r0
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	05 06       	cpc	r0, r21
 484:	08 95       	ret

00000486 <__fp_round>:
 486:	09 2e       	mov	r0, r25
 488:	03 94       	inc	r0
 48a:	00 0c       	add	r0, r0
 48c:	11 f4       	brne	.+4      	; 0x492 <__fp_round+0xc>
 48e:	88 23       	and	r24, r24
 490:	52 f0       	brmi	.+20     	; 0x4a6 <__fp_round+0x20>
 492:	bb 0f       	add	r27, r27
 494:	40 f4       	brcc	.+16     	; 0x4a6 <__fp_round+0x20>
 496:	bf 2b       	or	r27, r31
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0x18>
 49a:	60 ff       	sbrs	r22, 0
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__fp_round+0x20>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
