
SerialCOM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005dc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d08  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000bbc  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	50 d0       	rcall	.+160    	; 0x196 <main>
  f6:	5a c0       	rjmp	.+180    	; 0x1ac <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z9uart_initv>:
#include <avr/io.h>

#define BAUD 9600
#define MYUBRR_VALUE F_CPU/16/BAUD-1

void uart_init() {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	// Set baud rate
    UBRR0 = MYUBRR_VALUE;
 102:	84 ec       	ldi	r24, 0xC4	; 196
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	27 e6       	ldi	r18, 0x67	; 103
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	31 83       	std	Z+1, r19	; 0x01
 10e:	20 83       	st	Z, r18

    // Set TX and RX
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 110:	81 ec       	ldi	r24, 0xC1	; 193
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e1       	ldi	r18, 0x18	; 24
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18

    // Set frame format: 8 data, 1 stop bit (00000110)
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 11a:	82 ec       	ldi	r24, 0xC2	; 194
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	26 e0       	ldi	r18, 0x06	; 6
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
}
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z7uart_txh>:

void uart_tx(unsigned char data) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	1f 92       	push	r1
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer.
	 * This method is bloking.*/

	// Verify 5th bit of UCSR0A Register (USART Data register empty)
	while ( !(UCSR0A & (1 << UDRE0)) );
 138:	80 ec       	ldi	r24, 0xC0	; 192
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	80 72       	andi	r24, 0x20	; 32
 146:	99 27       	eor	r25, r25
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	89 2b       	or	r24, r25
 14c:	09 f0       	breq	.+2      	; 0x150 <_Z7uart_txh+0x24>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	22 23       	and	r18, r18
 152:	09 f0       	breq	.+2      	; 0x156 <_Z7uart_txh+0x2a>
 154:	f1 cf       	rjmp	.-30     	; 0x138 <_Z7uart_txh+0xc>

	UDR0 = data;
 156:	86 ec       	ldi	r24, 0xC6	; 198
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	29 81       	ldd	r18, Y+1	; 0x01
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
}
 160:	00 00       	nop
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <_Z7uart_rxv>:

unsigned char uart_rx(void) {
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	while ( !(UCSR0A & (1 << RXC0)) );
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	80 95       	com	r24
 17c:	88 1f       	adc	r24, r24
 17e:	88 27       	eor	r24, r24
 180:	88 1f       	adc	r24, r24
 182:	88 23       	and	r24, r24
 184:	09 f0       	breq	.+2      	; 0x188 <_Z7uart_rxv+0x1e>
 186:	f5 cf       	rjmp	.-22     	; 0x172 <_Z7uart_rxv+0x8>
	return UDR0;
 188:	86 ec       	ldi	r24, 0xC6	; 198
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <main>:

int main(void) {
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	1f 92       	push	r1
 19c:	cd b7       	in	r28, 0x3d	; 61
	unsigned char input;

	uart_init();
 19e:	de b7       	in	r29, 0x3e	; 62
	while(true) {
		input = uart_rx();
 1a0:	ac df       	rcall	.-168    	; 0xfa <_Z9uart_initv>
 1a2:	e3 df       	rcall	.-58     	; 0x16a <_Z7uart_rxv>
		uart_tx(input);
 1a4:	89 83       	std	Y+1, r24	; 0x01
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	c1 df       	rcall	.-126    	; 0x12c <_Z7uart_txh>

int main(void) {
	unsigned char input;

	uart_init();
	while(true) {
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <main+0xc>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
