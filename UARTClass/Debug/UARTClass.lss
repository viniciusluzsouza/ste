
UARTClass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000492  2**0
                  ALLOC
  3 .stab         00000d38  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001242  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000240e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	e5 c0       	rjmp	.+458    	; 0x230 <__vector_25>
  66:	00 00       	nop
  68:	29 c1       	rjmp	.+594    	; 0x2bc <__vector_26>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	48 d1       	rcall	.+656    	; 0x396 <main>
 106:	89 c1       	rjmp	.+786    	; 0x41a <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <_ZN4UARTC1EjNS_10DataBits_tENS_8Parity_tENS_9StopBit_tE>:
#include "UART.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Singleton.h"

UART::UART(uint16_t baud, DataBits_t db, Parity_t par, StopBit_t sb) {
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	27 97       	sbiw	r28, 0x07	; 7
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	9a 83       	std	Y+2, r25	; 0x02
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	7c 83       	std	Y+4, r23	; 0x04
 128:	6b 83       	std	Y+3, r22	; 0x03
 12a:	4d 83       	std	Y+5, r20	; 0x05
 12c:	2e 83       	std	Y+6, r18	; 0x06
 12e:	0f 83       	std	Y+7, r16	; 0x07
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	9a 81       	ldd	r25, Y+2	; 0x02
 134:	11 d1       	rcall	.+546    	; 0x358 <_ZN9SingletonI4UARTEC1Ev>
    // Set baud rate
    UBRR0 = F_CPU/16/baud-1;
 136:	04 ec       	ldi	r16, 0xC4	; 196
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	9c 81       	ldd	r25, Y+4	; 0x04
 13e:	9c 01       	movw	r18, r24
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	80 e4       	ldi	r24, 0x40	; 64
 146:	92 e4       	ldi	r25, 0x42	; 66
 148:	af e0       	ldi	r26, 0x0F	; 15
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	42 d1       	rcall	.+644    	; 0x3d6 <__udivmodsi4>
 152:	da 01       	movw	r26, r20
 154:	c9 01       	movw	r24, r18
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f8 01       	movw	r30, r16
 15a:	91 83       	std	Z+1, r25	; 0x01
 15c:	80 83       	st	Z, r24

    // Set TX and RX
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 15e:	81 ec       	ldi	r24, 0xC1	; 193
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	28 e9       	ldi	r18, 0x98	; 152
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18

    // Set frame format (asynchronous mode)
    UCSR0C = par | sb | db;
 168:	82 ec       	ldi	r24, 0xC2	; 194
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	3e 81       	ldd	r19, Y+6	; 0x06
 16e:	2f 81       	ldd	r18, Y+7	; 0x07
 170:	32 2b       	or	r19, r18
 172:	2d 81       	ldd	r18, Y+5	; 0x05
 174:	23 2b       	or	r18, r19
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18

    _new_data = 0;
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	9a 81       	ldd	r25, Y+2	; 0x02
 17e:	fc 01       	movw	r30, r24
 180:	10 82       	st	Z, r1
    _rx_buffer = 0;
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	9a 81       	ldd	r25, Y+2	; 0x02
 186:	fc 01       	movw	r30, r24
 188:	11 82       	std	Z+1, r1	; 0x01
    _tx_buffer = 0;
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	fc 01       	movw	r30, r24
 190:	12 82       	std	Z+2, r1	; 0x02

}
 192:	00 00       	nop
 194:	27 96       	adiw	r28, 0x07	; 7
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <_ZN4UART3putEh>:

UART::~UART() {
    // TODO Auto-generated destructor stub
}

void UART::put(uint8_t data) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	00 d0       	rcall	.+0      	; 0x1b0 <_ZN4UART3putEh+0x6>
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	6b 83       	std	Y+3, r22	; 0x03
    this->_tx_buffer = data;
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	9a 81       	ldd	r25, Y+2	; 0x02
 1be:	2b 81       	ldd	r18, Y+3	; 0x03
 1c0:	fc 01       	movw	r30, r24
 1c2:	22 83       	std	Z+2, r18	; 0x02
    UCSR0B |= (1 << UDRIE0);
 1c4:	81 ec       	ldi	r24, 0xC1	; 193
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	21 ec       	ldi	r18, 0xC1	; 193
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	20 62       	ori	r18, 0x20	; 32
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
}
 1d6:	00 00       	nop
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <_ZN4UART3getEv>:

uint8_t UART::get() {
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	1f 92       	push	r1
 1ea:	1f 92       	push	r1
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	9a 83       	std	Y+2, r25	; 0x02
 1f2:	89 83       	std	Y+1, r24	; 0x01
    this->_new_data = 0;
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	fc 01       	movw	r30, r24
 1fa:	10 82       	st	Z, r1
    return this->_rx_buffer;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	fc 01       	movw	r30, r24
 202:	81 81       	ldd	r24, Z+1	; 0x01
}
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <_ZN4UART8has_dataEv>:

bool UART::has_data( ) {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	1f 92       	push	r1
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	9a 83       	std	Y+2, r25	; 0x02
 21c:	89 83       	std	Y+1, r24	; 0x01
    return this->_new_data;
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <__vector_25>:

// Interrupt Handlers
ISR(USART0_RX_vect)
{ UART::rxc_isr_handler(); }
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 240:	0f 92       	push	r0
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	18 d0       	rcall	.+48     	; 0x294 <_ZN4UART15rxc_isr_handlerEv>
 264:	00 00       	nop
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 288:	0f 90       	pop	r0
 28a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <_ZN4UART15rxc_isr_handlerEv>:

void UART::rxc_isr_handler() {
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
    self()->_rx_buffer = UDR0;
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	71 d0       	rcall	.+226    	; 0x380 <_ZN9SingletonI4UARTE4selfEv>
 29e:	9c 01       	movw	r18, r24
 2a0:	86 ec       	ldi	r24, 0xC6	; 198
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	f9 01       	movw	r30, r18
    self()->_new_data = 1;
 2aa:	81 83       	std	Z+1, r24	; 0x01
 2ac:	69 d0       	rcall	.+210    	; 0x380 <_ZN9SingletonI4UARTE4selfEv>
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
}
 2b4:	00 00       	nop
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <__vector_26>:

ISR(USART0_UDRE_vect)
{ UART::udre_isr_handler(); }
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 2cc:	0f 92       	push	r0
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	18 d0       	rcall	.+48     	; 0x320 <_ZN4UART16udre_isr_handlerEv>
 2f0:	00 00       	nop
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 314:	0f 90       	pop	r0
 316:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <_ZN4UART16udre_isr_handlerEv>:

void UART::udre_isr_handler() {
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
    UDR0 = self()->_tx_buffer;
 32c:	06 ec       	ldi	r16, 0xC6	; 198
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	27 d0       	rcall	.+78     	; 0x380 <_ZN9SingletonI4UARTE4selfEv>
 332:	fc 01       	movw	r30, r24
 334:	82 81       	ldd	r24, Z+2	; 0x02
 336:	f8 01       	movw	r30, r16
 338:	80 83       	st	Z, r24
    UCSR0B &= ~(1 << UDRIE0);
 33a:	81 ec       	ldi	r24, 0xC1	; 193
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	21 ec       	ldi	r18, 0xC1	; 193
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	2f 7d       	andi	r18, 0xDF	; 223
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
}
 34c:	00 00       	nop
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	08 95       	ret

00000358 <_ZN9SingletonI4UARTEC1Ev>:
#define SINGLETON_H_

template<typename T>
class Singleton {
public:
    Singleton() { _singleton = static_cast<T*>(this); }
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	1f 92       	push	r1
 35e:	1f 92       	push	r1
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	9a 83       	std	Y+2, r25	; 0x02
 366:	89 83       	std	Y+1, r24	; 0x01
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 370:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 374:	00 00       	nop
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <_ZN9SingletonI4UARTE4selfEv>:
    ~Singleton() { _singleton = 0; }

    static T * self() { return _singleton; }
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 38c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "UART.h"

int main(void) {
 396:	0f 93       	push	r16
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	00 d0       	rcall	.+0      	; 0x39e <main+0x8>
 39e:	1f 92       	push	r1
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62

    UART uart(57600, UART::EIGHT_DB, UART::NONE_PAR, UART::ONE_SB);
 3a4:	ce 01       	movw	r24, r28
 3a6:	02 96       	adiw	r24, 0x02	; 2
 3a8:	00 e0       	ldi	r16, 0x00	; 0
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	46 e0       	ldi	r20, 0x06	; 6
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	71 ee       	ldi	r23, 0xE1	; 225
 3b2:	ab de       	rcall	.-682    	; 0x10a <_ZN4UARTC1EjNS_10DataBits_tENS_8Parity_tENS_9StopBit_tE>
    sei();
 3b4:	78 94       	sei

    uint8_t input = 0xFF;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	89 83       	std	Y+1, r24	; 0x01
    while (1) {
        if (uart.has_data()) {
 3ba:	ce 01       	movw	r24, r28
 3bc:	02 96       	adiw	r24, 0x02	; 2
 3be:	27 df       	rcall	.-434    	; 0x20e <_ZN4UART8has_dataEv>
 3c0:	88 23       	and	r24, r24
            input = uart.get();
 3c2:	d9 f3       	breq	.-10     	; 0x3ba <main+0x24>
 3c4:	ce 01       	movw	r24, r28
 3c6:	02 96       	adiw	r24, 0x02	; 2
 3c8:	0d df       	rcall	.-486    	; 0x1e4 <_ZN4UART3getEv>
            uart.put(input);
 3ca:	89 83       	std	Y+1, r24	; 0x01
 3cc:	ce 01       	movw	r24, r28
 3ce:	02 96       	adiw	r24, 0x02	; 2
 3d0:	69 81       	ldd	r22, Y+1	; 0x01
 3d2:	eb de       	rcall	.-554    	; 0x1aa <_ZN4UART3putEh>

    UART uart(57600, UART::EIGHT_DB, UART::NONE_PAR, UART::ONE_SB);
    sei();

    uint8_t input = 0xFF;
    while (1) {
 3d4:	f2 cf       	rjmp	.-28     	; 0x3ba <main+0x24>

000003d6 <__udivmodsi4>:
 3d6:	a1 e2       	ldi	r26, 0x21	; 33
 3d8:	1a 2e       	mov	r1, r26
 3da:	aa 1b       	sub	r26, r26
 3dc:	bb 1b       	sub	r27, r27
 3de:	fd 01       	movw	r30, r26
 3e0:	0d c0       	rjmp	.+26     	; 0x3fc <__udivmodsi4_ep>

000003e2 <__udivmodsi4_loop>:
 3e2:	aa 1f       	adc	r26, r26
 3e4:	bb 1f       	adc	r27, r27
 3e6:	ee 1f       	adc	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	a2 17       	cp	r26, r18
 3ec:	b3 07       	cpc	r27, r19
 3ee:	e4 07       	cpc	r30, r20
 3f0:	f5 07       	cpc	r31, r21
 3f2:	20 f0       	brcs	.+8      	; 0x3fc <__udivmodsi4_ep>
 3f4:	a2 1b       	sub	r26, r18
 3f6:	b3 0b       	sbc	r27, r19
 3f8:	e4 0b       	sbc	r30, r20
 3fa:	f5 0b       	sbc	r31, r21

000003fc <__udivmodsi4_ep>:
 3fc:	66 1f       	adc	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	1a 94       	dec	r1
 406:	69 f7       	brne	.-38     	; 0x3e2 <__udivmodsi4_loop>
 408:	60 95       	com	r22
 40a:	70 95       	com	r23
 40c:	80 95       	com	r24
 40e:	90 95       	com	r25
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	bd 01       	movw	r22, r26
 416:	cf 01       	movw	r24, r30
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
