
Interrupt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  000004be  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080020e  0080020e  00000560  2**0
                  ALLOC
  3 .stab         00000948  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe5  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001e8d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000035b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	c3 c1       	rjmp	.+902    	; 0x39c <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	dc c0       	rjmp	.+440    	; 0x216 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee eb       	ldi	r30, 0xBE	; 190
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 31       	cpi	r26, 0x1A	; 26
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8d d1       	rcall	.+794    	; 0x43a <main>
 120:	cc c1       	rjmp	.+920    	; 0x4ba <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z9uart_initv>:

unsigned long ms = 0;
unsigned char fract = 0;
unsigned long overflow = 0;

void uart_init() {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	// Set baud rate
    UBRR0 = MYUBRR_VALUE;
 12c:	84 ec       	ldi	r24, 0xC4	; 196
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	27 e6       	ldi	r18, 0x67	; 103
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	31 83       	std	Z+1, r19	; 0x01
 138:	20 83       	st	Z, r18

    // Set TX and RX
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 13a:	81 ec       	ldi	r24, 0xC1	; 193
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	28 e1       	ldi	r18, 0x18	; 24
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18

    // Set frame format: 8 data, 1 stop bit (00000110)
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 144:	82 ec       	ldi	r24, 0xC2	; 194
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	26 e0       	ldi	r18, 0x06	; 6
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
}
 14e:	00 00       	nop
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <_Z7uart_txPc>:

void uart_tx(char *data) {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	00 d0       	rcall	.+0      	; 0x15c <_Z7uart_txPc+0x6>
 15c:	1f 92       	push	r1
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	9c 83       	std	Y+4, r25	; 0x04
 164:	8b 83       	std	Y+3, r24	; 0x03
    for (int i=0;data[i]!=0;i++) {
 166:	1a 82       	std	Y+2, r1	; 0x02
 168:	19 82       	std	Y+1, r1	; 0x01
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	9a 81       	ldd	r25, Y+2	; 0x02
 16e:	2b 81       	ldd	r18, Y+3	; 0x03
 170:	3c 81       	ldd	r19, Y+4	; 0x04
 172:	82 0f       	add	r24, r18
 174:	93 1f       	adc	r25, r19
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	09 f1       	breq	.+66     	; 0x1c0 <_Z7uart_txPc+0x6a>
        while ( !(UCSR0A & (1 << UDRE0)) );
 17e:	80 ec       	ldi	r24, 0xC0	; 192
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	80 72       	andi	r24, 0x20	; 32
 18c:	99 27       	eor	r25, r25
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	89 2b       	or	r24, r25
 192:	09 f0       	breq	.+2      	; 0x196 <_Z7uart_txPc+0x40>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	22 23       	and	r18, r18
 198:	09 f0       	breq	.+2      	; 0x19c <_Z7uart_txPc+0x46>
 19a:	f1 cf       	rjmp	.-30     	; 0x17e <_Z7uart_txPc+0x28>
        UDR0 = data[i];
 19c:	86 ec       	ldi	r24, 0xC6	; 198
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	3a 81       	ldd	r19, Y+2	; 0x02
 1a4:	4b 81       	ldd	r20, Y+3	; 0x03
 1a6:	5c 81       	ldd	r21, Y+4	; 0x04
 1a8:	24 0f       	add	r18, r20
 1aa:	35 1f       	adc	r19, r21
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
    // Set frame format: 8 data, 1 stop bit (00000110)
    UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
}

void uart_tx(char *data) {
    for (int i=0;data[i]!=0;i++) {
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	d5 cf       	rjmp	.-86     	; 0x16a <_Z7uart_txPc+0x14>
        while ( !(UCSR0A & (1 << UDRE0)) );
        UDR0 = data[i];
    }
}
 1c0:	00 00       	nop
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <_Z10clock_initv>:

void clock_init(){
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
	TCCR0B |= (1 << CS00);
 1d8:	85 e4       	ldi	r24, 0x45	; 69
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	25 e4       	ldi	r18, 0x45	; 69
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	21 60       	ori	r18, 0x01	; 1
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
	TCCR0B |= (1 << CS01);
 1ea:	85 e4       	ldi	r24, 0x45	; 69
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	25 e4       	ldi	r18, 0x45	; 69
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	22 60       	ori	r18, 0x02	; 2
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
	TIMSK0 |= (1 << TOIE0);
 1fc:	8e e6       	ldi	r24, 0x6E	; 110
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	2e e6       	ldi	r18, 0x6E	; 110
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	21 60       	ori	r18, 0x01	; 1
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
}
 20e:	00 00       	nop
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <__vector_23>:

ISR(TIMER0_OVF_vect) {
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	25 97       	sbiw	r28, 0x05	; 5
 234:	de bf       	out	0x3e, r29	; 62
 236:	cd bf       	out	0x3d, r28	; 61
	unsigned long m = ms;
 238:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ms>
 23c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <ms+0x1>
 240:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <ms+0x2>
 244:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <ms+0x3>
 248:	89 83       	std	Y+1, r24	; 0x01
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	ab 83       	std	Y+3, r26	; 0x03
 24e:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char f = fract;
 250:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <fract>
 254:	8d 83       	std	Y+5, r24	; 0x05

	m += 1;
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	ab 81       	ldd	r26, Y+3	; 0x03
 25c:	bc 81       	ldd	r27, Y+4	; 0x04
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	a1 1d       	adc	r26, r1
 262:	b1 1d       	adc	r27, r1
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	ab 83       	std	Y+3, r26	; 0x03
 26a:	bc 83       	std	Y+4, r27	; 0x04
	f += 3;
 26c:	8d 81       	ldd	r24, Y+5	; 0x05
 26e:	8d 5f       	subi	r24, 0xFD	; 253
 270:	8d 83       	std	Y+5, r24	; 0x05
	if (f >= 125) {
 272:	8d 81       	ldd	r24, Y+5	; 0x05
 274:	8d 37       	cpi	r24, 0x7D	; 125
 276:	70 f0       	brcs	.+28     	; 0x294 <__vector_23+0x7e>
		f -= 125;
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	8d 57       	subi	r24, 0x7D	; 125
 27c:	8d 83       	std	Y+5, r24	; 0x05
		m += 1;
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	ab 81       	ldd	r26, Y+3	; 0x03
 284:	bc 81       	ldd	r27, Y+4	; 0x04
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	a1 1d       	adc	r26, r1
 28a:	b1 1d       	adc	r27, r1
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	9a 83       	std	Y+2, r25	; 0x02
 290:	ab 83       	std	Y+3, r26	; 0x03
 292:	bc 83       	std	Y+4, r27	; 0x04
	}
	fract = f;
 294:	8d 81       	ldd	r24, Y+5	; 0x05
 296:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <fract>
	ms = m;
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	ab 81       	ldd	r26, Y+3	; 0x03
 2a0:	bc 81       	ldd	r27, Y+4	; 0x04
 2a2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ms>
 2a6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <ms+0x1>
 2aa:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <ms+0x2>
 2ae:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <ms+0x3>
	overflow++;
 2b2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <overflow>
 2b6:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <overflow+0x1>
 2ba:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <overflow+0x2>
 2be:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <overflow+0x3>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <overflow>
 2cc:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <overflow+0x1>
 2d0:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <overflow+0x2>
 2d4:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <overflow+0x3>
}
 2d8:	00 00       	nop
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <_Z6millisv>:

unsigned long millis() {
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <_Z6millisv+0x6>
 302:	1f 92       	push	r1
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	m = ms;
 308:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ms>
 30c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <ms+0x1>
 310:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <ms+0x2>
 314:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <ms+0x3>
 318:	89 83       	std	Y+1, r24	; 0x01
 31a:	9a 83       	std	Y+2, r25	; 0x02
 31c:	ab 83       	std	Y+3, r26	; 0x03
 31e:	bc 83       	std	Y+4, r27	; 0x04
	return m;
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	9a 81       	ldd	r25, Y+2	; 0x02
 324:	ab 81       	ldd	r26, Y+3	; 0x03
 326:	bc 81       	ldd	r27, Y+4	; 0x04
}
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <_Z8debouncev>:

int debounce() {
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
  if ( (millis() - time_last_interrupt) > debounce_limit) {
 340:	de b7       	in	r29, 0x3e	; 62
 342:	dc df       	rcall	.-72     	; 0x2fc <_Z6millisv>
 344:	9b 01       	movw	r18, r22
 346:	ac 01       	movw	r20, r24
 348:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
 34c:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__data_end+0x1>
 350:	cc 01       	movw	r24, r24
 352:	a0 e0       	ldi	r26, 0x00	; 0
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	28 1b       	sub	r18, r24
 358:	39 0b       	sbc	r19, r25
 35a:	4a 0b       	sbc	r20, r26
 35c:	5b 0b       	sbc	r21, r27
 35e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 362:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 366:	cc 01       	movw	r24, r24
 368:	a0 e0       	ldi	r26, 0x00	; 0
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	82 17       	cp	r24, r18
 370:	93 07       	cpc	r25, r19
 372:	a4 07       	cpc	r26, r20
 374:	b5 07       	cpc	r27, r21
 376:	08 f0       	brcs	.+2      	; 0x37a <_Z8debouncev+0x40>
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	66 23       	and	r22, r22
    time_last_interrupt = millis();
 37c:	51 f0       	breq	.+20     	; 0x392 <_Z8debouncev+0x58>
 37e:	be df       	rcall	.-132    	; 0x2fc <_Z6millisv>
 380:	dc 01       	movw	r26, r24
 382:	cb 01       	movw	r24, r22
 384:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <__data_end+0x1>
 388:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__data_end>
    return 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <_Z8debouncev+0x5c>
  } else return 0;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <__vector_5>:

ISR(INT4_vect) {
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 3ac:	0f 92       	push	r0
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
	if (debounce()) {
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	b5 df       	rcall	.-150    	; 0x33a <_Z8debouncev>
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	89 2b       	or	r24, r25
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <__vector_5+0x3c>
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	22 23       	and	r18, r18
 3da:	b9 f0       	breq	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		uart_tx("Change LED\n");
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	92 e0       	ldi	r25, 0x02	; 2
 3e0:	ba de       	rcall	.-652    	; 0x156 <_Z7uart_txPc>
		if (!(PINE & (1 << PINE4))) led_state = 1;
 3e2:	8c e2       	ldi	r24, 0x2C	; 44
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	88 2f       	mov	r24, r24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	80 71       	andi	r24, 0x10	; 16
 3f0:	99 27       	eor	r25, r25
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	89 2b       	or	r24, r25
 3f6:	09 f0       	breq	.+2      	; 0x3fa <__vector_5+0x5e>
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	22 23       	and	r18, r18
 3fc:	21 f0       	breq	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <led_state>
		else led_state = 0;
	}
}
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

ISR(INT4_vect) {
	if (debounce()) {
		uart_tx("Change LED\n");
		if (!(PINE & (1 << PINE4))) led_state = 1;
		else led_state = 0;
 406:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <led_state>
	}
}
 40a:	00 00       	nop
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 42e:	0f 90       	pop	r0
 430:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <main>:

int main(void) {
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
	cli();
	uart_init();
 442:	f8 94       	cli
	clock_init();
 444:	6f de       	rcall	.-802    	; 0x124 <_Z9uart_initv>
 446:	c4 de       	rcall	.-632    	; 0x1d0 <_Z10clock_initv>

	DDRE &= ~(1 << DDE4);				// Set 0 to DDRE4 (PE4)
 448:	8d e2       	ldi	r24, 0x2D	; 45
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	2d e2       	ldi	r18, 0x2D	; 45
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	f9 01       	movw	r30, r18
 452:	20 81       	ld	r18, Z
 454:	2f 7e       	andi	r18, 0xEF	; 239
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
	DDRH |= (1 << DDH5);				// Set 1 to DDRH5 (PH5)
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	31 e0       	ldi	r19, 0x01	; 1
 462:	f9 01       	movw	r30, r18
 464:	20 81       	ld	r18, Z
 466:	20 62       	ori	r18, 0x20	; 32
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18

	EICRB = ~(1 << ISC41)|(1 << ISC40);				// rising up and down
 46c:	8a e6       	ldi	r24, 0x6A	; 106
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	2d ef       	ldi	r18, 0xFD	; 253
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
	EIMSK |= (1 << INT4);
 476:	8d e3       	ldi	r24, 0x3D	; 61
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	2d e3       	ldi	r18, 0x3D	; 61
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f9 01       	movw	r30, r18
 480:	20 81       	ld	r18, Z
 482:	20 61       	ori	r18, 0x10	; 16
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
	sei();
 488:	78 94       	sei

	while (1) {

		if (led_state) {
 48a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <led_state>
 48e:	88 23       	and	r24, r24
 490:	51 f0       	breq	.+20     	; 0x4a6 <main+0x6c>
			PORTH |= (1 << PH5);
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	22 e0       	ldi	r18, 0x02	; 2
 498:	31 e0       	ldi	r19, 0x01	; 1
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	20 62       	ori	r18, 0x20	; 32
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
 4a4:	f2 cf       	rjmp	.-28     	; 0x48a <main+0x50>
		} else {
			PORTH &= ~(1 << PH5);
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	22 e0       	ldi	r18, 0x02	; 2
 4ac:	31 e0       	ldi	r19, 0x01	; 1
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	2f 7d       	andi	r18, 0xDF	; 223
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18

	EICRB = ~(1 << ISC41)|(1 << ISC40);				// rising up and down
	EIMSK |= (1 << INT4);
	sei();

	while (1) {
 4b8:	e8 cf       	rjmp	.-48     	; 0x48a <main+0x50>

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
