
TimerClass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00000dea  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800228  00800228  00000ea6  2**0
                  ALLOC
  3 .stab         00001668  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b3  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003ac3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ad4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000051ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00005204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	db c2       	rjmp	.+1462   	; 0x614 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ee       	ldi	r30, 0xEA	; 234
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e2       	ldi	r26, 0x28	; 40
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 32       	cpi	r26, 0x2B	; 43
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2b d4       	rcall	.+2134   	; 0x976 <main>
 120:	62 c6       	rjmp	.+3268   	; 0xde6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN7Timeout7TimeoutC1Ev>:

#include "Timeout.h"

namespace Timeout {

Timeout::Timeout() : _event(0), _enable(0), _counter(0)
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	fc 01       	movw	r30, r24
 13a:	10 82       	st	Z, r1
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	fc 01       	movw	r30, r24
 142:	11 82       	std	Z+1, r1	; 0x01
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	9a 81       	ldd	r25, Y+2	; 0x02
 148:	fc 01       	movw	r30, r24
 14a:	14 82       	std	Z+4, r1	; 0x04
 14c:	15 82       	std	Z+5, r1	; 0x05
 14e:	16 82       	std	Z+6, r1	; 0x06
 150:	17 82       	std	Z+7, r1	; 0x07
{
	// TODO Auto-generated constructor stub

}
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <_ZN7Timeout7TimeoutD1Ev>:

Timeout::~Timeout() {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	1f 92       	push	r1
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	89 83       	std	Y+1, r24	; 0x01
	// TODO Auto-generated destructor stub
}
 16e:	00 00       	nop
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <_ZN7Timeout7Timeout6configEmPFvvE>:

void Timeout::config(uint32_t interval, CALLBACK_t callback)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	28 97       	sbiw	r28, 0x08	; 8
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01
 192:	4b 83       	std	Y+3, r20	; 0x03
 194:	5c 83       	std	Y+4, r21	; 0x04
 196:	6d 83       	std	Y+5, r22	; 0x05
 198:	7e 83       	std	Y+6, r23	; 0x06
 19a:	38 87       	std	Y+8, r19	; 0x08
 19c:	2f 83       	std	Y+7, r18	; 0x07
	_enable = true;
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	9a 81       	ldd	r25, Y+2	; 0x02
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	fc 01       	movw	r30, r24
 1a6:	21 83       	std	Z+1, r18	; 0x01
	_callback = callback;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	9a 81       	ldd	r25, Y+2	; 0x02
 1ac:	2f 81       	ldd	r18, Y+7	; 0x07
 1ae:	38 85       	ldd	r19, Y+8	; 0x08
 1b0:	fc 01       	movw	r30, r24
 1b2:	33 83       	std	Z+3, r19	; 0x03
 1b4:	22 83       	std	Z+2, r18	; 0x02
	_interval = interval;
 1b6:	29 81       	ldd	r18, Y+1	; 0x01
 1b8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	9c 81       	ldd	r25, Y+4	; 0x04
 1be:	ad 81       	ldd	r26, Y+5	; 0x05
 1c0:	be 81       	ldd	r27, Y+6	; 0x06
 1c2:	f9 01       	movw	r30, r18
 1c4:	80 87       	std	Z+8, r24	; 0x08
 1c6:	91 87       	std	Z+9, r25	; 0x09
 1c8:	a2 87       	std	Z+10, r26	; 0x0a
 1ca:	b3 87       	std	Z+11, r27	; 0x0b
}
 1cc:	00 00       	nop
 1ce:	28 96       	adiw	r28, 0x08	; 8
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <_ZN7Timeout7Timeout12checkTimeoutEv>:

void Timeout::checkTimeout()
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	1f 92       	push	r1
 1e6:	1f 92       	push	r1
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
	if (_enable) {
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	fc 01       	movw	r30, r24
 1f6:	81 81       	ldd	r24, Z+1	; 0x01
 1f8:	88 23       	and	r24, r24
 1fa:	81 f1       	breq	.+96     	; 0x25c <_ZN7Timeout7Timeout12checkTimeoutEv+0x7c>
		_counter++;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	fc 01       	movw	r30, r24
 202:	84 81       	ldd	r24, Z+4	; 0x04
 204:	95 81       	ldd	r25, Z+5	; 0x05
 206:	a6 81       	ldd	r26, Z+6	; 0x06
 208:	b7 81       	ldd	r27, Z+7	; 0x07
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	a1 1d       	adc	r26, r1
 20e:	b1 1d       	adc	r27, r1
 210:	29 81       	ldd	r18, Y+1	; 0x01
 212:	3a 81       	ldd	r19, Y+2	; 0x02
 214:	f9 01       	movw	r30, r18
 216:	84 83       	std	Z+4, r24	; 0x04
 218:	95 83       	std	Z+5, r25	; 0x05
 21a:	a6 83       	std	Z+6, r26	; 0x06
 21c:	b7 83       	std	Z+7, r27	; 0x07
		if (_counter == _interval) {
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	fc 01       	movw	r30, r24
 224:	24 81       	ldd	r18, Z+4	; 0x04
 226:	35 81       	ldd	r19, Z+5	; 0x05
 228:	46 81       	ldd	r20, Z+6	; 0x06
 22a:	57 81       	ldd	r21, Z+7	; 0x07
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	9a 81       	ldd	r25, Y+2	; 0x02
 230:	fc 01       	movw	r30, r24
 232:	80 85       	ldd	r24, Z+8	; 0x08
 234:	91 85       	ldd	r25, Z+9	; 0x09
 236:	a2 85       	ldd	r26, Z+10	; 0x0a
 238:	b3 85       	ldd	r27, Z+11	; 0x0b
 23a:	28 17       	cp	r18, r24
 23c:	39 07       	cpc	r19, r25
 23e:	4a 07       	cpc	r20, r26
 240:	5b 07       	cpc	r21, r27
 242:	61 f4       	brne	.+24     	; 0x25c <_ZN7Timeout7Timeout12checkTimeoutEv+0x7c>
			_event = true;
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
			_counter = 0;
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	fc 01       	movw	r30, r24
 254:	14 82       	std	Z+4, r1	; 0x04
 256:	15 82       	std	Z+5, r1	; 0x05
 258:	16 82       	std	Z+6, r1	; 0x06
 25a:	17 82       	std	Z+7, r1	; 0x07
		}
	}

}
 25c:	00 00       	nop
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <_ZN7Timeout7Timeout8callbackEv>:

void Timeout::callback()
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	1f 92       	push	r1
 26e:	1f 92       	push	r1
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
	if (_event and _enable) {
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	9a 81       	ldd	r25, Y+2	; 0x02
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	89 f0       	breq	.+34     	; 0x2a6 <_ZN7Timeout7Timeout8callbackEv+0x3e>
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	fc 01       	movw	r30, r24
 28a:	81 81       	ldd	r24, Z+1	; 0x01
 28c:	88 23       	and	r24, r24
 28e:	59 f0       	breq	.+22     	; 0x2a6 <_ZN7Timeout7Timeout8callbackEv+0x3e>
		(*_callback)();
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	fc 01       	movw	r30, r24
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	93 81       	ldd	r25, Z+3	; 0x03
 29a:	fc 01       	movw	r30, r24
 29c:	19 95       	eicall
		_event = false;
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	fc 01       	movw	r30, r24
 2a4:	10 82       	st	Z, r1
	}
}
 2a6:	00 00       	nop
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <_ZN7Timeout7Timeout5eventEv>:

bool Timeout::event()
{
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	1f 92       	push	r1
 2b8:	1f 92       	push	r1
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
	return _event;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
}
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <_ZN5TimerC1Em>:
#include <avr/io.h>
#include <avr/interrupt.h>

using namespace Timeout;

Timer::Timer(Hertz freq)
 2d4:	2f 92       	push	r2
 2d6:	3f 92       	push	r3
 2d8:	4f 92       	push	r4
 2da:	5f 92       	push	r5
 2dc:	6f 92       	push	r6
 2de:	7f 92       	push	r7
 2e0:	8f 92       	push	r8
 2e2:	9f 92       	push	r9
 2e4:	af 92       	push	r10
 2e6:	bf 92       	push	r11
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	6a 97       	sbiw	r28, 0x1a	; 26
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	9e 8b       	std	Y+22, r25	; 0x16
 30a:	8d 8b       	std	Y+21, r24	; 0x15
 30c:	4f 8b       	std	Y+23, r20	; 0x17
 30e:	58 8f       	std	Y+24, r21	; 0x18
 310:	69 8f       	std	Y+25, r22	; 0x19
 312:	7a 8f       	std	Y+26, r23	; 0x1a
: _ticks(0), _timer_base(0), _us_per_tick(0), _timeout_counter(0)
 314:	8d 89       	ldd	r24, Y+21	; 0x15
 316:	9e 89       	ldd	r25, Y+22	; 0x16
 318:	ea d2       	rcall	.+1492   	; 0x8ee <_ZN9SingletonI5TimerEC1Ev>
 31a:	8d 89       	ldd	r24, Y+21	; 0x15
 31c:	9e 89       	ldd	r25, Y+22	; 0x16
 31e:	fc 01       	movw	r30, r24
 320:	10 82       	st	Z, r1
 322:	fc 01       	movw	r30, r24
 324:	11 82       	std	Z+1, r1	; 0x01
 326:	fc 01       	movw	r30, r24
 328:	12 82       	std	Z+2, r1	; 0x02
 32a:	fc 01       	movw	r30, r24
 32c:	13 82       	std	Z+3, r1	; 0x03
 32e:	fc 01       	movw	r30, r24
 330:	14 82       	std	Z+4, r1	; 0x04
 332:	fc 01       	movw	r30, r24
 334:	15 82       	std	Z+5, r1	; 0x05
 336:	fc 01       	movw	r30, r24
 338:	16 82       	std	Z+6, r1	; 0x06
 33a:	fc 01       	movw	r30, r24
 33c:	17 82       	std	Z+7, r1	; 0x07
 33e:	8d 89       	ldd	r24, Y+21	; 0x15
 340:	9e 89       	ldd	r25, Y+22	; 0x16
 342:	fc 01       	movw	r30, r24
 344:	11 86       	std	Z+9, r1	; 0x09
 346:	10 86       	std	Z+8, r1	; 0x08
 348:	8d 89       	ldd	r24, Y+21	; 0x15
 34a:	9e 89       	ldd	r25, Y+22	; 0x16
 34c:	fc 01       	movw	r30, r24
 34e:	12 86       	std	Z+10, r1	; 0x0a
 350:	fc 01       	movw	r30, r24
 352:	13 86       	std	Z+11, r1	; 0x0b
 354:	fc 01       	movw	r30, r24
 356:	14 86       	std	Z+12, r1	; 0x0c
 358:	fc 01       	movw	r30, r24
 35a:	15 86       	std	Z+13, r1	; 0x0d
 35c:	fc 01       	movw	r30, r24
 35e:	16 86       	std	Z+14, r1	; 0x0e
 360:	fc 01       	movw	r30, r24
 362:	17 86       	std	Z+15, r1	; 0x0f
 364:	fc 01       	movw	r30, r24
 366:	10 8a       	std	Z+16, r1	; 0x10
 368:	fc 01       	movw	r30, r24
 36a:	11 8a       	std	Z+17, r1	; 0x11
 36c:	8d 89       	ldd	r24, Y+21	; 0x15
 36e:	9e 89       	ldd	r25, Y+22	; 0x16
 370:	42 96       	adiw	r24, 0x12	; 18
 372:	03 e0       	ldi	r16, 0x03	; 3
 374:	10 e0       	ldi	r17, 0x00	; 0
 376:	7c 01       	movw	r14, r24
 378:	0f 3f       	cpi	r16, 0xFF	; 255
 37a:	ff ef       	ldi	r31, 0xFF	; 255
 37c:	1f 07       	cpc	r17, r31
 37e:	41 f0       	breq	.+16     	; 0x390 <_ZN5TimerC1Em+0xbc>
 380:	c7 01       	movw	r24, r14
 382:	d0 de       	rcall	.-608    	; 0x124 <_ZN7Timeout7TimeoutC1Ev>
 384:	2c e0       	ldi	r18, 0x0C	; 12
 386:	e2 0e       	add	r14, r18
 388:	f1 1c       	adc	r15, r1
 38a:	01 50       	subi	r16, 0x01	; 1
 38c:	11 09       	sbc	r17, r1
 38e:	f4 cf       	rjmp	.-24     	; 0x378 <_ZN5TimerC1Em+0xa4>
 390:	8d 89       	ldd	r24, Y+21	; 0x15
 392:	9e 89       	ldd	r25, Y+22	; 0x16
 394:	8e 5b       	subi	r24, 0xBE	; 190
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 398:	fc 01       	movw	r30, r24
 39a:	10 82       	st	Z, r1
 39c:	11 82       	std	Z+1, r1	; 0x01
 39e:	12 82       	std	Z+2, r1	; 0x02
 3a0:	13 82       	std	Z+3, r1	; 0x03
			  (64*1000000) / F_CPU, //64
			 (256*1000000) / F_CPU, //256
			(1024*1000000) / F_CPU  //1024
	};

	TCCR0A = 0x00; // normal operation
 3a2:	84 e4       	ldi	r24, 0x44	; 68
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	fc 01       	movw	r30, r24
 3a8:	10 82       	st	Z, r1
	int div = 0;
 3aa:	1a 82       	std	Y+2, r1	; 0x02
 3ac:	19 82       	std	Y+1, r1	; 0x01

	// lógica para selecionar divisor
	if(freq <= Fmax_1024)
 3ae:	8f 89       	ldd	r24, Y+23	; 0x17
 3b0:	98 8d       	ldd	r25, Y+24	; 0x18
 3b2:	a9 8d       	ldd	r26, Y+25	; 0x19
 3b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
 3b6:	8a 30       	cpi	r24, 0x0A	; 10
 3b8:	9d 43       	sbci	r25, 0x3D	; 61
 3ba:	a1 05       	cpc	r26, r1
 3bc:	b1 05       	cpc	r27, r1
 3be:	50 f4       	brcc	.+20     	; 0x3d4 <_ZN5TimerC1Em+0x100>
	{
		TCCR0B = 0x05; // div 1024
 3c0:	85 e4       	ldi	r24, 0x45	; 69
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	25 e0       	ldi	r18, 0x05	; 5
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
		div = 1024;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	94 e0       	ldi	r25, 0x04	; 4
 3ce:	9a 83       	std	Y+2, r25	; 0x02
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	4c c0       	rjmp	.+152    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}
	else if(freq <= Fmax_256)
 3d4:	8f 89       	ldd	r24, Y+23	; 0x17
 3d6:	98 8d       	ldd	r25, Y+24	; 0x18
 3d8:	a9 8d       	ldd	r26, Y+25	; 0x19
 3da:	ba 8d       	ldd	r27, Y+26	; 0x1a
 3dc:	85 32       	cpi	r24, 0x25	; 37
 3de:	94 4f       	sbci	r25, 0xF4	; 244
 3e0:	a1 05       	cpc	r26, r1
 3e2:	b1 05       	cpc	r27, r1
 3e4:	50 f4       	brcc	.+20     	; 0x3fa <_ZN5TimerC1Em+0x126>
	{
		TCCR0B = 0x04; // div 256
 3e6:	85 e4       	ldi	r24, 0x45	; 69
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	24 e0       	ldi	r18, 0x04	; 4
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
		div = 256;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	9a 83       	std	Y+2, r25	; 0x02
 3f6:	89 83       	std	Y+1, r24	; 0x01
 3f8:	39 c0       	rjmp	.+114    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}
	else if(freq <= Fmax_64)
 3fa:	8f 89       	ldd	r24, Y+23	; 0x17
 3fc:	98 8d       	ldd	r25, Y+24	; 0x18
 3fe:	a9 8d       	ldd	r26, Y+25	; 0x19
 400:	ba 8d       	ldd	r27, Y+26	; 0x1a
 402:	81 39       	cpi	r24, 0x91	; 145
 404:	90 4d       	sbci	r25, 0xD0	; 208
 406:	a3 40       	sbci	r26, 0x03	; 3
 408:	b1 05       	cpc	r27, r1
 40a:	50 f4       	brcc	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		TCCR0B = 0x03; // div 64
 40c:	85 e4       	ldi	r24, 0x45	; 69
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	23 e0       	ldi	r18, 0x03	; 3
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
		div = 64;
 416:	80 e4       	ldi	r24, 0x40	; 64
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	9a 83       	std	Y+2, r25	; 0x02
 41c:	89 83       	std	Y+1, r24	; 0x01
 41e:	26 c0       	rjmp	.+76     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}
	else if(freq <= Fmax_8)
 420:	8f 89       	ldd	r24, Y+23	; 0x17
 422:	98 8d       	ldd	r25, Y+24	; 0x18
 424:	a9 8d       	ldd	r26, Y+25	; 0x19
 426:	ba 8d       	ldd	r27, Y+26	; 0x1a
 428:	81 38       	cpi	r24, 0x81	; 129
 42a:	94 48       	sbci	r25, 0x84	; 132
 42c:	ae 41       	sbci	r26, 0x1E	; 30
 42e:	b1 05       	cpc	r27, r1
 430:	50 f4       	brcc	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{
		TCCR0B = 0x02; // div 8
 432:	85 e4       	ldi	r24, 0x45	; 69
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	22 e0       	ldi	r18, 0x02	; 2
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
		div = 8;
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	9a 83       	std	Y+2, r25	; 0x02
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	13 c0       	rjmp	.+38     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}
	else if(freq <= Fmax_1)
 446:	8f 89       	ldd	r24, Y+23	; 0x17
 448:	98 8d       	ldd	r25, Y+24	; 0x18
 44a:	a9 8d       	ldd	r26, Y+25	; 0x19
 44c:	ba 8d       	ldd	r27, Y+26	; 0x1a
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	94 42       	sbci	r25, 0x24	; 36
 452:	a4 4f       	sbci	r26, 0xF4	; 244
 454:	b1 05       	cpc	r27, r1
 456:	08 f0       	brcs	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	c1 c0       	rjmp	.+386    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
	{
		TCCR0B = 0x01; // div 1
 45a:	85 e4       	ldi	r24, 0x45	; 69
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
		div = 1;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	9a 83       	std	Y+2, r25	; 0x02
 46a:	89 83       	std	Y+1, r24	; 0x01
	}
	else // #error "Frequency out of range (should be between 62Hz and 250kHz)."
		return;

	// calcular ciclos de timer
	Hertz ciclos = (F_CPU/div)/freq;
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	9a 81       	ldd	r25, Y+2	; 0x02
 470:	9c 01       	movw	r18, r24
 472:	99 0f       	add	r25, r25
 474:	44 0b       	sbc	r20, r20
 476:	55 0b       	sbc	r21, r21
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	94 e2       	ldi	r25, 0x24	; 36
 47c:	a4 ef       	ldi	r26, 0xF4	; 244
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	bc 01       	movw	r22, r24
 482:	cd 01       	movw	r24, r26
 484:	16 d3       	rcall	.+1580   	; 0xab2 <__udivmodsi4>
 486:	da 01       	movw	r26, r20
 488:	c9 01       	movw	r24, r18
 48a:	2f 89       	ldd	r18, Y+23	; 0x17
 48c:	38 8d       	ldd	r19, Y+24	; 0x18
 48e:	49 8d       	ldd	r20, Y+25	; 0x19
 490:	5a 8d       	ldd	r21, Y+26	; 0x1a
 492:	bc 01       	movw	r22, r24
 494:	cd 01       	movw	r24, r26
 496:	0d d3       	rcall	.+1562   	; 0xab2 <__udivmodsi4>
 498:	da 01       	movw	r26, r20
 49a:	c9 01       	movw	r24, r18
 49c:	8d 83       	std	Y+5, r24	; 0x05
 49e:	9e 83       	std	Y+6, r25	; 0x06
 4a0:	af 83       	std	Y+7, r26	; 0x07
 4a2:	b8 87       	std	Y+8, r27	; 0x08
	if(ciclos > Timer_Top) return; // Frequência solicitada é muito alta!
 4a4:	8d 81       	ldd	r24, Y+5	; 0x05
 4a6:	9e 81       	ldd	r25, Y+6	; 0x06
 4a8:	af 81       	ldd	r26, Y+7	; 0x07
 4aa:	b8 85       	ldd	r27, Y+8	; 0x08
 4ac:	8f 3f       	cpi	r24, 0xFF	; 255
 4ae:	91 05       	cpc	r25, r1
 4b0:	a1 05       	cpc	r26, r1
 4b2:	b1 05       	cpc	r27, r1
 4b4:	11 f0       	breq	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	93 c0       	rjmp	.+294    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
	_timer_base = (Timer_Top + 1) - ciclos;
 4ba:	8d 81       	ldd	r24, Y+5	; 0x05
 4bc:	9e 81       	ldd	r25, Y+6	; 0x06
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	31 e0       	ldi	r19, 0x01	; 1
 4c2:	28 1b       	sub	r18, r24
 4c4:	39 0b       	sbc	r19, r25
 4c6:	8d 89       	ldd	r24, Y+21	; 0x15
 4c8:	9e 89       	ldd	r25, Y+22	; 0x16
 4ca:	fc 01       	movw	r30, r24
 4cc:	31 87       	std	Z+9, r19	; 0x09
 4ce:	20 87       	std	Z+8, r18	; 0x08

	//TODO: compute _us_per_tick
	_us_per_tick = ciclos * Period_div[(TCCR0B & 0x07) - 1];
 4d0:	8d 81       	ldd	r24, Y+5	; 0x05
 4d2:	9e 81       	ldd	r25, Y+6	; 0x06
 4d4:	af 81       	ldd	r26, Y+7	; 0x07
 4d6:	b8 85       	ldd	r27, Y+8	; 0x08
 4d8:	1c 01       	movw	r2, r24
 4da:	2d 01       	movw	r4, r26
 4dc:	61 2c       	mov	r6, r1
 4de:	71 2c       	mov	r7, r1
 4e0:	43 01       	movw	r8, r6
 4e2:	85 e4       	ldi	r24, 0x45	; 69
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	80 81       	ld	r24, Z
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	87 70       	andi	r24, 0x07	; 7
 4f0:	99 27       	eor	r25, r25
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	fc 01       	movw	r30, r24
 502:	e0 50       	subi	r30, 0x00	; 0
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	20 81       	ld	r18, Z
 508:	31 81       	ldd	r19, Z+1	; 0x01
 50a:	42 81       	ldd	r20, Z+2	; 0x02
 50c:	53 81       	ldd	r21, Z+3	; 0x03
 50e:	64 81       	ldd	r22, Z+4	; 0x04
 510:	75 81       	ldd	r23, Z+5	; 0x05
 512:	86 81       	ldd	r24, Z+6	; 0x06
 514:	97 81       	ldd	r25, Z+7	; 0x07
 516:	a2 2e       	mov	r10, r18
 518:	b3 2e       	mov	r11, r19
 51a:	c4 2e       	mov	r12, r20
 51c:	d5 2e       	mov	r13, r21
 51e:	e6 2e       	mov	r14, r22
 520:	f7 2e       	mov	r15, r23
 522:	08 2f       	mov	r16, r24
 524:	19 2f       	mov	r17, r25
 526:	22 2d       	mov	r18, r2
 528:	33 2d       	mov	r19, r3
 52a:	44 2d       	mov	r20, r4
 52c:	55 2d       	mov	r21, r5
 52e:	66 2d       	mov	r22, r6
 530:	77 2d       	mov	r23, r7
 532:	88 2d       	mov	r24, r8
 534:	99 2d       	mov	r25, r9
 536:	df d2       	rcall	.+1470   	; 0xaf6 <__muldi3>
 538:	a2 2e       	mov	r10, r18
 53a:	b3 2e       	mov	r11, r19
 53c:	c4 2e       	mov	r12, r20
 53e:	d5 2e       	mov	r13, r21
 540:	e6 2e       	mov	r14, r22
 542:	f7 2e       	mov	r15, r23
 544:	08 2f       	mov	r16, r24
 546:	19 2f       	mov	r17, r25
 548:	2a 2d       	mov	r18, r10
 54a:	3b 2d       	mov	r19, r11
 54c:	4c 2d       	mov	r20, r12
 54e:	5d 2d       	mov	r21, r13
 550:	6e 2d       	mov	r22, r14
 552:	7f 2d       	mov	r23, r15
 554:	80 2f       	mov	r24, r16
 556:	91 2f       	mov	r25, r17
 558:	ed 89       	ldd	r30, Y+21	; 0x15
 55a:	fe 89       	ldd	r31, Y+22	; 0x16
 55c:	22 87       	std	Z+10, r18	; 0x0a
 55e:	33 87       	std	Z+11, r19	; 0x0b
 560:	44 87       	std	Z+12, r20	; 0x0c
 562:	55 87       	std	Z+13, r21	; 0x0d
 564:	66 87       	std	Z+14, r22	; 0x0e
 566:	77 87       	std	Z+15, r23	; 0x0f
 568:	80 8b       	std	Z+16, r24	; 0x10
 56a:	91 8b       	std	Z+17, r25	; 0x11

	TCNT0  = _timer_base;
 56c:	86 e4       	ldi	r24, 0x46	; 70
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	2d 89       	ldd	r18, Y+21	; 0x15
 572:	3e 89       	ldd	r19, Y+22	; 0x16
 574:	f9 01       	movw	r30, r18
 576:	20 85       	ldd	r18, Z+8	; 0x08
 578:	31 85       	ldd	r19, Z+9	; 0x09
 57a:	fc 01       	movw	r30, r24
 57c:	20 83       	st	Z, r18
	TIMSK0 = 0x01; // liga int de ov
 57e:	8e e6       	ldi	r24, 0x6E	; 110
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18

	for(int i=0;i<4;i++) _timeouts[i] = Timeout::Timeout();
 588:	1c 82       	std	Y+4, r1	; 0x04
 58a:	1b 82       	std	Y+3, r1	; 0x03
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	9c 81       	ldd	r25, Y+4	; 0x04
 590:	04 97       	sbiw	r24, 0x04	; 4
 592:	3c f5       	brge	.+78     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 594:	ce 01       	movw	r24, r28
 596:	09 96       	adiw	r24, 0x09	; 9
 598:	c5 dd       	rcall	.-1142   	; 0x124 <_ZN7Timeout7TimeoutC1Ev>
 59a:	4d 89       	ldd	r20, Y+21	; 0x15
 59c:	5e 89       	ldd	r21, Y+22	; 0x16
 59e:	2b 81       	ldd	r18, Y+3	; 0x03
 5a0:	3c 81       	ldd	r19, Y+4	; 0x04
 5a2:	c9 01       	movw	r24, r18
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	82 0f       	add	r24, r18
 5aa:	93 1f       	adc	r25, r19
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	84 0f       	add	r24, r20
 5b6:	95 1f       	adc	r25, r21
 5b8:	42 96       	adiw	r24, 0x12	; 18
 5ba:	2c e0       	ldi	r18, 0x0C	; 12
 5bc:	fe 01       	movw	r30, r28
 5be:	39 96       	adiw	r30, 0x09	; 9
 5c0:	dc 01       	movw	r26, r24
 5c2:	01 90       	ld	r0, Z+
 5c4:	0d 92       	st	X+, r0
 5c6:	2a 95       	dec	r18
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5ca:	ce 01       	movw	r24, r28
 5cc:	09 96       	adiw	r24, 0x09	; 9
 5ce:	c7 dd       	rcall	.-1138   	; 0x15e <_ZN7Timeout7TimeoutD1Ev>
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	9c 81       	ldd	r25, Y+4	; 0x04
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	9c 83       	std	Y+4, r25	; 0x04
 5d8:	8b 83       	std	Y+3, r24	; 0x03
 5da:	d8 cf       	rjmp	.-80     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
	{
		TCCR0B = 0x01; // div 1
		div = 1;
	}
	else // #error "Frequency out of range (should be between 62Hz and 250kHz)."
		return;
 5dc:	00 00       	nop
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>

	// calcular ciclos de timer
	Hertz ciclos = (F_CPU/div)/freq;
	if(ciclos > Timer_Top) return; // Frequência solicitada é muito alta!
 5e0:	00 00       	nop

	TCNT0  = _timer_base;
	TIMSK0 = 0x01; // liga int de ov

	for(int i=0;i<4;i++) _timeouts[i] = Timeout::Timeout();
}
 5e2:	6a 96       	adiw	r28, 0x1a	; 26
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	bf 90       	pop	r11
 600:	af 90       	pop	r10
 602:	9f 90       	pop	r9
 604:	8f 90       	pop	r8
 606:	7f 90       	pop	r7
 608:	6f 90       	pop	r6
 60a:	5f 90       	pop	r5
 60c:	4f 90       	pop	r4
 60e:	3f 90       	pop	r3
 610:	2f 90       	pop	r2
 612:	08 95       	ret

00000614 <__vector_23>:
{
	Microseconds start = micros();
	while((micros() - start) <= us);
}

ISR(TIMER0_OVF_vect) { Timer::ovf_isr_handler(); }
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 624:	0f 92       	push	r0
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	18 d0       	rcall	.+48     	; 0x678 <_ZN5Timer15ovf_isr_handlerEv>
 648:	00 00       	nop
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	0f 90       	pop	r0
 668:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 66c:	0f 90       	pop	r0
 66e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <_ZN5Timer15ovf_isr_handlerEv>:
void Timer::ovf_isr_handler() {
 678:	af 92       	push	r10
 67a:	bf 92       	push	r11
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	00 d0       	rcall	.+0      	; 0x68e <_ZN5Timer15ovf_isr_handlerEv+0x16>
 68e:	1f 92       	push	r1
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
	TCNT0  = self()->_timer_base;
 694:	06 e4       	ldi	r16, 0x46	; 70
 696:	10 e0       	ldi	r17, 0x00	; 0
 698:	3e d1       	rcall	.+636    	; 0x916 <_ZN9SingletonI5TimerE4selfEv>
 69a:	fc 01       	movw	r30, r24
 69c:	80 85       	ldd	r24, Z+8	; 0x08
 69e:	91 85       	ldd	r25, Z+9	; 0x09
 6a0:	f8 01       	movw	r30, r16
	self()->_ticks++;
 6a2:	80 83       	st	Z, r24
 6a4:	38 d1       	rcall	.+624    	; 0x916 <_ZN9SingletonI5TimerE4selfEv>
 6a6:	fc 01       	movw	r30, r24
 6a8:	a0 80       	ld	r10, Z
 6aa:	b1 80       	ldd	r11, Z+1	; 0x01
 6ac:	c2 80       	ldd	r12, Z+2	; 0x02
 6ae:	d3 80       	ldd	r13, Z+3	; 0x03
 6b0:	e4 80       	ldd	r14, Z+4	; 0x04
 6b2:	f5 80       	ldd	r15, Z+5	; 0x05
 6b4:	06 81       	ldd	r16, Z+6	; 0x06
 6b6:	17 81       	ldd	r17, Z+7	; 0x07
 6b8:	2a 2d       	mov	r18, r10
 6ba:	3b 2d       	mov	r19, r11
 6bc:	4c 2d       	mov	r20, r12
 6be:	5d 2d       	mov	r21, r13
 6c0:	6e 2d       	mov	r22, r14
 6c2:	7f 2d       	mov	r23, r15
 6c4:	80 2f       	mov	r24, r16
 6c6:	91 2f       	mov	r25, r17
 6c8:	a1 e0       	ldi	r26, 0x01	; 1
 6ca:	66 d2       	rcall	.+1228   	; 0xb98 <__adddi3_s8>
 6cc:	a2 2e       	mov	r10, r18
 6ce:	b3 2e       	mov	r11, r19
 6d0:	c4 2e       	mov	r12, r20
 6d2:	d5 2e       	mov	r13, r21
 6d4:	e6 2e       	mov	r14, r22
 6d6:	f7 2e       	mov	r15, r23
 6d8:	08 2f       	mov	r16, r24
 6da:	19 2f       	mov	r17, r25
 6dc:	a0 82       	st	Z, r10
 6de:	b1 82       	std	Z+1, r11	; 0x01
 6e0:	c2 82       	std	Z+2, r12	; 0x02
 6e2:	d3 82       	std	Z+3, r13	; 0x03
 6e4:	e4 82       	std	Z+4, r14	; 0x04
 6e6:	f5 82       	std	Z+5, r15	; 0x05
 6e8:	06 83       	std	Z+6, r16	; 0x06
 6ea:	17 83       	std	Z+7, r17	; 0x07
	for(uint32_t i=0;i<self()->_timeout_counter;i++)
 6ec:	19 82       	std	Y+1, r1	; 0x01
 6ee:	1a 82       	std	Y+2, r1	; 0x02
 6f0:	1b 82       	std	Y+3, r1	; 0x03
 6f2:	1c 82       	std	Y+4, r1	; 0x04
 6f4:	10 d1       	rcall	.+544    	; 0x916 <_ZN9SingletonI5TimerE4selfEv>
 6f6:	8e 5b       	subi	r24, 0xBE	; 190
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	fc 01       	movw	r30, r24
 6fc:	20 81       	ld	r18, Z
 6fe:	31 81       	ldd	r19, Z+1	; 0x01
 700:	42 81       	ldd	r20, Z+2	; 0x02
 702:	53 81       	ldd	r21, Z+3	; 0x03
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	9a 81       	ldd	r25, Y+2	; 0x02
 70a:	ab 81       	ldd	r26, Y+3	; 0x03
 70c:	bc 81       	ldd	r27, Y+4	; 0x04
 70e:	82 17       	cp	r24, r18
 710:	93 07       	cpc	r25, r19
 712:	a4 07       	cpc	r26, r20
 714:	b5 07       	cpc	r27, r21
 716:	08 f0       	brcs	.+2      	; 0x71a <_ZN5Timer15ovf_isr_handlerEv+0xa2>
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	66 23       	and	r22, r22
		self()->_timeouts[i].checkTimeout();
 71c:	e9 f0       	breq	.+58     	; 0x758 <_ZN5Timer15ovf_isr_handlerEv+0xe0>
 71e:	fb d0       	rcall	.+502    	; 0x916 <_ZN9SingletonI5TimerE4selfEv>
 720:	ac 01       	movw	r20, r24
 722:	29 81       	ldd	r18, Y+1	; 0x01
 724:	3a 81       	ldd	r19, Y+2	; 0x02
 726:	c9 01       	movw	r24, r18
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	82 0f       	add	r24, r18
 72e:	93 1f       	adc	r25, r19
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	42 96       	adiw	r24, 0x12	; 18
 73a:	84 0f       	add	r24, r20
 73c:	95 1f       	adc	r25, r21
 73e:	50 dd       	rcall	.-1376   	; 0x1e0 <_ZN7Timeout7Timeout12checkTimeoutEv>

ISR(TIMER0_OVF_vect) { Timer::ovf_isr_handler(); }
void Timer::ovf_isr_handler() {
	TCNT0  = self()->_timer_base;
	self()->_ticks++;
	for(uint32_t i=0;i<self()->_timeout_counter;i++)
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	9a 81       	ldd	r25, Y+2	; 0x02
 744:	ab 81       	ldd	r26, Y+3	; 0x03
 746:	bc 81       	ldd	r27, Y+4	; 0x04
 748:	01 96       	adiw	r24, 0x01	; 1
 74a:	a1 1d       	adc	r26, r1
 74c:	b1 1d       	adc	r27, r1
 74e:	89 83       	std	Y+1, r24	; 0x01
 750:	9a 83       	std	Y+2, r25	; 0x02
 752:	ab 83       	std	Y+3, r26	; 0x03
 754:	bc 83       	std	Y+4, r27	; 0x04
 756:	ce cf       	rjmp	.-100    	; 0x6f4 <_ZN5Timer15ovf_isr_handlerEv+0x7c>
		self()->_timeouts[i].checkTimeout();
}
 758:	00 00       	nop
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	bf 90       	pop	r11
 774:	af 90       	pop	r10
 776:	08 95       	ret

00000778 <_ZN5Timer10addTimeoutEmPFvvE>:

bool Timer::addTimeout(uint32_t interval, CALLBACK_t callback)
{
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	28 97       	sbiw	r28, 0x08	; 8
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	9a 83       	std	Y+2, r25	; 0x02
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	4b 83       	std	Y+3, r20	; 0x03
 792:	5c 83       	std	Y+4, r21	; 0x04
 794:	6d 83       	std	Y+5, r22	; 0x05
 796:	7e 83       	std	Y+6, r23	; 0x06
 798:	38 87       	std	Y+8, r19	; 0x08
 79a:	2f 83       	std	Y+7, r18	; 0x07
	if (_timeout_counter > 3) return 0;
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	9a 81       	ldd	r25, Y+2	; 0x02
 7a0:	8e 5b       	subi	r24, 0xBE	; 190
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	fc 01       	movw	r30, r24
 7a6:	80 81       	ld	r24, Z
 7a8:	91 81       	ldd	r25, Z+1	; 0x01
 7aa:	a2 81       	ldd	r26, Z+2	; 0x02
 7ac:	b3 81       	ldd	r27, Z+3	; 0x03
 7ae:	04 97       	sbiw	r24, 0x04	; 4
 7b0:	a1 05       	cpc	r26, r1
 7b2:	b1 05       	cpc	r27, r1
 7b4:	10 f0       	brcs	.+4      	; 0x7ba <_ZN5Timer10addTimeoutEmPFvvE+0x42>
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	39 c0       	rjmp	.+114    	; 0x82c <_ZN5Timer10addTimeoutEmPFvvE+0xb4>

	_timeouts[_timeout_counter].config(interval, callback);
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	9a 81       	ldd	r25, Y+2	; 0x02
 7be:	8e 5b       	subi	r24, 0xBE	; 190
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	fc 01       	movw	r30, r24
 7c4:	80 81       	ld	r24, Z
 7c6:	91 81       	ldd	r25, Z+1	; 0x01
 7c8:	a2 81       	ldd	r26, Z+2	; 0x02
 7ca:	b3 81       	ldd	r27, Z+3	; 0x03
 7cc:	9c 01       	movw	r18, r24
 7ce:	c9 01       	movw	r24, r18
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	82 0f       	add	r24, r18
 7d6:	93 1f       	adc	r25, r19
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	42 96       	adiw	r24, 0x12	; 18
 7e2:	29 81       	ldd	r18, Y+1	; 0x01
 7e4:	3a 81       	ldd	r19, Y+2	; 0x02
 7e6:	f9 01       	movw	r30, r18
 7e8:	e8 0f       	add	r30, r24
 7ea:	f9 1f       	adc	r31, r25
 7ec:	2f 81       	ldd	r18, Y+7	; 0x07
 7ee:	38 85       	ldd	r19, Y+8	; 0x08
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	9c 81       	ldd	r25, Y+4	; 0x04
 7f4:	ad 81       	ldd	r26, Y+5	; 0x05
 7f6:	be 81       	ldd	r27, Y+6	; 0x06
 7f8:	ac 01       	movw	r20, r24
 7fa:	bd 01       	movw	r22, r26
 7fc:	cf 01       	movw	r24, r30
 7fe:	bd dc       	rcall	.-1670   	; 0x17a <_ZN7Timeout7Timeout6configEmPFvvE>
	_timeout_counter++;
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	9a 81       	ldd	r25, Y+2	; 0x02
 804:	8e 5b       	subi	r24, 0xBE	; 190
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	fc 01       	movw	r30, r24
 80a:	80 81       	ld	r24, Z
 80c:	91 81       	ldd	r25, Z+1	; 0x01
 80e:	a2 81       	ldd	r26, Z+2	; 0x02
 810:	b3 81       	ldd	r27, Z+3	; 0x03
 812:	01 96       	adiw	r24, 0x01	; 1
 814:	a1 1d       	adc	r26, r1
 816:	b1 1d       	adc	r27, r1
 818:	29 81       	ldd	r18, Y+1	; 0x01
 81a:	3a 81       	ldd	r19, Y+2	; 0x02
 81c:	2e 5b       	subi	r18, 0xBE	; 190
 81e:	3f 4f       	sbci	r19, 0xFF	; 255
 820:	f9 01       	movw	r30, r18
 822:	80 83       	st	Z, r24
 824:	91 83       	std	Z+1, r25	; 0x01
 826:	a2 83       	std	Z+2, r26	; 0x02
 828:	b3 83       	std	Z+3, r27	; 0x03
	return 1;
 82a:	81 e0       	ldi	r24, 0x01	; 1
}
 82c:	28 96       	adiw	r28, 0x08	; 8
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	de bf       	out	0x3e, r29	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	cd bf       	out	0x3d, r28	; 61
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <_ZN5Timer14timeoutManagerEv>:

void Timer::timeoutManager() {
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	00 d0       	rcall	.+0      	; 0x844 <_ZN5Timer14timeoutManagerEv+0x6>
 844:	00 d0       	rcall	.+0      	; 0x846 <_ZN5Timer14timeoutManagerEv+0x8>
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
 84a:	9e 83       	std	Y+6, r25	; 0x06
 84c:	8d 83       	std	Y+5, r24	; 0x05
	for(uint32_t i=0;i<_timeout_counter;i++) {
 84e:	19 82       	std	Y+1, r1	; 0x01
 850:	1a 82       	std	Y+2, r1	; 0x02
 852:	1b 82       	std	Y+3, r1	; 0x03
 854:	1c 82       	std	Y+4, r1	; 0x04
 856:	8d 81       	ldd	r24, Y+5	; 0x05
 858:	9e 81       	ldd	r25, Y+6	; 0x06
 85a:	8e 5b       	subi	r24, 0xBE	; 190
 85c:	9f 4f       	sbci	r25, 0xFF	; 255
 85e:	fc 01       	movw	r30, r24
 860:	20 81       	ld	r18, Z
 862:	31 81       	ldd	r19, Z+1	; 0x01
 864:	42 81       	ldd	r20, Z+2	; 0x02
 866:	53 81       	ldd	r21, Z+3	; 0x03
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	9a 81       	ldd	r25, Y+2	; 0x02
 86c:	ab 81       	ldd	r26, Y+3	; 0x03
 86e:	bc 81       	ldd	r27, Y+4	; 0x04
 870:	82 17       	cp	r24, r18
 872:	93 07       	cpc	r25, r19
 874:	a4 07       	cpc	r26, r20
 876:	b5 07       	cpc	r27, r21
 878:	80 f5       	brcc	.+96     	; 0x8da <_ZN5Timer14timeoutManagerEv+0x9c>
		if (_timeouts[i].event())
 87a:	29 81       	ldd	r18, Y+1	; 0x01
 87c:	3a 81       	ldd	r19, Y+2	; 0x02
 87e:	c9 01       	movw	r24, r18
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	82 0f       	add	r24, r18
 886:	93 1f       	adc	r25, r19
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	42 96       	adiw	r24, 0x12	; 18
 892:	2d 81       	ldd	r18, Y+5	; 0x05
 894:	3e 81       	ldd	r19, Y+6	; 0x06
 896:	82 0f       	add	r24, r18
 898:	93 1f       	adc	r25, r19
 89a:	0b dd       	rcall	.-1514   	; 0x2b2 <_ZN7Timeout7Timeout5eventEv>
 89c:	88 23       	and	r24, r24
 89e:	89 f0       	breq	.+34     	; 0x8c2 <_ZN5Timer14timeoutManagerEv+0x84>
		_timeouts[i].callback();
 8a0:	29 81       	ldd	r18, Y+1	; 0x01
 8a2:	3a 81       	ldd	r19, Y+2	; 0x02
 8a4:	c9 01       	movw	r24, r18
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	82 0f       	add	r24, r18
 8ac:	93 1f       	adc	r25, r19
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	42 96       	adiw	r24, 0x12	; 18
 8b8:	2d 81       	ldd	r18, Y+5	; 0x05
 8ba:	3e 81       	ldd	r19, Y+6	; 0x06
 8bc:	82 0f       	add	r24, r18
 8be:	93 1f       	adc	r25, r19
 8c0:	d3 dc       	rcall	.-1626   	; 0x268 <_ZN7Timeout7Timeout8callbackEv>
	_timeout_counter++;
	return 1;
}

void Timer::timeoutManager() {
	for(uint32_t i=0;i<_timeout_counter;i++) {
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	9a 81       	ldd	r25, Y+2	; 0x02
 8c6:	ab 81       	ldd	r26, Y+3	; 0x03
 8c8:	bc 81       	ldd	r27, Y+4	; 0x04
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	a1 1d       	adc	r26, r1
 8ce:	b1 1d       	adc	r27, r1
 8d0:	89 83       	std	Y+1, r24	; 0x01
 8d2:	9a 83       	std	Y+2, r25	; 0x02
 8d4:	ab 83       	std	Y+3, r26	; 0x03
 8d6:	bc 83       	std	Y+4, r27	; 0x04
 8d8:	be cf       	rjmp	.-132    	; 0x856 <_ZN5Timer14timeoutManagerEv+0x18>
		if (_timeouts[i].event())
		_timeouts[i].callback();
	}
}
 8da:	00 00       	nop
 8dc:	26 96       	adiw	r28, 0x06	; 6
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	cd bf       	out	0x3d, r28	; 61
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	08 95       	ret

000008ee <_ZN9SingletonI5TimerEC1Ev>:
#define SINGLETON_H_

template<typename T>
class Singleton {
public:
    Singleton() { _singleton = static_cast<T*>(this); }
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	1f 92       	push	r1
 8f4:	1f 92       	push	r1
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	9a 83       	std	Y+2, r25	; 0x02
 8fc:	89 83       	std	Y+1, r24	; 0x01
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	9a 81       	ldd	r25, Y+2	; 0x02
 902:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <__data_end+0x1>
 906:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
 90a:	00 00       	nop
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	08 95       	ret

00000916 <_ZN9SingletonI5TimerE4selfEv>:
    ~Singleton() { _singleton = 0; }

    static T * self() { return _singleton; }
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 922:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	08 95       	ret

0000092c <_Z10toogle_ledv>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "Timer.h"

bool led_state = 0;
void toogle_led() {
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
	if (led_state) PORTH &= ~(1 << PH5);
 934:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <led_state>
 938:	88 23       	and	r24, r24
 93a:	51 f0       	breq	.+20     	; 0x950 <_Z10toogle_ledv+0x24>
 93c:	82 e0       	ldi	r24, 0x02	; 2
 93e:	91 e0       	ldi	r25, 0x01	; 1
 940:	22 e0       	ldi	r18, 0x02	; 2
 942:	31 e0       	ldi	r19, 0x01	; 1
 944:	f9 01       	movw	r30, r18
 946:	20 81       	ld	r18, Z
 948:	2f 7d       	andi	r18, 0xDF	; 223
 94a:	fc 01       	movw	r30, r24
 94c:	20 83       	st	Z, r18
 94e:	09 c0       	rjmp	.+18     	; 0x962 <_Z10toogle_ledv+0x36>
	else PORTH |= (1 << PH5);
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	91 e0       	ldi	r25, 0x01	; 1
 954:	22 e0       	ldi	r18, 0x02	; 2
 956:	31 e0       	ldi	r19, 0x01	; 1
 958:	f9 01       	movw	r30, r18
 95a:	20 81       	ld	r18, Z
 95c:	20 62       	ori	r18, 0x20	; 32
 95e:	fc 01       	movw	r30, r24
 960:	20 83       	st	Z, r18
	led_state = !led_state;
 962:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <led_state>
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	89 27       	eor	r24, r25
 96a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <led_state>
}
 96e:	00 00       	nop
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	08 95       	ret

00000976 <main>:

int main(void) {
 976:	cf 93       	push	r28
 978:	df 93       	push	r29
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
 97e:	c4 55       	subi	r28, 0x54	; 84
 980:	d1 09       	sbc	r29, r1
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61

    // Set input and output ports
    DDRE &= ~(1 << DDE5);				// Set 0 to DDRE5 (PE5)
 98c:	8d e2       	ldi	r24, 0x2D	; 45
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	2d e2       	ldi	r18, 0x2D	; 45
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	f9 01       	movw	r30, r18
 996:	20 81       	ld	r18, Z
 998:	2f 7d       	andi	r18, 0xDF	; 223
 99a:	fc 01       	movw	r30, r24
 99c:	20 83       	st	Z, r18
    DDRH |= (1 << DDH5);				// Set 1 to DDRH5 (PH5)
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	91 e0       	ldi	r25, 0x01	; 1
 9a2:	21 e0       	ldi	r18, 0x01	; 1
 9a4:	31 e0       	ldi	r19, 0x01	; 1
 9a6:	f9 01       	movw	r30, r18
 9a8:	20 81       	ld	r18, Z
 9aa:	20 62       	ori	r18, 0x20	; 32
 9ac:	fc 01       	movw	r30, r24
 9ae:	20 83       	st	Z, r18

	Timer timer = Timer(1000);
 9b0:	ce 01       	movw	r24, r28
 9b2:	0f 96       	adiw	r24, 0x0f	; 15
 9b4:	48 ee       	ldi	r20, 0xE8	; 232
 9b6:	53 e0       	ldi	r21, 0x03	; 3
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	8b dc       	rcall	.-1770   	; 0x2d4 <_ZN5TimerC1Em>
	timer.addTimeout(2000, &toogle_led);
 9be:	ce 01       	movw	r24, r28
 9c0:	0f 96       	adiw	r24, 0x0f	; 15
 9c2:	26 e9       	ldi	r18, 0x96	; 150
 9c4:	34 e0       	ldi	r19, 0x04	; 4
 9c6:	40 ed       	ldi	r20, 0xD0	; 208
 9c8:	57 e0       	ldi	r21, 0x07	; 7
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	d4 de       	rcall	.-600    	; 0x778 <_ZN5Timer10addTimeoutEmPFvvE>
	sei();

    while (true) {

    	timer.timeoutManager();
 9d0:	78 94       	sei
 9d2:	ce 01       	movw	r24, r28
 9d4:	0f 96       	adiw	r24, 0x0f	; 15
 9d6:	33 df       	rcall	.-410    	; 0x83e <_ZN5Timer14timeoutManagerEv>
 9d8:	80 e0       	ldi	r24, 0x00	; 0
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	a8 ec       	ldi	r26, 0xC8	; 200
 9de:	b2 e4       	ldi	r27, 0x42	; 66
 9e0:	89 83       	std	Y+1, r24	; 0x01
 9e2:	9a 83       	std	Y+2, r25	; 0x02
 9e4:	ab 83       	std	Y+3, r26	; 0x03
 9e6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	4a e7       	ldi	r20, 0x7A	; 122
 9ee:	55 e4       	ldi	r21, 0x45	; 69
 9f0:	69 81       	ldd	r22, Y+1	; 0x01
 9f2:	7a 81       	ldd	r23, Y+2	; 0x02
 9f4:	8b 81       	ldd	r24, Y+3	; 0x03
 9f6:	9c 81       	ldd	r25, Y+4	; 0x04
 9f8:	6b d1       	rcall	.+726    	; 0xcd0 <__mulsf3>
 9fa:	dc 01       	movw	r26, r24
 9fc:	cb 01       	movw	r24, r22
 9fe:	8d 83       	std	Y+5, r24	; 0x05
 a00:	9e 83       	std	Y+6, r25	; 0x06
 a02:	af 83       	std	Y+7, r26	; 0x07
 a04:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 a06:	20 e0       	ldi	r18, 0x00	; 0
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	40 e8       	ldi	r20, 0x80	; 128
 a0c:	5f e3       	ldi	r21, 0x3F	; 63
 a0e:	6d 81       	ldd	r22, Y+5	; 0x05
 a10:	7e 81       	ldd	r23, Y+6	; 0x06
 a12:	8f 81       	ldd	r24, Y+7	; 0x07
 a14:	98 85       	ldd	r25, Y+8	; 0x08
 a16:	db d0       	rcall	.+438    	; 0xbce <__cmpsf2>
 a18:	88 23       	and	r24, r24
 a1a:	2c f4       	brge	.+10     	; 0xa26 <main+0xb0>
		__ticks = 1;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	9a 87       	std	Y+10, r25	; 0x0a
 a22:	89 87       	std	Y+9, r24	; 0x09
 a24:	3b c0       	rjmp	.+118    	; 0xa9c <main+0x126>
	else if (__tmp > 65535)
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	3f ef       	ldi	r19, 0xFF	; 255
 a2a:	4f e7       	ldi	r20, 0x7F	; 127
 a2c:	57 e4       	ldi	r21, 0x47	; 71
 a2e:	6d 81       	ldd	r22, Y+5	; 0x05
 a30:	7e 81       	ldd	r23, Y+6	; 0x06
 a32:	8f 81       	ldd	r24, Y+7	; 0x07
 a34:	98 85       	ldd	r25, Y+8	; 0x08
 a36:	48 d1       	rcall	.+656    	; 0xcc8 <__gesf2>
 a38:	18 16       	cp	r1, r24
 a3a:	3c f5       	brge	.+78     	; 0xa8a <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 a3c:	20 e0       	ldi	r18, 0x00	; 0
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	40 e2       	ldi	r20, 0x20	; 32
 a42:	51 e4       	ldi	r21, 0x41	; 65
 a44:	69 81       	ldd	r22, Y+1	; 0x01
 a46:	7a 81       	ldd	r23, Y+2	; 0x02
 a48:	8b 81       	ldd	r24, Y+3	; 0x03
 a4a:	9c 81       	ldd	r25, Y+4	; 0x04
 a4c:	41 d1       	rcall	.+642    	; 0xcd0 <__mulsf3>
 a4e:	dc 01       	movw	r26, r24
 a50:	cb 01       	movw	r24, r22
 a52:	bc 01       	movw	r22, r24
 a54:	cd 01       	movw	r24, r26
 a56:	bf d0       	rcall	.+382    	; 0xbd6 <__fixunssfsi>
 a58:	dc 01       	movw	r26, r24
 a5a:	cb 01       	movw	r24, r22
 a5c:	9a 87       	std	Y+10, r25	; 0x0a
 a5e:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 a60:	89 85       	ldd	r24, Y+9	; 0x09
 a62:	9a 85       	ldd	r25, Y+10	; 0x0a
 a64:	89 2b       	or	r24, r25
 a66:	09 f4       	brne	.+2      	; 0xa6a <main+0xf4>
 a68:	b4 cf       	rjmp	.-152    	; 0x9d2 <main+0x5c>
 a6a:	80 e9       	ldi	r24, 0x90	; 144
 a6c:	91 e0       	ldi	r25, 0x01	; 1
 a6e:	9c 87       	std	Y+12, r25	; 0x0c
 a70:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 a72:	8b 85       	ldd	r24, Y+11	; 0x0b
 a74:	9c 85       	ldd	r25, Y+12	; 0x0c
 a76:	01 97       	sbiw	r24, 0x01	; 1
 a78:	f1 f7       	brne	.-4      	; 0xa76 <main+0x100>
 a7a:	9c 87       	std	Y+12, r25	; 0x0c
 a7c:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a7e:	89 85       	ldd	r24, Y+9	; 0x09
 a80:	9a 85       	ldd	r25, Y+10	; 0x0a
 a82:	01 97       	sbiw	r24, 0x01	; 1
 a84:	9a 87       	std	Y+10, r25	; 0x0a
 a86:	89 87       	std	Y+9, r24	; 0x09
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a88:	eb cf       	rjmp	.-42     	; 0xa60 <main+0xea>
 a8a:	6d 81       	ldd	r22, Y+5	; 0x05
 a8c:	7e 81       	ldd	r23, Y+6	; 0x06
 a8e:	8f 81       	ldd	r24, Y+7	; 0x07
 a90:	98 85       	ldd	r25, Y+8	; 0x08
 a92:	a1 d0       	rcall	.+322    	; 0xbd6 <__fixunssfsi>
 a94:	dc 01       	movw	r26, r24
 a96:	cb 01       	movw	r24, r22
 a98:	9a 87       	std	Y+10, r25	; 0x0a
 a9a:	89 87       	std	Y+9, r24	; 0x09
 a9c:	89 85       	ldd	r24, Y+9	; 0x09
 a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
 aa0:	9e 87       	std	Y+14, r25	; 0x0e
 aa2:	8d 87       	std	Y+13, r24	; 0x0d
 aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
 aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
 aa8:	01 97       	sbiw	r24, 0x01	; 1
 aaa:	f1 f7       	brne	.-4      	; 0xaa8 <main+0x132>
 aac:	9e 87       	std	Y+14, r25	; 0x0e
 aae:	8d 87       	std	Y+13, r24	; 0x0d

	Timer timer = Timer(1000);
	timer.addTimeout(2000, &toogle_led);
	sei();

    while (true) {
 ab0:	90 cf       	rjmp	.-224    	; 0x9d2 <main+0x5c>

00000ab2 <__udivmodsi4>:
 ab2:	a1 e2       	ldi	r26, 0x21	; 33
 ab4:	1a 2e       	mov	r1, r26
 ab6:	aa 1b       	sub	r26, r26
 ab8:	bb 1b       	sub	r27, r27
 aba:	fd 01       	movw	r30, r26
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <__udivmodsi4_ep>

00000abe <__udivmodsi4_loop>:
 abe:	aa 1f       	adc	r26, r26
 ac0:	bb 1f       	adc	r27, r27
 ac2:	ee 1f       	adc	r30, r30
 ac4:	ff 1f       	adc	r31, r31
 ac6:	a2 17       	cp	r26, r18
 ac8:	b3 07       	cpc	r27, r19
 aca:	e4 07       	cpc	r30, r20
 acc:	f5 07       	cpc	r31, r21
 ace:	20 f0       	brcs	.+8      	; 0xad8 <__udivmodsi4_ep>
 ad0:	a2 1b       	sub	r26, r18
 ad2:	b3 0b       	sbc	r27, r19
 ad4:	e4 0b       	sbc	r30, r20
 ad6:	f5 0b       	sbc	r31, r21

00000ad8 <__udivmodsi4_ep>:
 ad8:	66 1f       	adc	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	1a 94       	dec	r1
 ae2:	69 f7       	brne	.-38     	; 0xabe <__udivmodsi4_loop>
 ae4:	60 95       	com	r22
 ae6:	70 95       	com	r23
 ae8:	80 95       	com	r24
 aea:	90 95       	com	r25
 aec:	9b 01       	movw	r18, r22
 aee:	ac 01       	movw	r20, r24
 af0:	bd 01       	movw	r22, r26
 af2:	cf 01       	movw	r24, r30
 af4:	08 95       	ret

00000af6 <__muldi3>:
 af6:	df 93       	push	r29
 af8:	cf 93       	push	r28
 afa:	1f 93       	push	r17
 afc:	0f 93       	push	r16
 afe:	9a 9d       	mul	r25, r10
 b00:	f0 2d       	mov	r31, r0
 b02:	21 9f       	mul	r18, r17
 b04:	f0 0d       	add	r31, r0
 b06:	8b 9d       	mul	r24, r11
 b08:	f0 0d       	add	r31, r0
 b0a:	8a 9d       	mul	r24, r10
 b0c:	e0 2d       	mov	r30, r0
 b0e:	f1 0d       	add	r31, r1
 b10:	03 9f       	mul	r16, r19
 b12:	f0 0d       	add	r31, r0
 b14:	02 9f       	mul	r16, r18
 b16:	e0 0d       	add	r30, r0
 b18:	f1 1d       	adc	r31, r1
 b1a:	4e 9d       	mul	r20, r14
 b1c:	e0 0d       	add	r30, r0
 b1e:	f1 1d       	adc	r31, r1
 b20:	5e 9d       	mul	r21, r14
 b22:	f0 0d       	add	r31, r0
 b24:	4f 9d       	mul	r20, r15
 b26:	f0 0d       	add	r31, r0
 b28:	7f 93       	push	r23
 b2a:	6f 93       	push	r22
 b2c:	bf 92       	push	r11
 b2e:	af 92       	push	r10
 b30:	5f 93       	push	r21
 b32:	4f 93       	push	r20
 b34:	d5 01       	movw	r26, r10
 b36:	3c d0       	rcall	.+120    	; 0xbb0 <__umulhisi3>
 b38:	8b 01       	movw	r16, r22
 b3a:	ac 01       	movw	r20, r24
 b3c:	d7 01       	movw	r26, r14
 b3e:	38 d0       	rcall	.+112    	; 0xbb0 <__umulhisi3>
 b40:	eb 01       	movw	r28, r22
 b42:	e8 0f       	add	r30, r24
 b44:	f9 1f       	adc	r31, r25
 b46:	d6 01       	movw	r26, r12
 b48:	1f d0       	rcall	.+62     	; 0xb88 <__muldi3_6>
 b4a:	2f 91       	pop	r18
 b4c:	3f 91       	pop	r19
 b4e:	d6 01       	movw	r26, r12
 b50:	2f d0       	rcall	.+94     	; 0xbb0 <__umulhisi3>
 b52:	c6 0f       	add	r28, r22
 b54:	d7 1f       	adc	r29, r23
 b56:	e8 1f       	adc	r30, r24
 b58:	f9 1f       	adc	r31, r25
 b5a:	af 91       	pop	r26
 b5c:	bf 91       	pop	r27
 b5e:	14 d0       	rcall	.+40     	; 0xb88 <__muldi3_6>
 b60:	2f 91       	pop	r18
 b62:	3f 91       	pop	r19
 b64:	25 d0       	rcall	.+74     	; 0xbb0 <__umulhisi3>
 b66:	c6 0f       	add	r28, r22
 b68:	d7 1f       	adc	r29, r23
 b6a:	e8 1f       	adc	r30, r24
 b6c:	f9 1f       	adc	r31, r25
 b6e:	d6 01       	movw	r26, r12
 b70:	1f d0       	rcall	.+62     	; 0xbb0 <__umulhisi3>
 b72:	e6 0f       	add	r30, r22
 b74:	f7 1f       	adc	r31, r23
 b76:	98 01       	movw	r18, r16
 b78:	be 01       	movw	r22, r28
 b7a:	cf 01       	movw	r24, r30
 b7c:	11 24       	eor	r1, r1
 b7e:	0f 91       	pop	r16
 b80:	1f 91       	pop	r17
 b82:	cf 91       	pop	r28
 b84:	df 91       	pop	r29
 b86:	08 95       	ret

00000b88 <__muldi3_6>:
 b88:	13 d0       	rcall	.+38     	; 0xbb0 <__umulhisi3>
 b8a:	46 0f       	add	r20, r22
 b8c:	57 1f       	adc	r21, r23
 b8e:	c8 1f       	adc	r28, r24
 b90:	d9 1f       	adc	r29, r25
 b92:	08 f4       	brcc	.+2      	; 0xb96 <__muldi3_6+0xe>
 b94:	31 96       	adiw	r30, 0x01	; 1
 b96:	08 95       	ret

00000b98 <__adddi3_s8>:
 b98:	00 24       	eor	r0, r0
 b9a:	a7 fd       	sbrc	r26, 7
 b9c:	00 94       	com	r0
 b9e:	2a 0f       	add	r18, r26
 ba0:	30 1d       	adc	r19, r0
 ba2:	40 1d       	adc	r20, r0
 ba4:	50 1d       	adc	r21, r0
 ba6:	60 1d       	adc	r22, r0
 ba8:	70 1d       	adc	r23, r0
 baa:	80 1d       	adc	r24, r0
 bac:	90 1d       	adc	r25, r0
 bae:	08 95       	ret

00000bb0 <__umulhisi3>:
 bb0:	a2 9f       	mul	r26, r18
 bb2:	b0 01       	movw	r22, r0
 bb4:	b3 9f       	mul	r27, r19
 bb6:	c0 01       	movw	r24, r0
 bb8:	a3 9f       	mul	r26, r19
 bba:	70 0d       	add	r23, r0
 bbc:	81 1d       	adc	r24, r1
 bbe:	11 24       	eor	r1, r1
 bc0:	91 1d       	adc	r25, r1
 bc2:	b2 9f       	mul	r27, r18
 bc4:	70 0d       	add	r23, r0
 bc6:	81 1d       	adc	r24, r1
 bc8:	11 24       	eor	r1, r1
 bca:	91 1d       	adc	r25, r1
 bcc:	08 95       	ret

00000bce <__cmpsf2>:
 bce:	2f d0       	rcall	.+94     	; 0xc2e <__fp_cmp>
 bd0:	08 f4       	brcc	.+2      	; 0xbd4 <__cmpsf2+0x6>
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	08 95       	ret

00000bd6 <__fixunssfsi>:
 bd6:	57 d0       	rcall	.+174    	; 0xc86 <__fp_splitA>
 bd8:	88 f0       	brcs	.+34     	; 0xbfc <__fixunssfsi+0x26>
 bda:	9f 57       	subi	r25, 0x7F	; 127
 bdc:	90 f0       	brcs	.+36     	; 0xc02 <__fixunssfsi+0x2c>
 bde:	b9 2f       	mov	r27, r25
 be0:	99 27       	eor	r25, r25
 be2:	b7 51       	subi	r27, 0x17	; 23
 be4:	a0 f0       	brcs	.+40     	; 0xc0e <__fixunssfsi+0x38>
 be6:	d1 f0       	breq	.+52     	; 0xc1c <__fixunssfsi+0x46>
 be8:	66 0f       	add	r22, r22
 bea:	77 1f       	adc	r23, r23
 bec:	88 1f       	adc	r24, r24
 bee:	99 1f       	adc	r25, r25
 bf0:	1a f0       	brmi	.+6      	; 0xbf8 <__fixunssfsi+0x22>
 bf2:	ba 95       	dec	r27
 bf4:	c9 f7       	brne	.-14     	; 0xbe8 <__fixunssfsi+0x12>
 bf6:	12 c0       	rjmp	.+36     	; 0xc1c <__fixunssfsi+0x46>
 bf8:	b1 30       	cpi	r27, 0x01	; 1
 bfa:	81 f0       	breq	.+32     	; 0xc1c <__fixunssfsi+0x46>
 bfc:	5e d0       	rcall	.+188    	; 0xcba <__fp_zero>
 bfe:	b1 e0       	ldi	r27, 0x01	; 1
 c00:	08 95       	ret
 c02:	5b c0       	rjmp	.+182    	; 0xcba <__fp_zero>
 c04:	67 2f       	mov	r22, r23
 c06:	78 2f       	mov	r23, r24
 c08:	88 27       	eor	r24, r24
 c0a:	b8 5f       	subi	r27, 0xF8	; 248
 c0c:	39 f0       	breq	.+14     	; 0xc1c <__fixunssfsi+0x46>
 c0e:	b9 3f       	cpi	r27, 0xF9	; 249
 c10:	cc f3       	brlt	.-14     	; 0xc04 <__fixunssfsi+0x2e>
 c12:	86 95       	lsr	r24
 c14:	77 95       	ror	r23
 c16:	67 95       	ror	r22
 c18:	b3 95       	inc	r27
 c1a:	d9 f7       	brne	.-10     	; 0xc12 <__fixunssfsi+0x3c>
 c1c:	3e f4       	brtc	.+14     	; 0xc2c <__fixunssfsi+0x56>
 c1e:	90 95       	com	r25
 c20:	80 95       	com	r24
 c22:	70 95       	com	r23
 c24:	61 95       	neg	r22
 c26:	7f 4f       	sbci	r23, 0xFF	; 255
 c28:	8f 4f       	sbci	r24, 0xFF	; 255
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	08 95       	ret

00000c2e <__fp_cmp>:
 c2e:	99 0f       	add	r25, r25
 c30:	00 08       	sbc	r0, r0
 c32:	55 0f       	add	r21, r21
 c34:	aa 0b       	sbc	r26, r26
 c36:	e0 e8       	ldi	r30, 0x80	; 128
 c38:	fe ef       	ldi	r31, 0xFE	; 254
 c3a:	16 16       	cp	r1, r22
 c3c:	17 06       	cpc	r1, r23
 c3e:	e8 07       	cpc	r30, r24
 c40:	f9 07       	cpc	r31, r25
 c42:	c0 f0       	brcs	.+48     	; 0xc74 <__fp_cmp+0x46>
 c44:	12 16       	cp	r1, r18
 c46:	13 06       	cpc	r1, r19
 c48:	e4 07       	cpc	r30, r20
 c4a:	f5 07       	cpc	r31, r21
 c4c:	98 f0       	brcs	.+38     	; 0xc74 <__fp_cmp+0x46>
 c4e:	62 1b       	sub	r22, r18
 c50:	73 0b       	sbc	r23, r19
 c52:	84 0b       	sbc	r24, r20
 c54:	95 0b       	sbc	r25, r21
 c56:	39 f4       	brne	.+14     	; 0xc66 <__fp_cmp+0x38>
 c58:	0a 26       	eor	r0, r26
 c5a:	61 f0       	breq	.+24     	; 0xc74 <__fp_cmp+0x46>
 c5c:	23 2b       	or	r18, r19
 c5e:	24 2b       	or	r18, r20
 c60:	25 2b       	or	r18, r21
 c62:	21 f4       	brne	.+8      	; 0xc6c <__fp_cmp+0x3e>
 c64:	08 95       	ret
 c66:	0a 26       	eor	r0, r26
 c68:	09 f4       	brne	.+2      	; 0xc6c <__fp_cmp+0x3e>
 c6a:	a1 40       	sbci	r26, 0x01	; 1
 c6c:	a6 95       	lsr	r26
 c6e:	8f ef       	ldi	r24, 0xFF	; 255
 c70:	81 1d       	adc	r24, r1
 c72:	81 1d       	adc	r24, r1
 c74:	08 95       	ret

00000c76 <__fp_split3>:
 c76:	57 fd       	sbrc	r21, 7
 c78:	90 58       	subi	r25, 0x80	; 128
 c7a:	44 0f       	add	r20, r20
 c7c:	55 1f       	adc	r21, r21
 c7e:	59 f0       	breq	.+22     	; 0xc96 <__fp_splitA+0x10>
 c80:	5f 3f       	cpi	r21, 0xFF	; 255
 c82:	71 f0       	breq	.+28     	; 0xca0 <__fp_splitA+0x1a>
 c84:	47 95       	ror	r20

00000c86 <__fp_splitA>:
 c86:	88 0f       	add	r24, r24
 c88:	97 fb       	bst	r25, 7
 c8a:	99 1f       	adc	r25, r25
 c8c:	61 f0       	breq	.+24     	; 0xca6 <__fp_splitA+0x20>
 c8e:	9f 3f       	cpi	r25, 0xFF	; 255
 c90:	79 f0       	breq	.+30     	; 0xcb0 <__fp_splitA+0x2a>
 c92:	87 95       	ror	r24
 c94:	08 95       	ret
 c96:	12 16       	cp	r1, r18
 c98:	13 06       	cpc	r1, r19
 c9a:	14 06       	cpc	r1, r20
 c9c:	55 1f       	adc	r21, r21
 c9e:	f2 cf       	rjmp	.-28     	; 0xc84 <__fp_split3+0xe>
 ca0:	46 95       	lsr	r20
 ca2:	f1 df       	rcall	.-30     	; 0xc86 <__fp_splitA>
 ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <__fp_splitA+0x30>
 ca6:	16 16       	cp	r1, r22
 ca8:	17 06       	cpc	r1, r23
 caa:	18 06       	cpc	r1, r24
 cac:	99 1f       	adc	r25, r25
 cae:	f1 cf       	rjmp	.-30     	; 0xc92 <__fp_splitA+0xc>
 cb0:	86 95       	lsr	r24
 cb2:	71 05       	cpc	r23, r1
 cb4:	61 05       	cpc	r22, r1
 cb6:	08 94       	sec
 cb8:	08 95       	ret

00000cba <__fp_zero>:
 cba:	e8 94       	clt

00000cbc <__fp_szero>:
 cbc:	bb 27       	eor	r27, r27
 cbe:	66 27       	eor	r22, r22
 cc0:	77 27       	eor	r23, r23
 cc2:	cb 01       	movw	r24, r22
 cc4:	97 f9       	bld	r25, 7
 cc6:	08 95       	ret

00000cc8 <__gesf2>:
 cc8:	b2 df       	rcall	.-156    	; 0xc2e <__fp_cmp>
 cca:	08 f4       	brcc	.+2      	; 0xcce <__gesf2+0x6>
 ccc:	8f ef       	ldi	r24, 0xFF	; 255
 cce:	08 95       	ret

00000cd0 <__mulsf3>:
 cd0:	0b d0       	rcall	.+22     	; 0xce8 <__mulsf3x>
 cd2:	78 c0       	rjmp	.+240    	; 0xdc4 <__fp_round>
 cd4:	69 d0       	rcall	.+210    	; 0xda8 <__fp_pscA>
 cd6:	28 f0       	brcs	.+10     	; 0xce2 <__mulsf3+0x12>
 cd8:	6e d0       	rcall	.+220    	; 0xdb6 <__fp_pscB>
 cda:	18 f0       	brcs	.+6      	; 0xce2 <__mulsf3+0x12>
 cdc:	95 23       	and	r25, r21
 cde:	09 f0       	breq	.+2      	; 0xce2 <__mulsf3+0x12>
 ce0:	5a c0       	rjmp	.+180    	; 0xd96 <__fp_inf>
 ce2:	5f c0       	rjmp	.+190    	; 0xda2 <__fp_nan>
 ce4:	11 24       	eor	r1, r1
 ce6:	ea cf       	rjmp	.-44     	; 0xcbc <__fp_szero>

00000ce8 <__mulsf3x>:
 ce8:	c6 df       	rcall	.-116    	; 0xc76 <__fp_split3>
 cea:	a0 f3       	brcs	.-24     	; 0xcd4 <__mulsf3+0x4>

00000cec <__mulsf3_pse>:
 cec:	95 9f       	mul	r25, r21
 cee:	d1 f3       	breq	.-12     	; 0xce4 <__mulsf3+0x14>
 cf0:	95 0f       	add	r25, r21
 cf2:	50 e0       	ldi	r21, 0x00	; 0
 cf4:	55 1f       	adc	r21, r21
 cf6:	62 9f       	mul	r22, r18
 cf8:	f0 01       	movw	r30, r0
 cfa:	72 9f       	mul	r23, r18
 cfc:	bb 27       	eor	r27, r27
 cfe:	f0 0d       	add	r31, r0
 d00:	b1 1d       	adc	r27, r1
 d02:	63 9f       	mul	r22, r19
 d04:	aa 27       	eor	r26, r26
 d06:	f0 0d       	add	r31, r0
 d08:	b1 1d       	adc	r27, r1
 d0a:	aa 1f       	adc	r26, r26
 d0c:	64 9f       	mul	r22, r20
 d0e:	66 27       	eor	r22, r22
 d10:	b0 0d       	add	r27, r0
 d12:	a1 1d       	adc	r26, r1
 d14:	66 1f       	adc	r22, r22
 d16:	82 9f       	mul	r24, r18
 d18:	22 27       	eor	r18, r18
 d1a:	b0 0d       	add	r27, r0
 d1c:	a1 1d       	adc	r26, r1
 d1e:	62 1f       	adc	r22, r18
 d20:	73 9f       	mul	r23, r19
 d22:	b0 0d       	add	r27, r0
 d24:	a1 1d       	adc	r26, r1
 d26:	62 1f       	adc	r22, r18
 d28:	83 9f       	mul	r24, r19
 d2a:	a0 0d       	add	r26, r0
 d2c:	61 1d       	adc	r22, r1
 d2e:	22 1f       	adc	r18, r18
 d30:	74 9f       	mul	r23, r20
 d32:	33 27       	eor	r19, r19
 d34:	a0 0d       	add	r26, r0
 d36:	61 1d       	adc	r22, r1
 d38:	23 1f       	adc	r18, r19
 d3a:	84 9f       	mul	r24, r20
 d3c:	60 0d       	add	r22, r0
 d3e:	21 1d       	adc	r18, r1
 d40:	82 2f       	mov	r24, r18
 d42:	76 2f       	mov	r23, r22
 d44:	6a 2f       	mov	r22, r26
 d46:	11 24       	eor	r1, r1
 d48:	9f 57       	subi	r25, 0x7F	; 127
 d4a:	50 40       	sbci	r21, 0x00	; 0
 d4c:	8a f0       	brmi	.+34     	; 0xd70 <__mulsf3_pse+0x84>
 d4e:	e1 f0       	breq	.+56     	; 0xd88 <__mulsf3_pse+0x9c>
 d50:	88 23       	and	r24, r24
 d52:	4a f0       	brmi	.+18     	; 0xd66 <__mulsf3_pse+0x7a>
 d54:	ee 0f       	add	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	bb 1f       	adc	r27, r27
 d5a:	66 1f       	adc	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	91 50       	subi	r25, 0x01	; 1
 d62:	50 40       	sbci	r21, 0x00	; 0
 d64:	a9 f7       	brne	.-22     	; 0xd50 <__mulsf3_pse+0x64>
 d66:	9e 3f       	cpi	r25, 0xFE	; 254
 d68:	51 05       	cpc	r21, r1
 d6a:	70 f0       	brcs	.+28     	; 0xd88 <__mulsf3_pse+0x9c>
 d6c:	14 c0       	rjmp	.+40     	; 0xd96 <__fp_inf>
 d6e:	a6 cf       	rjmp	.-180    	; 0xcbc <__fp_szero>
 d70:	5f 3f       	cpi	r21, 0xFF	; 255
 d72:	ec f3       	brlt	.-6      	; 0xd6e <__mulsf3_pse+0x82>
 d74:	98 3e       	cpi	r25, 0xE8	; 232
 d76:	dc f3       	brlt	.-10     	; 0xd6e <__mulsf3_pse+0x82>
 d78:	86 95       	lsr	r24
 d7a:	77 95       	ror	r23
 d7c:	67 95       	ror	r22
 d7e:	b7 95       	ror	r27
 d80:	f7 95       	ror	r31
 d82:	e7 95       	ror	r30
 d84:	9f 5f       	subi	r25, 0xFF	; 255
 d86:	c1 f7       	brne	.-16     	; 0xd78 <__mulsf3_pse+0x8c>
 d88:	fe 2b       	or	r31, r30
 d8a:	88 0f       	add	r24, r24
 d8c:	91 1d       	adc	r25, r1
 d8e:	96 95       	lsr	r25
 d90:	87 95       	ror	r24
 d92:	97 f9       	bld	r25, 7
 d94:	08 95       	ret

00000d96 <__fp_inf>:
 d96:	97 f9       	bld	r25, 7
 d98:	9f 67       	ori	r25, 0x7F	; 127
 d9a:	80 e8       	ldi	r24, 0x80	; 128
 d9c:	70 e0       	ldi	r23, 0x00	; 0
 d9e:	60 e0       	ldi	r22, 0x00	; 0
 da0:	08 95       	ret

00000da2 <__fp_nan>:
 da2:	9f ef       	ldi	r25, 0xFF	; 255
 da4:	80 ec       	ldi	r24, 0xC0	; 192
 da6:	08 95       	ret

00000da8 <__fp_pscA>:
 da8:	00 24       	eor	r0, r0
 daa:	0a 94       	dec	r0
 dac:	16 16       	cp	r1, r22
 dae:	17 06       	cpc	r1, r23
 db0:	18 06       	cpc	r1, r24
 db2:	09 06       	cpc	r0, r25
 db4:	08 95       	ret

00000db6 <__fp_pscB>:
 db6:	00 24       	eor	r0, r0
 db8:	0a 94       	dec	r0
 dba:	12 16       	cp	r1, r18
 dbc:	13 06       	cpc	r1, r19
 dbe:	14 06       	cpc	r1, r20
 dc0:	05 06       	cpc	r0, r21
 dc2:	08 95       	ret

00000dc4 <__fp_round>:
 dc4:	09 2e       	mov	r0, r25
 dc6:	03 94       	inc	r0
 dc8:	00 0c       	add	r0, r0
 dca:	11 f4       	brne	.+4      	; 0xdd0 <__fp_round+0xc>
 dcc:	88 23       	and	r24, r24
 dce:	52 f0       	brmi	.+20     	; 0xde4 <__fp_round+0x20>
 dd0:	bb 0f       	add	r27, r27
 dd2:	40 f4       	brcc	.+16     	; 0xde4 <__fp_round+0x20>
 dd4:	bf 2b       	or	r27, r31
 dd6:	11 f4       	brne	.+4      	; 0xddc <__fp_round+0x18>
 dd8:	60 ff       	sbrs	r22, 0
 dda:	04 c0       	rjmp	.+8      	; 0xde4 <__fp_round+0x20>
 ddc:	6f 5f       	subi	r22, 0xFF	; 255
 dde:	7f 4f       	sbci	r23, 0xFF	; 255
 de0:	8f 4f       	sbci	r24, 0xFF	; 255
 de2:	9f 4f       	sbci	r25, 0xFF	; 255
 de4:	08 95       	ret

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>
