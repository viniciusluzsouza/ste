
TimerClass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00000d80  00000e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800228  00800228  00000e3c  2**0
                  ALLOC
  3 .stab         000015e4  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001532  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003952  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003964  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000bbc  00000000  00000000  000039a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b1a  00000000  00000000  00004560  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000507a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8e c2       	rjmp	.+1308   	; 0x57a <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e2       	ldi	r26, 0x28	; 40
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 32       	cpi	r26, 0x2B	; 43
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	f6 d3       	rcall	.+2028   	; 0x90c <main>
 120:	2d c6       	rjmp	.+3162   	; 0xd7c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_ZN7TimeoutC1Ev>:
 *      Author: vini
 */

#include "Timeout.h"

Timeout::Timeout() {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
	// TODO Auto-generated constructor stub

}
 134:	00 00       	nop
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <_ZN7Timeout6configEmPFvvE>:
Timeout::~Timeout() {
	// TODO Auto-generated destructor stub
}

void Timeout::config(uint32_t interval, CALLBACK_t callback)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	28 97       	sbiw	r28, 0x08	; 8
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	4b 83       	std	Y+3, r20	; 0x03
 15a:	5c 83       	std	Y+4, r21	; 0x04
 15c:	6d 83       	std	Y+5, r22	; 0x05
 15e:	7e 83       	std	Y+6, r23	; 0x06
 160:	38 87       	std	Y+8, r19	; 0x08
 162:	2f 83       	std	Y+7, r18	; 0x07
	_event = false;
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	fc 01       	movw	r30, r24
 16a:	10 82       	st	Z, r1
	_enable = true;
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	9a 81       	ldd	r25, Y+2	; 0x02
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	fc 01       	movw	r30, r24
 174:	21 83       	std	Z+1, r18	; 0x01
	_counter = 0;
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	fc 01       	movw	r30, r24
 17c:	14 82       	std	Z+4, r1	; 0x04
 17e:	15 82       	std	Z+5, r1	; 0x05
 180:	16 82       	std	Z+6, r1	; 0x06
 182:	17 82       	std	Z+7, r1	; 0x07

	_callback = callback;
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	2f 81       	ldd	r18, Y+7	; 0x07
 18a:	38 85       	ldd	r19, Y+8	; 0x08
 18c:	fc 01       	movw	r30, r24
 18e:	33 83       	std	Z+3, r19	; 0x03
 190:	22 83       	std	Z+2, r18	; 0x02
	_interval = interval;
 192:	29 81       	ldd	r18, Y+1	; 0x01
 194:	3a 81       	ldd	r19, Y+2	; 0x02
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	9c 81       	ldd	r25, Y+4	; 0x04
 19a:	ad 81       	ldd	r26, Y+5	; 0x05
 19c:	be 81       	ldd	r27, Y+6	; 0x06
 19e:	f9 01       	movw	r30, r18
 1a0:	80 87       	std	Z+8, r24	; 0x08
 1a2:	91 87       	std	Z+9, r25	; 0x09
 1a4:	a2 87       	std	Z+10, r26	; 0x0a
 1a6:	b3 87       	std	Z+11, r27	; 0x0b
}
 1a8:	00 00       	nop
 1aa:	28 96       	adiw	r28, 0x08	; 8
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <_ZN7Timeout12checkTimeoutEv>:

void Timeout::checkTimeout()
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	1f 92       	push	r1
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
	_counter++;
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	fc 01       	movw	r30, r24
 1d2:	84 81       	ldd	r24, Z+4	; 0x04
 1d4:	95 81       	ldd	r25, Z+5	; 0x05
 1d6:	a6 81       	ldd	r26, Z+6	; 0x06
 1d8:	b7 81       	ldd	r27, Z+7	; 0x07
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	a1 1d       	adc	r26, r1
 1de:	b1 1d       	adc	r27, r1
 1e0:	29 81       	ldd	r18, Y+1	; 0x01
 1e2:	3a 81       	ldd	r19, Y+2	; 0x02
 1e4:	f9 01       	movw	r30, r18
 1e6:	84 83       	std	Z+4, r24	; 0x04
 1e8:	95 83       	std	Z+5, r25	; 0x05
 1ea:	a6 83       	std	Z+6, r26	; 0x06
 1ec:	b7 83       	std	Z+7, r27	; 0x07
	if (_counter == _interval) {
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	9a 81       	ldd	r25, Y+2	; 0x02
 1f2:	fc 01       	movw	r30, r24
 1f4:	24 81       	ldd	r18, Z+4	; 0x04
 1f6:	35 81       	ldd	r19, Z+5	; 0x05
 1f8:	46 81       	ldd	r20, Z+6	; 0x06
 1fa:	57 81       	ldd	r21, Z+7	; 0x07
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	fc 01       	movw	r30, r24
 202:	80 85       	ldd	r24, Z+8	; 0x08
 204:	91 85       	ldd	r25, Z+9	; 0x09
 206:	a2 85       	ldd	r26, Z+10	; 0x0a
 208:	b3 85       	ldd	r27, Z+11	; 0x0b
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	4a 07       	cpc	r20, r26
 210:	5b 07       	cpc	r21, r27
 212:	61 f4       	brne	.+24     	; 0x22c <_ZN7Timeout12checkTimeoutEv+0x70>
		_event = true;
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	9a 81       	ldd	r25, Y+2	; 0x02
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
		_counter = 0;
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	fc 01       	movw	r30, r24
 224:	14 82       	std	Z+4, r1	; 0x04
 226:	15 82       	std	Z+5, r1	; 0x05
 228:	16 82       	std	Z+6, r1	; 0x06
 22a:	17 82       	std	Z+7, r1	; 0x07
	}
}
 22c:	00 00       	nop
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <_ZN7Timeout8callbackEv>:

void Timeout::callback()
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	1f 92       	push	r1
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	9a 83       	std	Y+2, r25	; 0x02
 246:	89 83       	std	Y+1, r24	; 0x01
	_callback();
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	fc 01       	movw	r30, r24
 24e:	82 81       	ldd	r24, Z+2	; 0x02
 250:	93 81       	ldd	r25, Z+3	; 0x03
 252:	fc 01       	movw	r30, r24
 254:	19 95       	eicall
	_event = 0;
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	fc 01       	movw	r30, r24
 25c:	10 82       	st	Z, r1
}
 25e:	00 00       	nop
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <_ZN7Timeout5eventEv>:

bool Timeout::event()
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	1f 92       	push	r1
 270:	1f 92       	push	r1
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	9a 83       	std	Y+2, r25	; 0x02
 278:	89 83       	std	Y+1, r24	; 0x01
	return _event;
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	9a 81       	ldd	r25, Y+2	; 0x02
 27e:	fc 01       	movw	r30, r24
 280:	80 81       	ld	r24, Z
}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <_ZN5TimerC1Em>:
#include "Timer.h"
#include "Timeout.h"
#include <avr/io.h>
#include <avr/interrupt.h>

Timer::Timer(Hertz freq)
 28c:	2f 92       	push	r2
 28e:	3f 92       	push	r3
 290:	4f 92       	push	r4
 292:	5f 92       	push	r5
 294:	6f 92       	push	r6
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	2c 97       	sbiw	r28, 0x0c	; 12
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	98 87       	std	Y+8, r25	; 0x08
 2c2:	8f 83       	std	Y+7, r24	; 0x07
 2c4:	49 87       	std	Y+9, r20	; 0x09
 2c6:	5a 87       	std	Y+10, r21	; 0x0a
 2c8:	6b 87       	std	Y+11, r22	; 0x0b
 2ca:	7c 87       	std	Y+12, r23	; 0x0c
: _ticks(0), _timer_base(0), _us_per_tick(0), _timeout_counter(0)
 2cc:	8f 81       	ldd	r24, Y+7	; 0x07
 2ce:	98 85       	ldd	r25, Y+8	; 0x08
 2d0:	d9 d2       	rcall	.+1458   	; 0x884 <_ZN9SingletonI5TimerEC1Ev>
 2d2:	8f 81       	ldd	r24, Y+7	; 0x07
 2d4:	98 85       	ldd	r25, Y+8	; 0x08
 2d6:	fc 01       	movw	r30, r24
 2d8:	10 82       	st	Z, r1
 2da:	fc 01       	movw	r30, r24
 2dc:	11 82       	std	Z+1, r1	; 0x01
 2de:	fc 01       	movw	r30, r24
 2e0:	12 82       	std	Z+2, r1	; 0x02
 2e2:	fc 01       	movw	r30, r24
 2e4:	13 82       	std	Z+3, r1	; 0x03
 2e6:	fc 01       	movw	r30, r24
 2e8:	14 82       	std	Z+4, r1	; 0x04
 2ea:	fc 01       	movw	r30, r24
 2ec:	15 82       	std	Z+5, r1	; 0x05
 2ee:	fc 01       	movw	r30, r24
 2f0:	16 82       	std	Z+6, r1	; 0x06
 2f2:	fc 01       	movw	r30, r24
 2f4:	17 82       	std	Z+7, r1	; 0x07
 2f6:	8f 81       	ldd	r24, Y+7	; 0x07
 2f8:	98 85       	ldd	r25, Y+8	; 0x08
 2fa:	fc 01       	movw	r30, r24
 2fc:	11 86       	std	Z+9, r1	; 0x09
 2fe:	10 86       	std	Z+8, r1	; 0x08
 300:	8f 81       	ldd	r24, Y+7	; 0x07
 302:	98 85       	ldd	r25, Y+8	; 0x08
 304:	fc 01       	movw	r30, r24
 306:	12 86       	std	Z+10, r1	; 0x0a
 308:	fc 01       	movw	r30, r24
 30a:	13 86       	std	Z+11, r1	; 0x0b
 30c:	fc 01       	movw	r30, r24
 30e:	14 86       	std	Z+12, r1	; 0x0c
 310:	fc 01       	movw	r30, r24
 312:	15 86       	std	Z+13, r1	; 0x0d
 314:	fc 01       	movw	r30, r24
 316:	16 86       	std	Z+14, r1	; 0x0e
 318:	fc 01       	movw	r30, r24
 31a:	17 86       	std	Z+15, r1	; 0x0f
 31c:	fc 01       	movw	r30, r24
 31e:	10 8a       	std	Z+16, r1	; 0x10
 320:	fc 01       	movw	r30, r24
 322:	11 8a       	std	Z+17, r1	; 0x11
 324:	8f 81       	ldd	r24, Y+7	; 0x07
 326:	98 85       	ldd	r25, Y+8	; 0x08
 328:	42 96       	adiw	r24, 0x12	; 18
 32a:	03 e0       	ldi	r16, 0x03	; 3
 32c:	10 e0       	ldi	r17, 0x00	; 0
 32e:	7c 01       	movw	r14, r24
 330:	0f 3f       	cpi	r16, 0xFF	; 255
 332:	ff ef       	ldi	r31, 0xFF	; 255
 334:	1f 07       	cpc	r17, r31
 336:	41 f0       	breq	.+16     	; 0x348 <_ZN5TimerC1Em+0xbc>
 338:	c7 01       	movw	r24, r14
 33a:	f4 de       	rcall	.-536    	; 0x124 <_ZN7TimeoutC1Ev>
 33c:	2c e0       	ldi	r18, 0x0C	; 12
 33e:	e2 0e       	add	r14, r18
 340:	f1 1c       	adc	r15, r1
 342:	01 50       	subi	r16, 0x01	; 1
 344:	11 09       	sbc	r17, r1
 346:	f4 cf       	rjmp	.-24     	; 0x330 <_ZN5TimerC1Em+0xa4>
 348:	8f 81       	ldd	r24, Y+7	; 0x07
 34a:	98 85       	ldd	r25, Y+8	; 0x08
 34c:	8e 5b       	subi	r24, 0xBE	; 190
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	fc 01       	movw	r30, r24
 352:	10 82       	st	Z, r1
 354:	11 82       	std	Z+1, r1	; 0x01
 356:	12 82       	std	Z+2, r1	; 0x02
 358:	13 82       	std	Z+3, r1	; 0x03
			  (64*1000000) / F_CPU, //64
			 (256*1000000) / F_CPU, //256
			(1024*1000000) / F_CPU  //1024
	};

	TCCR0A = 0x00; // normal operation
 35a:	84 e4       	ldi	r24, 0x44	; 68
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	fc 01       	movw	r30, r24
 360:	10 82       	st	Z, r1
	int div = 0;
 362:	1a 82       	std	Y+2, r1	; 0x02
 364:	19 82       	std	Y+1, r1	; 0x01

	// lógica para selecionar divisor
	if(freq <= Fmax_1024)
 366:	89 85       	ldd	r24, Y+9	; 0x09
 368:	9a 85       	ldd	r25, Y+10	; 0x0a
 36a:	ab 85       	ldd	r26, Y+11	; 0x0b
 36c:	bc 85       	ldd	r27, Y+12	; 0x0c
 36e:	8a 30       	cpi	r24, 0x0A	; 10
 370:	9d 43       	sbci	r25, 0x3D	; 61
 372:	a1 05       	cpc	r26, r1
 374:	b1 05       	cpc	r27, r1
 376:	50 f4       	brcc	.+20     	; 0x38c <_ZN5TimerC1Em+0x100>
	{
		TCCR0B = 0x05; // div 1024
 378:	85 e4       	ldi	r24, 0x45	; 69
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	25 e0       	ldi	r18, 0x05	; 5
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
		div = 1024;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	94 e0       	ldi	r25, 0x04	; 4
 386:	9a 83       	std	Y+2, r25	; 0x02
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	4c c0       	rjmp	.+152    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	else if(freq <= Fmax_256)
 38c:	89 85       	ldd	r24, Y+9	; 0x09
 38e:	9a 85       	ldd	r25, Y+10	; 0x0a
 390:	ab 85       	ldd	r26, Y+11	; 0x0b
 392:	bc 85       	ldd	r27, Y+12	; 0x0c
 394:	85 32       	cpi	r24, 0x25	; 37
 396:	94 4f       	sbci	r25, 0xF4	; 244
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	50 f4       	brcc	.+20     	; 0x3b2 <_ZN5TimerC1Em+0x126>
	{
		TCCR0B = 0x04; // div 256
 39e:	85 e4       	ldi	r24, 0x45	; 69
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	24 e0       	ldi	r18, 0x04	; 4
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
		div = 256;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	9a 83       	std	Y+2, r25	; 0x02
 3ae:	89 83       	std	Y+1, r24	; 0x01
 3b0:	39 c0       	rjmp	.+114    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	else if(freq <= Fmax_64)
 3b2:	89 85       	ldd	r24, Y+9	; 0x09
 3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 3b6:	ab 85       	ldd	r26, Y+11	; 0x0b
 3b8:	bc 85       	ldd	r27, Y+12	; 0x0c
 3ba:	81 39       	cpi	r24, 0x91	; 145
 3bc:	90 4d       	sbci	r25, 0xD0	; 208
 3be:	a3 40       	sbci	r26, 0x03	; 3
 3c0:	b1 05       	cpc	r27, r1
 3c2:	50 f4       	brcc	.+20     	; 0x3d8 <_ZN5TimerC1Em+0x14c>
	{
		TCCR0B = 0x03; // div 64
 3c4:	85 e4       	ldi	r24, 0x45	; 69
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	23 e0       	ldi	r18, 0x03	; 3
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
		div = 64;
 3ce:	80 e4       	ldi	r24, 0x40	; 64
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	9a 83       	std	Y+2, r25	; 0x02
 3d4:	89 83       	std	Y+1, r24	; 0x01
 3d6:	26 c0       	rjmp	.+76     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	else if(freq <= Fmax_8)
 3d8:	89 85       	ldd	r24, Y+9	; 0x09
 3da:	9a 85       	ldd	r25, Y+10	; 0x0a
 3dc:	ab 85       	ldd	r26, Y+11	; 0x0b
 3de:	bc 85       	ldd	r27, Y+12	; 0x0c
 3e0:	81 38       	cpi	r24, 0x81	; 129
 3e2:	94 48       	sbci	r25, 0x84	; 132
 3e4:	ae 41       	sbci	r26, 0x1E	; 30
 3e6:	b1 05       	cpc	r27, r1
 3e8:	50 f4       	brcc	.+20     	; 0x3fe <_ZN5TimerC1Em+0x172>
	{
		TCCR0B = 0x02; // div 8
 3ea:	85 e4       	ldi	r24, 0x45	; 69
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	22 e0       	ldi	r18, 0x02	; 2
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
		div = 8;
 3f4:	88 e0       	ldi	r24, 0x08	; 8
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	9a 83       	std	Y+2, r25	; 0x02
 3fa:	89 83       	std	Y+1, r24	; 0x01
 3fc:	13 c0       	rjmp	.+38     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	else if(freq <= Fmax_1)
 3fe:	89 85       	ldd	r24, Y+9	; 0x09
 400:	9a 85       	ldd	r25, Y+10	; 0x0a
 402:	ab 85       	ldd	r26, Y+11	; 0x0b
 404:	bc 85       	ldd	r27, Y+12	; 0x0c
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	94 42       	sbci	r25, 0x24	; 36
 40a:	a4 4f       	sbci	r26, 0xF4	; 244
 40c:	b1 05       	cpc	r27, r1
 40e:	08 f0       	brcs	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	98 c0       	rjmp	.+304    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	{
		TCCR0B = 0x01; // div 1
 412:	85 e4       	ldi	r24, 0x45	; 69
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
		div = 1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	9a 83       	std	Y+2, r25	; 0x02
 422:	89 83       	std	Y+1, r24	; 0x01
	}
	else // #error "Frequency out of range (should be between 62Hz and 250kHz)."
		return;

	// calcular ciclos de timer
	Hertz ciclos = (F_CPU/div)/freq;
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	9a 81       	ldd	r25, Y+2	; 0x02
 428:	9c 01       	movw	r18, r24
 42a:	99 0f       	add	r25, r25
 42c:	44 0b       	sbc	r20, r20
 42e:	55 0b       	sbc	r21, r21
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	94 e2       	ldi	r25, 0x24	; 36
 434:	a4 ef       	ldi	r26, 0xF4	; 244
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	bc 01       	movw	r22, r24
 43a:	cd 01       	movw	r24, r26
 43c:	05 d3       	rcall	.+1546   	; 0xa48 <__udivmodsi4>
 43e:	da 01       	movw	r26, r20
 440:	c9 01       	movw	r24, r18
 442:	29 85       	ldd	r18, Y+9	; 0x09
 444:	3a 85       	ldd	r19, Y+10	; 0x0a
 446:	4b 85       	ldd	r20, Y+11	; 0x0b
 448:	5c 85       	ldd	r21, Y+12	; 0x0c
 44a:	bc 01       	movw	r22, r24
 44c:	cd 01       	movw	r24, r26
 44e:	fc d2       	rcall	.+1528   	; 0xa48 <__udivmodsi4>
 450:	da 01       	movw	r26, r20
 452:	c9 01       	movw	r24, r18
 454:	8b 83       	std	Y+3, r24	; 0x03
 456:	9c 83       	std	Y+4, r25	; 0x04
 458:	ad 83       	std	Y+5, r26	; 0x05
 45a:	be 83       	std	Y+6, r27	; 0x06
	if(ciclos > Timer_Top) return; // Frequência solicitada é muito alta!
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	9c 81       	ldd	r25, Y+4	; 0x04
 460:	ad 81       	ldd	r26, Y+5	; 0x05
 462:	be 81       	ldd	r27, Y+6	; 0x06
 464:	8f 3f       	cpi	r24, 0xFF	; 255
 466:	91 05       	cpc	r25, r1
 468:	a1 05       	cpc	r26, r1
 46a:	b1 05       	cpc	r27, r1
 46c:	11 f0       	breq	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46e:	08 f0       	brcs	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	6a c0       	rjmp	.+212    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
	_timer_base = (Timer_Top + 1) - ciclos;
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	9c 81       	ldd	r25, Y+4	; 0x04
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	31 e0       	ldi	r19, 0x01	; 1
 47a:	28 1b       	sub	r18, r24
 47c:	39 0b       	sbc	r19, r25
 47e:	8f 81       	ldd	r24, Y+7	; 0x07
 480:	98 85       	ldd	r25, Y+8	; 0x08
 482:	fc 01       	movw	r30, r24
 484:	31 87       	std	Z+9, r19	; 0x09
 486:	20 87       	std	Z+8, r18	; 0x08

	//TODO: compute _us_per_tick
	_us_per_tick = ciclos * Period_div[(TCCR0B & 0x07) - 1];
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	9c 81       	ldd	r25, Y+4	; 0x04
 48c:	ad 81       	ldd	r26, Y+5	; 0x05
 48e:	be 81       	ldd	r27, Y+6	; 0x06
 490:	1c 01       	movw	r2, r24
 492:	2d 01       	movw	r4, r26
 494:	61 2c       	mov	r6, r1
 496:	71 2c       	mov	r7, r1
 498:	43 01       	movw	r8, r6
 49a:	85 e4       	ldi	r24, 0x45	; 69
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	fc 01       	movw	r30, r24
 4a0:	80 81       	ld	r24, Z
 4a2:	88 2f       	mov	r24, r24
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	87 70       	andi	r24, 0x07	; 7
 4a8:	99 27       	eor	r25, r25
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	fc 01       	movw	r30, r24
 4ba:	e0 50       	subi	r30, 0x00	; 0
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	20 81       	ld	r18, Z
 4c0:	31 81       	ldd	r19, Z+1	; 0x01
 4c2:	42 81       	ldd	r20, Z+2	; 0x02
 4c4:	53 81       	ldd	r21, Z+3	; 0x03
 4c6:	64 81       	ldd	r22, Z+4	; 0x04
 4c8:	75 81       	ldd	r23, Z+5	; 0x05
 4ca:	86 81       	ldd	r24, Z+6	; 0x06
 4cc:	97 81       	ldd	r25, Z+7	; 0x07
 4ce:	a2 2e       	mov	r10, r18
 4d0:	b3 2e       	mov	r11, r19
 4d2:	c4 2e       	mov	r12, r20
 4d4:	d5 2e       	mov	r13, r21
 4d6:	e6 2e       	mov	r14, r22
 4d8:	f7 2e       	mov	r15, r23
 4da:	08 2f       	mov	r16, r24
 4dc:	19 2f       	mov	r17, r25
 4de:	22 2d       	mov	r18, r2
 4e0:	33 2d       	mov	r19, r3
 4e2:	44 2d       	mov	r20, r4
 4e4:	55 2d       	mov	r21, r5
 4e6:	66 2d       	mov	r22, r6
 4e8:	77 2d       	mov	r23, r7
 4ea:	88 2d       	mov	r24, r8
 4ec:	99 2d       	mov	r25, r9
 4ee:	ce d2       	rcall	.+1436   	; 0xa8c <__muldi3>
 4f0:	a2 2e       	mov	r10, r18
 4f2:	b3 2e       	mov	r11, r19
 4f4:	c4 2e       	mov	r12, r20
 4f6:	d5 2e       	mov	r13, r21
 4f8:	e6 2e       	mov	r14, r22
 4fa:	f7 2e       	mov	r15, r23
 4fc:	08 2f       	mov	r16, r24
 4fe:	19 2f       	mov	r17, r25
 500:	2a 2d       	mov	r18, r10
 502:	3b 2d       	mov	r19, r11
 504:	4c 2d       	mov	r20, r12
 506:	5d 2d       	mov	r21, r13
 508:	6e 2d       	mov	r22, r14
 50a:	7f 2d       	mov	r23, r15
 50c:	80 2f       	mov	r24, r16
 50e:	91 2f       	mov	r25, r17
 510:	ef 81       	ldd	r30, Y+7	; 0x07
 512:	f8 85       	ldd	r31, Y+8	; 0x08
 514:	22 87       	std	Z+10, r18	; 0x0a
 516:	33 87       	std	Z+11, r19	; 0x0b
 518:	44 87       	std	Z+12, r20	; 0x0c
 51a:	55 87       	std	Z+13, r21	; 0x0d
 51c:	66 87       	std	Z+14, r22	; 0x0e
 51e:	77 87       	std	Z+15, r23	; 0x0f
 520:	80 8b       	std	Z+16, r24	; 0x10
 522:	91 8b       	std	Z+17, r25	; 0x11

	TCNT0  = _timer_base;
 524:	86 e4       	ldi	r24, 0x46	; 70
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2f 81       	ldd	r18, Y+7	; 0x07
 52a:	38 85       	ldd	r19, Y+8	; 0x08
 52c:	f9 01       	movw	r30, r18
 52e:	20 85       	ldd	r18, Z+8	; 0x08
 530:	31 85       	ldd	r19, Z+9	; 0x09
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
	TIMSK0 = 0x01; // liga int de ov
 536:	8e e6       	ldi	r24, 0x6E	; 110
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
 540:	03 c0       	rjmp	.+6      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	{
		TCCR0B = 0x01; // div 1
		div = 1;
	}
	else // #error "Frequency out of range (should be between 62Hz and 250kHz)."
		return;
 542:	00 00       	nop
 544:	01 c0       	rjmp	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>

	// calcular ciclos de timer
	Hertz ciclos = (F_CPU/div)/freq;
	if(ciclos > Timer_Top) return; // Frequência solicitada é muito alta!
 546:	00 00       	nop
	//TODO: compute _us_per_tick
	_us_per_tick = ciclos * Period_div[(TCCR0B & 0x07) - 1];

	TCNT0  = _timer_base;
	TIMSK0 = 0x01; // liga int de ov
}
 548:	2c 96       	adiw	r28, 0x0c	; 12
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	bf 90       	pop	r11
 566:	af 90       	pop	r10
 568:	9f 90       	pop	r9
 56a:	8f 90       	pop	r8
 56c:	7f 90       	pop	r7
 56e:	6f 90       	pop	r6
 570:	5f 90       	pop	r5
 572:	4f 90       	pop	r4
 574:	3f 90       	pop	r3
 576:	2f 90       	pop	r2
 578:	08 95       	ret

0000057a <__vector_23>:
{
	Microseconds start = micros();
	while((micros() - start) <= us);
}

ISR(TIMER0_OVF_vect) { Timer::ovf_isr_handler(); }
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 58a:	0f 92       	push	r0
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	18 d0       	rcall	.+48     	; 0x5de <_ZN5Timer15ovf_isr_handlerEv>
 5ae:	00 00       	nop
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	7f 91       	pop	r23
 5c2:	6f 91       	pop	r22
 5c4:	5f 91       	pop	r21
 5c6:	4f 91       	pop	r20
 5c8:	3f 91       	pop	r19
 5ca:	2f 91       	pop	r18
 5cc:	0f 90       	pop	r0
 5ce:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 5d2:	0f 90       	pop	r0
 5d4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <_ZN5Timer15ovf_isr_handlerEv>:
void Timer::ovf_isr_handler() {
 5de:	af 92       	push	r10
 5e0:	bf 92       	push	r11
 5e2:	cf 92       	push	r12
 5e4:	df 92       	push	r13
 5e6:	ef 92       	push	r14
 5e8:	ff 92       	push	r15
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <_ZN5Timer15ovf_isr_handlerEv+0x16>
 5f4:	1f 92       	push	r1
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
	TCNT0  = self()->_timer_base;
 5fa:	06 e4       	ldi	r16, 0x46	; 70
 5fc:	10 e0       	ldi	r17, 0x00	; 0
 5fe:	56 d1       	rcall	.+684    	; 0x8ac <_ZN9SingletonI5TimerE4selfEv>
 600:	fc 01       	movw	r30, r24
 602:	80 85       	ldd	r24, Z+8	; 0x08
 604:	91 85       	ldd	r25, Z+9	; 0x09
 606:	f8 01       	movw	r30, r16
	self()->_ticks++;
 608:	80 83       	st	Z, r24
 60a:	50 d1       	rcall	.+672    	; 0x8ac <_ZN9SingletonI5TimerE4selfEv>
 60c:	fc 01       	movw	r30, r24
 60e:	a0 80       	ld	r10, Z
 610:	b1 80       	ldd	r11, Z+1	; 0x01
 612:	c2 80       	ldd	r12, Z+2	; 0x02
 614:	d3 80       	ldd	r13, Z+3	; 0x03
 616:	e4 80       	ldd	r14, Z+4	; 0x04
 618:	f5 80       	ldd	r15, Z+5	; 0x05
 61a:	06 81       	ldd	r16, Z+6	; 0x06
 61c:	17 81       	ldd	r17, Z+7	; 0x07
 61e:	2a 2d       	mov	r18, r10
 620:	3b 2d       	mov	r19, r11
 622:	4c 2d       	mov	r20, r12
 624:	5d 2d       	mov	r21, r13
 626:	6e 2d       	mov	r22, r14
 628:	7f 2d       	mov	r23, r15
 62a:	80 2f       	mov	r24, r16
 62c:	91 2f       	mov	r25, r17
 62e:	a1 e0       	ldi	r26, 0x01	; 1
 630:	7e d2       	rcall	.+1276   	; 0xb2e <__adddi3_s8>
 632:	a2 2e       	mov	r10, r18
 634:	b3 2e       	mov	r11, r19
 636:	c4 2e       	mov	r12, r20
 638:	d5 2e       	mov	r13, r21
 63a:	e6 2e       	mov	r14, r22
 63c:	f7 2e       	mov	r15, r23
 63e:	08 2f       	mov	r16, r24
 640:	19 2f       	mov	r17, r25
 642:	a0 82       	st	Z, r10
 644:	b1 82       	std	Z+1, r11	; 0x01
 646:	c2 82       	std	Z+2, r12	; 0x02
 648:	d3 82       	std	Z+3, r13	; 0x03
 64a:	e4 82       	std	Z+4, r14	; 0x04
 64c:	f5 82       	std	Z+5, r15	; 0x05
 64e:	06 83       	std	Z+6, r16	; 0x06
 650:	17 83       	std	Z+7, r17	; 0x07
	for(uint32_t i=0;i<self()->_timeout_counter;i++)
 652:	19 82       	std	Y+1, r1	; 0x01
 654:	1a 82       	std	Y+2, r1	; 0x02
 656:	1b 82       	std	Y+3, r1	; 0x03
 658:	1c 82       	std	Y+4, r1	; 0x04
 65a:	28 d1       	rcall	.+592    	; 0x8ac <_ZN9SingletonI5TimerE4selfEv>
 65c:	8e 5b       	subi	r24, 0xBE	; 190
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	fc 01       	movw	r30, r24
 662:	20 81       	ld	r18, Z
 664:	31 81       	ldd	r19, Z+1	; 0x01
 666:	42 81       	ldd	r20, Z+2	; 0x02
 668:	53 81       	ldd	r21, Z+3	; 0x03
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	9a 81       	ldd	r25, Y+2	; 0x02
 670:	ab 81       	ldd	r26, Y+3	; 0x03
 672:	bc 81       	ldd	r27, Y+4	; 0x04
 674:	82 17       	cp	r24, r18
 676:	93 07       	cpc	r25, r19
 678:	a4 07       	cpc	r26, r20
 67a:	b5 07       	cpc	r27, r21
 67c:	08 f0       	brcs	.+2      	; 0x680 <_ZN5Timer15ovf_isr_handlerEv+0xa2>
 67e:	60 e0       	ldi	r22, 0x00	; 0
		self()->_timeouts[self()->_timeout_counter].checkTimeout();
 680:	66 23       	and	r22, r22
 682:	21 f1       	breq	.+72     	; 0x6cc <_ZN5Timer15ovf_isr_handlerEv+0xee>
 684:	13 d1       	rcall	.+550    	; 0x8ac <_ZN9SingletonI5TimerE4selfEv>
 686:	8c 01       	movw	r16, r24
 688:	11 d1       	rcall	.+546    	; 0x8ac <_ZN9SingletonI5TimerE4selfEv>
 68a:	8e 5b       	subi	r24, 0xBE	; 190
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	fc 01       	movw	r30, r24
 690:	80 81       	ld	r24, Z
 692:	91 81       	ldd	r25, Z+1	; 0x01
 694:	a2 81       	ldd	r26, Z+2	; 0x02
 696:	b3 81       	ldd	r27, Z+3	; 0x03
 698:	9c 01       	movw	r18, r24
 69a:	c9 01       	movw	r24, r18
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	82 0f       	add	r24, r18
 6a2:	93 1f       	adc	r25, r19
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	42 96       	adiw	r24, 0x12	; 18
 6ae:	80 0f       	add	r24, r16
 6b0:	91 1f       	adc	r25, r17
 6b2:	84 dd       	rcall	.-1272   	; 0x1bc <_ZN7Timeout12checkTimeoutEv>

ISR(TIMER0_OVF_vect) { Timer::ovf_isr_handler(); }
void Timer::ovf_isr_handler() {
	TCNT0  = self()->_timer_base;
	self()->_ticks++;
	for(uint32_t i=0;i<self()->_timeout_counter;i++)
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	9a 81       	ldd	r25, Y+2	; 0x02
 6b8:	ab 81       	ldd	r26, Y+3	; 0x03
 6ba:	bc 81       	ldd	r27, Y+4	; 0x04
 6bc:	01 96       	adiw	r24, 0x01	; 1
 6be:	a1 1d       	adc	r26, r1
 6c0:	b1 1d       	adc	r27, r1
 6c2:	89 83       	std	Y+1, r24	; 0x01
 6c4:	9a 83       	std	Y+2, r25	; 0x02
 6c6:	ab 83       	std	Y+3, r26	; 0x03
 6c8:	bc 83       	std	Y+4, r27	; 0x04
 6ca:	c7 cf       	rjmp	.-114    	; 0x65a <_ZN5Timer15ovf_isr_handlerEv+0x7c>
		self()->_timeouts[self()->_timeout_counter].checkTimeout();
}
 6cc:	00 00       	nop
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	df 90       	pop	r13
 6e4:	cf 90       	pop	r12
 6e6:	bf 90       	pop	r11
 6e8:	af 90       	pop	r10
 6ea:	08 95       	ret

000006ec <_ZN5Timer10addTimeoutEmPFvvE>:

bool Timer::addTimeout(uint32_t interval, CALLBACK_t callback)
{
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	28 97       	sbiw	r28, 0x08	; 8
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	de bf       	out	0x3e, r29	; 62
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	cd bf       	out	0x3d, r28	; 61
 700:	9a 83       	std	Y+2, r25	; 0x02
 702:	89 83       	std	Y+1, r24	; 0x01
 704:	4b 83       	std	Y+3, r20	; 0x03
 706:	5c 83       	std	Y+4, r21	; 0x04
 708:	6d 83       	std	Y+5, r22	; 0x05
 70a:	7e 83       	std	Y+6, r23	; 0x06
 70c:	38 87       	std	Y+8, r19	; 0x08
 70e:	2f 83       	std	Y+7, r18	; 0x07
	if (_timeout_counter > 3) return 0;
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	9a 81       	ldd	r25, Y+2	; 0x02
 714:	8e 5b       	subi	r24, 0xBE	; 190
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	fc 01       	movw	r30, r24
 71a:	80 81       	ld	r24, Z
 71c:	91 81       	ldd	r25, Z+1	; 0x01
 71e:	a2 81       	ldd	r26, Z+2	; 0x02
 720:	b3 81       	ldd	r27, Z+3	; 0x03
 722:	04 97       	sbiw	r24, 0x04	; 4
 724:	a1 05       	cpc	r26, r1
 726:	b1 05       	cpc	r27, r1
 728:	10 f0       	brcs	.+4      	; 0x72e <_ZN5Timer10addTimeoutEmPFvvE+0x42>
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	39 c0       	rjmp	.+114    	; 0x7a0 <_ZN5Timer10addTimeoutEmPFvvE+0xb4>

	_timeouts[_timeout_counter].config(interval, callback);
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	9a 81       	ldd	r25, Y+2	; 0x02
 732:	8e 5b       	subi	r24, 0xBE	; 190
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	fc 01       	movw	r30, r24
 738:	80 81       	ld	r24, Z
 73a:	91 81       	ldd	r25, Z+1	; 0x01
 73c:	a2 81       	ldd	r26, Z+2	; 0x02
 73e:	b3 81       	ldd	r27, Z+3	; 0x03
 740:	9c 01       	movw	r18, r24
 742:	c9 01       	movw	r24, r18
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	82 0f       	add	r24, r18
 74a:	93 1f       	adc	r25, r19
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	42 96       	adiw	r24, 0x12	; 18
 756:	29 81       	ldd	r18, Y+1	; 0x01
 758:	3a 81       	ldd	r19, Y+2	; 0x02
 75a:	f9 01       	movw	r30, r18
 75c:	e8 0f       	add	r30, r24
 75e:	f9 1f       	adc	r31, r25
 760:	2f 81       	ldd	r18, Y+7	; 0x07
 762:	38 85       	ldd	r19, Y+8	; 0x08
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	9c 81       	ldd	r25, Y+4	; 0x04
 768:	ad 81       	ldd	r26, Y+5	; 0x05
 76a:	be 81       	ldd	r27, Y+6	; 0x06
 76c:	ac 01       	movw	r20, r24
 76e:	bd 01       	movw	r22, r26
 770:	cf 01       	movw	r24, r30
 772:	e6 dc       	rcall	.-1588   	; 0x140 <_ZN7Timeout6configEmPFvvE>
	_timeout_counter++;
 774:	89 81       	ldd	r24, Y+1	; 0x01
 776:	9a 81       	ldd	r25, Y+2	; 0x02
 778:	8e 5b       	subi	r24, 0xBE	; 190
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	fc 01       	movw	r30, r24
 77e:	80 81       	ld	r24, Z
 780:	91 81       	ldd	r25, Z+1	; 0x01
 782:	a2 81       	ldd	r26, Z+2	; 0x02
 784:	b3 81       	ldd	r27, Z+3	; 0x03
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	a1 1d       	adc	r26, r1
 78a:	b1 1d       	adc	r27, r1
 78c:	29 81       	ldd	r18, Y+1	; 0x01
 78e:	3a 81       	ldd	r19, Y+2	; 0x02
 790:	2e 5b       	subi	r18, 0xBE	; 190
 792:	3f 4f       	sbci	r19, 0xFF	; 255
 794:	f9 01       	movw	r30, r18
 796:	80 83       	st	Z, r24
 798:	91 83       	std	Z+1, r25	; 0x01
 79a:	a2 83       	std	Z+2, r26	; 0x02
 79c:	b3 83       	std	Z+3, r27	; 0x03
	return 1;
 79e:	81 e0       	ldi	r24, 0x01	; 1
}
 7a0:	28 96       	adiw	r28, 0x08	; 8
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <_ZN5Timer14timeoutManagerEv>:

void Timer::timeoutManager() {
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	00 d0       	rcall	.+0      	; 0x7b8 <_ZN5Timer14timeoutManagerEv+0x6>
 7b8:	00 d0       	rcall	.+0      	; 0x7ba <_ZN5Timer14timeoutManagerEv+0x8>
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
 7be:	9e 83       	std	Y+6, r25	; 0x06
 7c0:	8d 83       	std	Y+5, r24	; 0x05
	for(uint32_t i=0;i<_timeout_counter;i++) {
 7c2:	19 82       	std	Y+1, r1	; 0x01
 7c4:	1a 82       	std	Y+2, r1	; 0x02
 7c6:	1b 82       	std	Y+3, r1	; 0x03
 7c8:	1c 82       	std	Y+4, r1	; 0x04
 7ca:	8d 81       	ldd	r24, Y+5	; 0x05
 7cc:	9e 81       	ldd	r25, Y+6	; 0x06
 7ce:	8e 5b       	subi	r24, 0xBE	; 190
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	fc 01       	movw	r30, r24
 7d4:	20 81       	ld	r18, Z
 7d6:	31 81       	ldd	r19, Z+1	; 0x01
 7d8:	42 81       	ldd	r20, Z+2	; 0x02
 7da:	53 81       	ldd	r21, Z+3	; 0x03
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	9a 81       	ldd	r25, Y+2	; 0x02
 7e0:	ab 81       	ldd	r26, Y+3	; 0x03
 7e2:	bc 81       	ldd	r27, Y+4	; 0x04
 7e4:	82 17       	cp	r24, r18
 7e6:	93 07       	cpc	r25, r19
 7e8:	a4 07       	cpc	r26, r20
 7ea:	b5 07       	cpc	r27, r21
 7ec:	08 f0       	brcs	.+2      	; 0x7f0 <_ZN5Timer14timeoutManagerEv+0x3e>
 7ee:	40 c0       	rjmp	.+128    	; 0x870 <_ZN5Timer14timeoutManagerEv+0xbe>
		if (_timeouts[_timeout_counter].event())
 7f0:	8d 81       	ldd	r24, Y+5	; 0x05
 7f2:	9e 81       	ldd	r25, Y+6	; 0x06
 7f4:	8e 5b       	subi	r24, 0xBE	; 190
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	fc 01       	movw	r30, r24
 7fa:	80 81       	ld	r24, Z
 7fc:	91 81       	ldd	r25, Z+1	; 0x01
 7fe:	a2 81       	ldd	r26, Z+2	; 0x02
 800:	b3 81       	ldd	r27, Z+3	; 0x03
 802:	9c 01       	movw	r18, r24
 804:	c9 01       	movw	r24, r18
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	82 0f       	add	r24, r18
 80c:	93 1f       	adc	r25, r19
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	42 96       	adiw	r24, 0x12	; 18
 818:	2d 81       	ldd	r18, Y+5	; 0x05
 81a:	3e 81       	ldd	r19, Y+6	; 0x06
 81c:	82 0f       	add	r24, r18
 81e:	93 1f       	adc	r25, r19
 820:	24 dd       	rcall	.-1464   	; 0x26a <_ZN7Timeout5eventEv>
 822:	88 23       	and	r24, r24
 824:	c9 f0       	breq	.+50     	; 0x858 <_ZN5Timer14timeoutManagerEv+0xa6>
		_timeouts[_timeout_counter].callback();
 826:	8d 81       	ldd	r24, Y+5	; 0x05
 828:	9e 81       	ldd	r25, Y+6	; 0x06
 82a:	8e 5b       	subi	r24, 0xBE	; 190
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	fc 01       	movw	r30, r24
 830:	80 81       	ld	r24, Z
 832:	91 81       	ldd	r25, Z+1	; 0x01
 834:	a2 81       	ldd	r26, Z+2	; 0x02
 836:	b3 81       	ldd	r27, Z+3	; 0x03
 838:	9c 01       	movw	r18, r24
 83a:	c9 01       	movw	r24, r18
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	82 0f       	add	r24, r18
 842:	93 1f       	adc	r25, r19
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	42 96       	adiw	r24, 0x12	; 18
 84e:	2d 81       	ldd	r18, Y+5	; 0x05
 850:	3e 81       	ldd	r19, Y+6	; 0x06
 852:	82 0f       	add	r24, r18
 854:	93 1f       	adc	r25, r19
 856:	f0 dc       	rcall	.-1568   	; 0x238 <_ZN7Timeout8callbackEv>
	_timeout_counter++;
	return 1;
}

void Timer::timeoutManager() {
	for(uint32_t i=0;i<_timeout_counter;i++) {
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	9a 81       	ldd	r25, Y+2	; 0x02
 85c:	ab 81       	ldd	r26, Y+3	; 0x03
 85e:	bc 81       	ldd	r27, Y+4	; 0x04
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	a1 1d       	adc	r26, r1
 864:	b1 1d       	adc	r27, r1
 866:	89 83       	std	Y+1, r24	; 0x01
 868:	9a 83       	std	Y+2, r25	; 0x02
 86a:	ab 83       	std	Y+3, r26	; 0x03
 86c:	bc 83       	std	Y+4, r27	; 0x04
 86e:	ad cf       	rjmp	.-166    	; 0x7ca <_ZN5Timer14timeoutManagerEv+0x18>
		if (_timeouts[_timeout_counter].event())
		_timeouts[_timeout_counter].callback();
	}
}
 870:	00 00       	nop
 872:	26 96       	adiw	r28, 0x06	; 6
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <_ZN9SingletonI5TimerEC1Ev>:
#define SINGLETON_H_

template<typename T>
class Singleton {
public:
    Singleton() { _singleton = static_cast<T*>(this); }
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	1f 92       	push	r1
 88a:	1f 92       	push	r1
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	9a 83       	std	Y+2, r25	; 0x02
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	9a 81       	ldd	r25, Y+2	; 0x02
 898:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <__data_end+0x1>
 89c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
 8a0:	00 00       	nop
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <_ZN9SingletonI5TimerE4selfEv>:
    ~Singleton() { _singleton = 0; }

    static T * self() { return _singleton; }
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 8b8:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__data_end+0x1>
 8bc:	df 91       	pop	r29
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

000008c2 <_Z10toogle_ledv>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "Timer.h"

bool led_state = 0;
void toogle_led() {
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	cd b7       	in	r28, 0x3d	; 61
 8c8:	de b7       	in	r29, 0x3e	; 62
	if (led_state) PORTH &= ~(1 << PH5);
 8ca:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <led_state>
 8ce:	88 23       	and	r24, r24
 8d0:	51 f0       	breq	.+20     	; 0x8e6 <_Z10toogle_ledv+0x24>
 8d2:	82 e0       	ldi	r24, 0x02	; 2
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	22 e0       	ldi	r18, 0x02	; 2
 8d8:	31 e0       	ldi	r19, 0x01	; 1
 8da:	f9 01       	movw	r30, r18
 8dc:	20 81       	ld	r18, Z
 8de:	2f 7d       	andi	r18, 0xDF	; 223
 8e0:	fc 01       	movw	r30, r24
 8e2:	20 83       	st	Z, r18
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <_Z10toogle_ledv+0x36>
	else PORTH |= (1 << PH5);
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	22 e0       	ldi	r18, 0x02	; 2
 8ec:	31 e0       	ldi	r19, 0x01	; 1
 8ee:	f9 01       	movw	r30, r18
 8f0:	20 81       	ld	r18, Z
 8f2:	20 62       	ori	r18, 0x20	; 32
 8f4:	fc 01       	movw	r30, r24
 8f6:	20 83       	st	Z, r18
	led_state = !led_state;
 8f8:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <led_state>
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	89 27       	eor	r24, r25
 900:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <led_state>
}
 904:	00 00       	nop
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <main>:

int main(void) {
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
 914:	c4 55       	subi	r28, 0x54	; 84
 916:	d1 09       	sbc	r29, r1
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	f8 94       	cli
 91c:	de bf       	out	0x3e, r29	; 62
 91e:	0f be       	out	0x3f, r0	; 63
 920:	cd bf       	out	0x3d, r28	; 61

    // Set input and output ports
    DDRE &= ~(1 << DDE5);				// Set 0 to DDRE5 (PE5)
 922:	8d e2       	ldi	r24, 0x2D	; 45
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	2d e2       	ldi	r18, 0x2D	; 45
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	f9 01       	movw	r30, r18
 92c:	20 81       	ld	r18, Z
 92e:	2f 7d       	andi	r18, 0xDF	; 223
 930:	fc 01       	movw	r30, r24
 932:	20 83       	st	Z, r18
    DDRH |= (1 << DDH5);				// Set 1 to DDRH5 (PH5)
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	21 e0       	ldi	r18, 0x01	; 1
 93a:	31 e0       	ldi	r19, 0x01	; 1
 93c:	f9 01       	movw	r30, r18
 93e:	20 81       	ld	r18, Z
 940:	20 62       	ori	r18, 0x20	; 32
 942:	fc 01       	movw	r30, r24
 944:	20 83       	st	Z, r18

	Timer timer = Timer(1000);
 946:	ce 01       	movw	r24, r28
 948:	0f 96       	adiw	r24, 0x0f	; 15
 94a:	48 ee       	ldi	r20, 0xE8	; 232
 94c:	53 e0       	ldi	r21, 0x03	; 3
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	9c dc       	rcall	.-1736   	; 0x28c <_ZN5TimerC1Em>
	timer.addTimeout(1000, &toogle_led);
 954:	ce 01       	movw	r24, r28
 956:	0f 96       	adiw	r24, 0x0f	; 15
 958:	21 e6       	ldi	r18, 0x61	; 97
 95a:	34 e0       	ldi	r19, 0x04	; 4
 95c:	48 ee       	ldi	r20, 0xE8	; 232
 95e:	53 e0       	ldi	r21, 0x03	; 3
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	c3 de       	rcall	.-634    	; 0x6ec <_ZN5Timer10addTimeoutEmPFvvE>
	sei();

    while (true) {

    	timer.timeoutManager();
 966:	78 94       	sei
 968:	ce 01       	movw	r24, r28
 96a:	0f 96       	adiw	r24, 0x0f	; 15
 96c:	22 df       	rcall	.-444    	; 0x7b2 <_ZN5Timer14timeoutManagerEv>
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	a8 ec       	ldi	r26, 0xC8	; 200
 974:	b2 e4       	ldi	r27, 0x42	; 66
 976:	89 83       	std	Y+1, r24	; 0x01
 978:	9a 83       	std	Y+2, r25	; 0x02
 97a:	ab 83       	std	Y+3, r26	; 0x03
 97c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	4a e7       	ldi	r20, 0x7A	; 122
 984:	55 e4       	ldi	r21, 0x45	; 69
 986:	69 81       	ldd	r22, Y+1	; 0x01
 988:	7a 81       	ldd	r23, Y+2	; 0x02
 98a:	8b 81       	ldd	r24, Y+3	; 0x03
 98c:	9c 81       	ldd	r25, Y+4	; 0x04
 98e:	6b d1       	rcall	.+726    	; 0xc66 <__mulsf3>
 990:	dc 01       	movw	r26, r24
 992:	cb 01       	movw	r24, r22
 994:	8d 83       	std	Y+5, r24	; 0x05
 996:	9e 83       	std	Y+6, r25	; 0x06
 998:	af 83       	std	Y+7, r26	; 0x07
 99a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 99c:	20 e0       	ldi	r18, 0x00	; 0
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	40 e8       	ldi	r20, 0x80	; 128
 9a2:	5f e3       	ldi	r21, 0x3F	; 63
 9a4:	6d 81       	ldd	r22, Y+5	; 0x05
 9a6:	7e 81       	ldd	r23, Y+6	; 0x06
 9a8:	8f 81       	ldd	r24, Y+7	; 0x07
 9aa:	98 85       	ldd	r25, Y+8	; 0x08
 9ac:	db d0       	rcall	.+438    	; 0xb64 <__cmpsf2>
 9ae:	88 23       	and	r24, r24
 9b0:	2c f4       	brge	.+10     	; 0x9bc <main+0xb0>
		__ticks = 1;
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	9a 87       	std	Y+10, r25	; 0x0a
 9b8:	89 87       	std	Y+9, r24	; 0x09
 9ba:	3b c0       	rjmp	.+118    	; 0xa32 <main+0x126>
	else if (__tmp > 65535)
 9bc:	20 e0       	ldi	r18, 0x00	; 0
 9be:	3f ef       	ldi	r19, 0xFF	; 255
 9c0:	4f e7       	ldi	r20, 0x7F	; 127
 9c2:	57 e4       	ldi	r21, 0x47	; 71
 9c4:	6d 81       	ldd	r22, Y+5	; 0x05
 9c6:	7e 81       	ldd	r23, Y+6	; 0x06
 9c8:	8f 81       	ldd	r24, Y+7	; 0x07
 9ca:	98 85       	ldd	r25, Y+8	; 0x08
 9cc:	48 d1       	rcall	.+656    	; 0xc5e <__gesf2>
 9ce:	18 16       	cp	r1, r24
 9d0:	3c f5       	brge	.+78     	; 0xa20 <main+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9d2:	20 e0       	ldi	r18, 0x00	; 0
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	40 e2       	ldi	r20, 0x20	; 32
 9d8:	51 e4       	ldi	r21, 0x41	; 65
 9da:	69 81       	ldd	r22, Y+1	; 0x01
 9dc:	7a 81       	ldd	r23, Y+2	; 0x02
 9de:	8b 81       	ldd	r24, Y+3	; 0x03
 9e0:	9c 81       	ldd	r25, Y+4	; 0x04
 9e2:	41 d1       	rcall	.+642    	; 0xc66 <__mulsf3>
 9e4:	dc 01       	movw	r26, r24
 9e6:	cb 01       	movw	r24, r22
 9e8:	bc 01       	movw	r22, r24
 9ea:	cd 01       	movw	r24, r26
 9ec:	bf d0       	rcall	.+382    	; 0xb6c <__fixunssfsi>
 9ee:	dc 01       	movw	r26, r24
 9f0:	cb 01       	movw	r24, r22
 9f2:	9a 87       	std	Y+10, r25	; 0x0a
 9f4:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 9f6:	89 85       	ldd	r24, Y+9	; 0x09
 9f8:	9a 85       	ldd	r25, Y+10	; 0x0a
 9fa:	89 2b       	or	r24, r25
 9fc:	09 f4       	brne	.+2      	; 0xa00 <main+0xf4>
 9fe:	b4 cf       	rjmp	.-152    	; 0x968 <main+0x5c>
 a00:	80 e9       	ldi	r24, 0x90	; 144
 a02:	91 e0       	ldi	r25, 0x01	; 1
 a04:	9c 87       	std	Y+12, r25	; 0x0c
 a06:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 a08:	8b 85       	ldd	r24, Y+11	; 0x0b
 a0a:	9c 85       	ldd	r25, Y+12	; 0x0c
 a0c:	01 97       	sbiw	r24, 0x01	; 1
 a0e:	f1 f7       	brne	.-4      	; 0xa0c <main+0x100>
 a10:	9c 87       	std	Y+12, r25	; 0x0c
 a12:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a14:	89 85       	ldd	r24, Y+9	; 0x09
 a16:	9a 85       	ldd	r25, Y+10	; 0x0a
 a18:	01 97       	sbiw	r24, 0x01	; 1
 a1a:	9a 87       	std	Y+10, r25	; 0x0a
 a1c:	89 87       	std	Y+9, r24	; 0x09
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a1e:	eb cf       	rjmp	.-42     	; 0x9f6 <main+0xea>
 a20:	6d 81       	ldd	r22, Y+5	; 0x05
 a22:	7e 81       	ldd	r23, Y+6	; 0x06
 a24:	8f 81       	ldd	r24, Y+7	; 0x07
 a26:	98 85       	ldd	r25, Y+8	; 0x08
 a28:	a1 d0       	rcall	.+322    	; 0xb6c <__fixunssfsi>
 a2a:	dc 01       	movw	r26, r24
 a2c:	cb 01       	movw	r24, r22
 a2e:	9a 87       	std	Y+10, r25	; 0x0a
 a30:	89 87       	std	Y+9, r24	; 0x09
 a32:	89 85       	ldd	r24, Y+9	; 0x09
 a34:	9a 85       	ldd	r25, Y+10	; 0x0a
 a36:	9e 87       	std	Y+14, r25	; 0x0e
 a38:	8d 87       	std	Y+13, r24	; 0x0d
 a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
 a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
 a3e:	01 97       	sbiw	r24, 0x01	; 1
 a40:	f1 f7       	brne	.-4      	; 0xa3e <main+0x132>
 a42:	9e 87       	std	Y+14, r25	; 0x0e
 a44:	8d 87       	std	Y+13, r24	; 0x0d

	Timer timer = Timer(1000);
	timer.addTimeout(1000, &toogle_led);
	sei();

    while (true) {
 a46:	90 cf       	rjmp	.-224    	; 0x968 <main+0x5c>

00000a48 <__udivmodsi4>:
 a48:	a1 e2       	ldi	r26, 0x21	; 33
 a4a:	1a 2e       	mov	r1, r26
 a4c:	aa 1b       	sub	r26, r26
 a4e:	bb 1b       	sub	r27, r27
 a50:	fd 01       	movw	r30, r26
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <__udivmodsi4_ep>

00000a54 <__udivmodsi4_loop>:
 a54:	aa 1f       	adc	r26, r26
 a56:	bb 1f       	adc	r27, r27
 a58:	ee 1f       	adc	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	a2 17       	cp	r26, r18
 a5e:	b3 07       	cpc	r27, r19
 a60:	e4 07       	cpc	r30, r20
 a62:	f5 07       	cpc	r31, r21
 a64:	20 f0       	brcs	.+8      	; 0xa6e <__udivmodsi4_ep>
 a66:	a2 1b       	sub	r26, r18
 a68:	b3 0b       	sbc	r27, r19
 a6a:	e4 0b       	sbc	r30, r20
 a6c:	f5 0b       	sbc	r31, r21

00000a6e <__udivmodsi4_ep>:
 a6e:	66 1f       	adc	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	1a 94       	dec	r1
 a78:	69 f7       	brne	.-38     	; 0xa54 <__udivmodsi4_loop>
 a7a:	60 95       	com	r22
 a7c:	70 95       	com	r23
 a7e:	80 95       	com	r24
 a80:	90 95       	com	r25
 a82:	9b 01       	movw	r18, r22
 a84:	ac 01       	movw	r20, r24
 a86:	bd 01       	movw	r22, r26
 a88:	cf 01       	movw	r24, r30
 a8a:	08 95       	ret

00000a8c <__muldi3>:
 a8c:	df 93       	push	r29
 a8e:	cf 93       	push	r28
 a90:	1f 93       	push	r17
 a92:	0f 93       	push	r16
 a94:	9a 9d       	mul	r25, r10
 a96:	f0 2d       	mov	r31, r0
 a98:	21 9f       	mul	r18, r17
 a9a:	f0 0d       	add	r31, r0
 a9c:	8b 9d       	mul	r24, r11
 a9e:	f0 0d       	add	r31, r0
 aa0:	8a 9d       	mul	r24, r10
 aa2:	e0 2d       	mov	r30, r0
 aa4:	f1 0d       	add	r31, r1
 aa6:	03 9f       	mul	r16, r19
 aa8:	f0 0d       	add	r31, r0
 aaa:	02 9f       	mul	r16, r18
 aac:	e0 0d       	add	r30, r0
 aae:	f1 1d       	adc	r31, r1
 ab0:	4e 9d       	mul	r20, r14
 ab2:	e0 0d       	add	r30, r0
 ab4:	f1 1d       	adc	r31, r1
 ab6:	5e 9d       	mul	r21, r14
 ab8:	f0 0d       	add	r31, r0
 aba:	4f 9d       	mul	r20, r15
 abc:	f0 0d       	add	r31, r0
 abe:	7f 93       	push	r23
 ac0:	6f 93       	push	r22
 ac2:	bf 92       	push	r11
 ac4:	af 92       	push	r10
 ac6:	5f 93       	push	r21
 ac8:	4f 93       	push	r20
 aca:	d5 01       	movw	r26, r10
 acc:	3c d0       	rcall	.+120    	; 0xb46 <__umulhisi3>
 ace:	8b 01       	movw	r16, r22
 ad0:	ac 01       	movw	r20, r24
 ad2:	d7 01       	movw	r26, r14
 ad4:	38 d0       	rcall	.+112    	; 0xb46 <__umulhisi3>
 ad6:	eb 01       	movw	r28, r22
 ad8:	e8 0f       	add	r30, r24
 ada:	f9 1f       	adc	r31, r25
 adc:	d6 01       	movw	r26, r12
 ade:	1f d0       	rcall	.+62     	; 0xb1e <__muldi3_6>
 ae0:	2f 91       	pop	r18
 ae2:	3f 91       	pop	r19
 ae4:	d6 01       	movw	r26, r12
 ae6:	2f d0       	rcall	.+94     	; 0xb46 <__umulhisi3>
 ae8:	c6 0f       	add	r28, r22
 aea:	d7 1f       	adc	r29, r23
 aec:	e8 1f       	adc	r30, r24
 aee:	f9 1f       	adc	r31, r25
 af0:	af 91       	pop	r26
 af2:	bf 91       	pop	r27
 af4:	14 d0       	rcall	.+40     	; 0xb1e <__muldi3_6>
 af6:	2f 91       	pop	r18
 af8:	3f 91       	pop	r19
 afa:	25 d0       	rcall	.+74     	; 0xb46 <__umulhisi3>
 afc:	c6 0f       	add	r28, r22
 afe:	d7 1f       	adc	r29, r23
 b00:	e8 1f       	adc	r30, r24
 b02:	f9 1f       	adc	r31, r25
 b04:	d6 01       	movw	r26, r12
 b06:	1f d0       	rcall	.+62     	; 0xb46 <__umulhisi3>
 b08:	e6 0f       	add	r30, r22
 b0a:	f7 1f       	adc	r31, r23
 b0c:	98 01       	movw	r18, r16
 b0e:	be 01       	movw	r22, r28
 b10:	cf 01       	movw	r24, r30
 b12:	11 24       	eor	r1, r1
 b14:	0f 91       	pop	r16
 b16:	1f 91       	pop	r17
 b18:	cf 91       	pop	r28
 b1a:	df 91       	pop	r29
 b1c:	08 95       	ret

00000b1e <__muldi3_6>:
 b1e:	13 d0       	rcall	.+38     	; 0xb46 <__umulhisi3>
 b20:	46 0f       	add	r20, r22
 b22:	57 1f       	adc	r21, r23
 b24:	c8 1f       	adc	r28, r24
 b26:	d9 1f       	adc	r29, r25
 b28:	08 f4       	brcc	.+2      	; 0xb2c <__muldi3_6+0xe>
 b2a:	31 96       	adiw	r30, 0x01	; 1
 b2c:	08 95       	ret

00000b2e <__adddi3_s8>:
 b2e:	00 24       	eor	r0, r0
 b30:	a7 fd       	sbrc	r26, 7
 b32:	00 94       	com	r0
 b34:	2a 0f       	add	r18, r26
 b36:	30 1d       	adc	r19, r0
 b38:	40 1d       	adc	r20, r0
 b3a:	50 1d       	adc	r21, r0
 b3c:	60 1d       	adc	r22, r0
 b3e:	70 1d       	adc	r23, r0
 b40:	80 1d       	adc	r24, r0
 b42:	90 1d       	adc	r25, r0
 b44:	08 95       	ret

00000b46 <__umulhisi3>:
 b46:	a2 9f       	mul	r26, r18
 b48:	b0 01       	movw	r22, r0
 b4a:	b3 9f       	mul	r27, r19
 b4c:	c0 01       	movw	r24, r0
 b4e:	a3 9f       	mul	r26, r19
 b50:	70 0d       	add	r23, r0
 b52:	81 1d       	adc	r24, r1
 b54:	11 24       	eor	r1, r1
 b56:	91 1d       	adc	r25, r1
 b58:	b2 9f       	mul	r27, r18
 b5a:	70 0d       	add	r23, r0
 b5c:	81 1d       	adc	r24, r1
 b5e:	11 24       	eor	r1, r1
 b60:	91 1d       	adc	r25, r1
 b62:	08 95       	ret

00000b64 <__cmpsf2>:
 b64:	2f d0       	rcall	.+94     	; 0xbc4 <__fp_cmp>
 b66:	08 f4       	brcc	.+2      	; 0xb6a <__cmpsf2+0x6>
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	08 95       	ret

00000b6c <__fixunssfsi>:
 b6c:	57 d0       	rcall	.+174    	; 0xc1c <__fp_splitA>
 b6e:	88 f0       	brcs	.+34     	; 0xb92 <__fixunssfsi+0x26>
 b70:	9f 57       	subi	r25, 0x7F	; 127
 b72:	90 f0       	brcs	.+36     	; 0xb98 <__fixunssfsi+0x2c>
 b74:	b9 2f       	mov	r27, r25
 b76:	99 27       	eor	r25, r25
 b78:	b7 51       	subi	r27, 0x17	; 23
 b7a:	a0 f0       	brcs	.+40     	; 0xba4 <__fixunssfsi+0x38>
 b7c:	d1 f0       	breq	.+52     	; 0xbb2 <__fixunssfsi+0x46>
 b7e:	66 0f       	add	r22, r22
 b80:	77 1f       	adc	r23, r23
 b82:	88 1f       	adc	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	1a f0       	brmi	.+6      	; 0xb8e <__fixunssfsi+0x22>
 b88:	ba 95       	dec	r27
 b8a:	c9 f7       	brne	.-14     	; 0xb7e <__fixunssfsi+0x12>
 b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <__fixunssfsi+0x46>
 b8e:	b1 30       	cpi	r27, 0x01	; 1
 b90:	81 f0       	breq	.+32     	; 0xbb2 <__fixunssfsi+0x46>
 b92:	5e d0       	rcall	.+188    	; 0xc50 <__fp_zero>
 b94:	b1 e0       	ldi	r27, 0x01	; 1
 b96:	08 95       	ret
 b98:	5b c0       	rjmp	.+182    	; 0xc50 <__fp_zero>
 b9a:	67 2f       	mov	r22, r23
 b9c:	78 2f       	mov	r23, r24
 b9e:	88 27       	eor	r24, r24
 ba0:	b8 5f       	subi	r27, 0xF8	; 248
 ba2:	39 f0       	breq	.+14     	; 0xbb2 <__fixunssfsi+0x46>
 ba4:	b9 3f       	cpi	r27, 0xF9	; 249
 ba6:	cc f3       	brlt	.-14     	; 0xb9a <__fixunssfsi+0x2e>
 ba8:	86 95       	lsr	r24
 baa:	77 95       	ror	r23
 bac:	67 95       	ror	r22
 bae:	b3 95       	inc	r27
 bb0:	d9 f7       	brne	.-10     	; 0xba8 <__fixunssfsi+0x3c>
 bb2:	3e f4       	brtc	.+14     	; 0xbc2 <__fixunssfsi+0x56>
 bb4:	90 95       	com	r25
 bb6:	80 95       	com	r24
 bb8:	70 95       	com	r23
 bba:	61 95       	neg	r22
 bbc:	7f 4f       	sbci	r23, 0xFF	; 255
 bbe:	8f 4f       	sbci	r24, 0xFF	; 255
 bc0:	9f 4f       	sbci	r25, 0xFF	; 255
 bc2:	08 95       	ret

00000bc4 <__fp_cmp>:
 bc4:	99 0f       	add	r25, r25
 bc6:	00 08       	sbc	r0, r0
 bc8:	55 0f       	add	r21, r21
 bca:	aa 0b       	sbc	r26, r26
 bcc:	e0 e8       	ldi	r30, 0x80	; 128
 bce:	fe ef       	ldi	r31, 0xFE	; 254
 bd0:	16 16       	cp	r1, r22
 bd2:	17 06       	cpc	r1, r23
 bd4:	e8 07       	cpc	r30, r24
 bd6:	f9 07       	cpc	r31, r25
 bd8:	c0 f0       	brcs	.+48     	; 0xc0a <__fp_cmp+0x46>
 bda:	12 16       	cp	r1, r18
 bdc:	13 06       	cpc	r1, r19
 bde:	e4 07       	cpc	r30, r20
 be0:	f5 07       	cpc	r31, r21
 be2:	98 f0       	brcs	.+38     	; 0xc0a <__fp_cmp+0x46>
 be4:	62 1b       	sub	r22, r18
 be6:	73 0b       	sbc	r23, r19
 be8:	84 0b       	sbc	r24, r20
 bea:	95 0b       	sbc	r25, r21
 bec:	39 f4       	brne	.+14     	; 0xbfc <__fp_cmp+0x38>
 bee:	0a 26       	eor	r0, r26
 bf0:	61 f0       	breq	.+24     	; 0xc0a <__fp_cmp+0x46>
 bf2:	23 2b       	or	r18, r19
 bf4:	24 2b       	or	r18, r20
 bf6:	25 2b       	or	r18, r21
 bf8:	21 f4       	brne	.+8      	; 0xc02 <__fp_cmp+0x3e>
 bfa:	08 95       	ret
 bfc:	0a 26       	eor	r0, r26
 bfe:	09 f4       	brne	.+2      	; 0xc02 <__fp_cmp+0x3e>
 c00:	a1 40       	sbci	r26, 0x01	; 1
 c02:	a6 95       	lsr	r26
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	81 1d       	adc	r24, r1
 c08:	81 1d       	adc	r24, r1
 c0a:	08 95       	ret

00000c0c <__fp_split3>:
 c0c:	57 fd       	sbrc	r21, 7
 c0e:	90 58       	subi	r25, 0x80	; 128
 c10:	44 0f       	add	r20, r20
 c12:	55 1f       	adc	r21, r21
 c14:	59 f0       	breq	.+22     	; 0xc2c <__fp_splitA+0x10>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	71 f0       	breq	.+28     	; 0xc36 <__fp_splitA+0x1a>
 c1a:	47 95       	ror	r20

00000c1c <__fp_splitA>:
 c1c:	88 0f       	add	r24, r24
 c1e:	97 fb       	bst	r25, 7
 c20:	99 1f       	adc	r25, r25
 c22:	61 f0       	breq	.+24     	; 0xc3c <__fp_splitA+0x20>
 c24:	9f 3f       	cpi	r25, 0xFF	; 255
 c26:	79 f0       	breq	.+30     	; 0xc46 <__fp_splitA+0x2a>
 c28:	87 95       	ror	r24
 c2a:	08 95       	ret
 c2c:	12 16       	cp	r1, r18
 c2e:	13 06       	cpc	r1, r19
 c30:	14 06       	cpc	r1, r20
 c32:	55 1f       	adc	r21, r21
 c34:	f2 cf       	rjmp	.-28     	; 0xc1a <__fp_split3+0xe>
 c36:	46 95       	lsr	r20
 c38:	f1 df       	rcall	.-30     	; 0xc1c <__fp_splitA>
 c3a:	08 c0       	rjmp	.+16     	; 0xc4c <__fp_splitA+0x30>
 c3c:	16 16       	cp	r1, r22
 c3e:	17 06       	cpc	r1, r23
 c40:	18 06       	cpc	r1, r24
 c42:	99 1f       	adc	r25, r25
 c44:	f1 cf       	rjmp	.-30     	; 0xc28 <__fp_splitA+0xc>
 c46:	86 95       	lsr	r24
 c48:	71 05       	cpc	r23, r1
 c4a:	61 05       	cpc	r22, r1
 c4c:	08 94       	sec
 c4e:	08 95       	ret

00000c50 <__fp_zero>:
 c50:	e8 94       	clt

00000c52 <__fp_szero>:
 c52:	bb 27       	eor	r27, r27
 c54:	66 27       	eor	r22, r22
 c56:	77 27       	eor	r23, r23
 c58:	cb 01       	movw	r24, r22
 c5a:	97 f9       	bld	r25, 7
 c5c:	08 95       	ret

00000c5e <__gesf2>:
 c5e:	b2 df       	rcall	.-156    	; 0xbc4 <__fp_cmp>
 c60:	08 f4       	brcc	.+2      	; 0xc64 <__gesf2+0x6>
 c62:	8f ef       	ldi	r24, 0xFF	; 255
 c64:	08 95       	ret

00000c66 <__mulsf3>:
 c66:	0b d0       	rcall	.+22     	; 0xc7e <__mulsf3x>
 c68:	78 c0       	rjmp	.+240    	; 0xd5a <__fp_round>
 c6a:	69 d0       	rcall	.+210    	; 0xd3e <__fp_pscA>
 c6c:	28 f0       	brcs	.+10     	; 0xc78 <__mulsf3+0x12>
 c6e:	6e d0       	rcall	.+220    	; 0xd4c <__fp_pscB>
 c70:	18 f0       	brcs	.+6      	; 0xc78 <__mulsf3+0x12>
 c72:	95 23       	and	r25, r21
 c74:	09 f0       	breq	.+2      	; 0xc78 <__mulsf3+0x12>
 c76:	5a c0       	rjmp	.+180    	; 0xd2c <__fp_inf>
 c78:	5f c0       	rjmp	.+190    	; 0xd38 <__fp_nan>
 c7a:	11 24       	eor	r1, r1
 c7c:	ea cf       	rjmp	.-44     	; 0xc52 <__fp_szero>

00000c7e <__mulsf3x>:
 c7e:	c6 df       	rcall	.-116    	; 0xc0c <__fp_split3>
 c80:	a0 f3       	brcs	.-24     	; 0xc6a <__mulsf3+0x4>

00000c82 <__mulsf3_pse>:
 c82:	95 9f       	mul	r25, r21
 c84:	d1 f3       	breq	.-12     	; 0xc7a <__mulsf3+0x14>
 c86:	95 0f       	add	r25, r21
 c88:	50 e0       	ldi	r21, 0x00	; 0
 c8a:	55 1f       	adc	r21, r21
 c8c:	62 9f       	mul	r22, r18
 c8e:	f0 01       	movw	r30, r0
 c90:	72 9f       	mul	r23, r18
 c92:	bb 27       	eor	r27, r27
 c94:	f0 0d       	add	r31, r0
 c96:	b1 1d       	adc	r27, r1
 c98:	63 9f       	mul	r22, r19
 c9a:	aa 27       	eor	r26, r26
 c9c:	f0 0d       	add	r31, r0
 c9e:	b1 1d       	adc	r27, r1
 ca0:	aa 1f       	adc	r26, r26
 ca2:	64 9f       	mul	r22, r20
 ca4:	66 27       	eor	r22, r22
 ca6:	b0 0d       	add	r27, r0
 ca8:	a1 1d       	adc	r26, r1
 caa:	66 1f       	adc	r22, r22
 cac:	82 9f       	mul	r24, r18
 cae:	22 27       	eor	r18, r18
 cb0:	b0 0d       	add	r27, r0
 cb2:	a1 1d       	adc	r26, r1
 cb4:	62 1f       	adc	r22, r18
 cb6:	73 9f       	mul	r23, r19
 cb8:	b0 0d       	add	r27, r0
 cba:	a1 1d       	adc	r26, r1
 cbc:	62 1f       	adc	r22, r18
 cbe:	83 9f       	mul	r24, r19
 cc0:	a0 0d       	add	r26, r0
 cc2:	61 1d       	adc	r22, r1
 cc4:	22 1f       	adc	r18, r18
 cc6:	74 9f       	mul	r23, r20
 cc8:	33 27       	eor	r19, r19
 cca:	a0 0d       	add	r26, r0
 ccc:	61 1d       	adc	r22, r1
 cce:	23 1f       	adc	r18, r19
 cd0:	84 9f       	mul	r24, r20
 cd2:	60 0d       	add	r22, r0
 cd4:	21 1d       	adc	r18, r1
 cd6:	82 2f       	mov	r24, r18
 cd8:	76 2f       	mov	r23, r22
 cda:	6a 2f       	mov	r22, r26
 cdc:	11 24       	eor	r1, r1
 cde:	9f 57       	subi	r25, 0x7F	; 127
 ce0:	50 40       	sbci	r21, 0x00	; 0
 ce2:	8a f0       	brmi	.+34     	; 0xd06 <__mulsf3_pse+0x84>
 ce4:	e1 f0       	breq	.+56     	; 0xd1e <__mulsf3_pse+0x9c>
 ce6:	88 23       	and	r24, r24
 ce8:	4a f0       	brmi	.+18     	; 0xcfc <__mulsf3_pse+0x7a>
 cea:	ee 0f       	add	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	bb 1f       	adc	r27, r27
 cf0:	66 1f       	adc	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	91 50       	subi	r25, 0x01	; 1
 cf8:	50 40       	sbci	r21, 0x00	; 0
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__mulsf3_pse+0x64>
 cfc:	9e 3f       	cpi	r25, 0xFE	; 254
 cfe:	51 05       	cpc	r21, r1
 d00:	70 f0       	brcs	.+28     	; 0xd1e <__mulsf3_pse+0x9c>
 d02:	14 c0       	rjmp	.+40     	; 0xd2c <__fp_inf>
 d04:	a6 cf       	rjmp	.-180    	; 0xc52 <__fp_szero>
 d06:	5f 3f       	cpi	r21, 0xFF	; 255
 d08:	ec f3       	brlt	.-6      	; 0xd04 <__mulsf3_pse+0x82>
 d0a:	98 3e       	cpi	r25, 0xE8	; 232
 d0c:	dc f3       	brlt	.-10     	; 0xd04 <__mulsf3_pse+0x82>
 d0e:	86 95       	lsr	r24
 d10:	77 95       	ror	r23
 d12:	67 95       	ror	r22
 d14:	b7 95       	ror	r27
 d16:	f7 95       	ror	r31
 d18:	e7 95       	ror	r30
 d1a:	9f 5f       	subi	r25, 0xFF	; 255
 d1c:	c1 f7       	brne	.-16     	; 0xd0e <__mulsf3_pse+0x8c>
 d1e:	fe 2b       	or	r31, r30
 d20:	88 0f       	add	r24, r24
 d22:	91 1d       	adc	r25, r1
 d24:	96 95       	lsr	r25
 d26:	87 95       	ror	r24
 d28:	97 f9       	bld	r25, 7
 d2a:	08 95       	ret

00000d2c <__fp_inf>:
 d2c:	97 f9       	bld	r25, 7
 d2e:	9f 67       	ori	r25, 0x7F	; 127
 d30:	80 e8       	ldi	r24, 0x80	; 128
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	60 e0       	ldi	r22, 0x00	; 0
 d36:	08 95       	ret

00000d38 <__fp_nan>:
 d38:	9f ef       	ldi	r25, 0xFF	; 255
 d3a:	80 ec       	ldi	r24, 0xC0	; 192
 d3c:	08 95       	ret

00000d3e <__fp_pscA>:
 d3e:	00 24       	eor	r0, r0
 d40:	0a 94       	dec	r0
 d42:	16 16       	cp	r1, r22
 d44:	17 06       	cpc	r1, r23
 d46:	18 06       	cpc	r1, r24
 d48:	09 06       	cpc	r0, r25
 d4a:	08 95       	ret

00000d4c <__fp_pscB>:
 d4c:	00 24       	eor	r0, r0
 d4e:	0a 94       	dec	r0
 d50:	12 16       	cp	r1, r18
 d52:	13 06       	cpc	r1, r19
 d54:	14 06       	cpc	r1, r20
 d56:	05 06       	cpc	r0, r21
 d58:	08 95       	ret

00000d5a <__fp_round>:
 d5a:	09 2e       	mov	r0, r25
 d5c:	03 94       	inc	r0
 d5e:	00 0c       	add	r0, r0
 d60:	11 f4       	brne	.+4      	; 0xd66 <__fp_round+0xc>
 d62:	88 23       	and	r24, r24
 d64:	52 f0       	brmi	.+20     	; 0xd7a <__fp_round+0x20>
 d66:	bb 0f       	add	r27, r27
 d68:	40 f4       	brcc	.+16     	; 0xd7a <__fp_round+0x20>
 d6a:	bf 2b       	or	r27, r31
 d6c:	11 f4       	brne	.+4      	; 0xd72 <__fp_round+0x18>
 d6e:	60 ff       	sbrs	r22, 0
 d70:	04 c0       	rjmp	.+8      	; 0xd7a <__fp_round+0x20>
 d72:	6f 5f       	subi	r22, 0xFF	; 255
 d74:	7f 4f       	sbci	r23, 0xFF	; 255
 d76:	8f 4f       	sbci	r24, 0xFF	; 255
 d78:	9f 4f       	sbci	r25, 0xFF	; 255
 d7a:	08 95       	ret

00000d7c <_exit>:
 d7c:	f8 94       	cli

00000d7e <__stop_program>:
 d7e:	ff cf       	rjmp	.-2      	; 0xd7e <__stop_program>
